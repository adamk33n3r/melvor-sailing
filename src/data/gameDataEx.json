{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "http://www.melvoridle.com/assets/schema/gameData.json",
  "title": "Melvor Game Data Package",
  "description": "A game data package for Melvor Idle",
  "type": "object",
  "properties": {
    "namespace": {
      "description": "Unique namespace for the game data. For Modded Data Packages, this is defined by the manifest.json and has no effect.",
      "type": "string"
    },
    "data": {
      "$ref": "#/$defs/GameData"
    },
    "modifications": {
      "$ref": "#/$defs/GameDataModifications"
    },
    "dependentData": {
      "description": "Optional array of data that is registered only if another namespace is registered",
      "type": "array",
      "items": {
        "$ref": "#/$defs/DependentData"
      },
      "minItems": 1
    }
  },
  "$defs": {
    "GameData": {
      "description": "Contains the data used to construct game objects",
      "type": "object",
      "properties": {
        "skillLevelCapIncreases": {
          "description": "Skill level cap increases defined by this data package for use in Gamemodes",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillLevelCapIncreaseData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "gamemodes": {
          "description": "An array of Gamemodes defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GamemodeData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "items": {
          "description": "Items defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "attackStyles": {
          "description": "AttackStyles defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackStyleData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatEffectGroups": {
          "description": "CombatEffectGroups defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectGroupData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatEffectTemplates": {
          "description": "CombatEffectTemplates defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectTemplateData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatEffects": {
          "description": "CombatEffects defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyCombatEffectData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatEffectTables": {
          "description": "CombatEffectTables defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectTableData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "attacks": {
          "description": "SpecialAttacks defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatPassives": {
          "description": "CombatPassives defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "monsters": {
          "description": "Monsters defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatAreaCategories": {
          "description": "Combat Area Categories defined by this data package. This category must be referenced in combatAreaCategoryOrder to display.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatAreaCategoryData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatAreaCategoryOrder": {
          "description": "The display order of Combat Area Categories.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatAreas": {
          "description": "Combat Areas defined by this data package",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/CombatAreaData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatAreaDisplayOrder": {
          "description": "Determines the display order of combat areas",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "slayerAreas": {
          "description": "Slayer Areas defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SlayerAreaData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "slayerAreaDisplayOrder": {
          "description": "Determines the display order of slayer areas",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "dungeons": {
          "description": "Dungeons defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DungeonData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "dungeonDisplayOrder": {
          "description": "Determines the display order of dungeons",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "abyssDepths": {
          "description": "The Abyss Depths defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DungeonData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "strongholds": {
          "description": "Strongholds defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/StrongholdData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatEvents": {
          "description": "CombatEvent objects defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEventData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "slayerTaskCategories": {
          "description": "Slayer Task Categories defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SlayerTaskCategoryData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "prayers": {
          "description": "ActivePrayers defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PrayerData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "attackSpellbooks": {
          "description": "AttackSpellbooks defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackSpellbookData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "attackSpells": {
          "description": "AttackSpells defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackSpellData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "standardSpells": {
          "description": "StandardSpells defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/OldAttackSpellData"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "ancientSpells": {
          "description": "AncientSpells defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/OldAttackSpellData"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "archaicSpells": {
          "description": "ArchaicSpells defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/OldAttackSpellData"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "curseSpells": {
          "description": "CurseSpells defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurseSpellData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "auroraSpells": {
          "description": "AuroraSpells defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AuroraSpellData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "pets": {
          "description": "Pets defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PetData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopCategories": {
          "description": "ShopCategories defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopCategoryData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopCategoryOrder": {
          "description": "Determines the display order of ShopCategories",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopPurchases": {
          "description": "ShopPurchases defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopDisplayOrder": {
          "description": "Determines the display order of ShopPurchases",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "skillTreesDisplayOrder": {
          "description": "Defines the display order of skill trees",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "ancientRelicsDisplayOrder": {
          "description": "Defines the display order of ancient relics skill dropdown",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopUpgradeChains": {
          "description": "ShopUpgradeChains defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopUpgradeChainData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "itemUpgrades": {
          "description": "ItemUpgrades defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ItemUpgradeData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "itemSynergies": {
          "description": "ItemSynergies defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ItemSynergyData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "golbinRaid": {
          "$ref": "#/$defs/GolbinRaidData"
        },
        "steamAchievements": {
          "description": "SteamAchievements defined by this data package. Has no effect for modded data packages.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SteamAchievementData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "tutorialStages": {
          "description": "TutorialStages defined by this data package. Has no effect for modded data packages.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TutorialStageData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "tutorialStageOrder": {
          "description": "Determines the order that tutorial stages must be completed in. Has no effect for modded data packages.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "skillData": {
          "description": "Contains data that should be registered to skills. Supports custom skill data.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnySkillData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "randomGems": {
          "description": "Determines the drops in the standard gem table.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "randomSuperiorGems": {
          "description": "Determines the drops in the superior gem table.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "randomAbyssalGems": {
          "description": "Determines the drops in the abyssal gem table,",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "randomFragments": {
          "description": "Determines the drops in the fragments table,",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "randomFiremakingOils": {
          "description": "Determines the drops in the firemaking oils table,",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "itmMonsters": {
          "description": "Determines the list of monsters the Into the Mist Dungeon should choose from.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "spiderLairMonsters": {
          "description": "Determines the list of monsters the Spider Lair Dungeons should choose from.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "pages": {
          "description": "Pages defined by this data package.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PageData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "bankSortOrder": {
          "description": "Determines the default sort order for items in the bank.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "lore": {
          "description": "LoreBooks defined by this data package.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/LoreBookData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "ancientRelics": {
          "description": "AncientRelics defined by this data package.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AncientRelicData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatTriangleSets": {
          "description": "Combat Triangle sets defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatTriangleSetData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "equipmentSlots": {
          "description": "Equipment Slots defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentSlotData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "realms": {
          "description": "Realms defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmsData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "damageTypes": {
          "description": "Damage Types defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "modifiers": {
          "description": "Modifiers defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierData"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "GameDataModifications": {
      "description": "Contains the data used to modify existing game objects",
      "type": "object",
      "properties": {
        "gamemodes": {
          "description": "Gamemode modifications defined by this data package",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/GamemodeModificationData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatAreas": {
          "description": "Combat area modifications defined by this data package",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/CombatAreaModificationData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "cookingCategories": {
          "description": "CookingCategory Modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingCategoryModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "combatAreaCategories": {
          "description": "CombatAreaCategory Modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatAreaCategoryModificationData"
          }
        },
        "dungeons": {
          "description": "Dungeon modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DungeonModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "abyssDepths": {
          "description": "The Abyss modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DungeonModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "items": {
          "description": "Item modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "fletchingRecipes": {
          "description": "FletchingRecipe Modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FletchingRecipeModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "monsters": {
          "description": "Monsters modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopPurchases": {
          "description": "ShopPurchase Modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "shopUpgradeChains": {
          "description": "ShopUpgradeChain Modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopUpgradeChainModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "slayerAreas": {
          "description": "Slayer area modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SlayerAreaModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "pages": {
          "description": "Page modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PageModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "equipmentSlots": {
          "description": "Equipment Slot modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentSlotModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "damageTypes": {
          "description": "Damage Type modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "modifiers": {
          "description": "Modifier modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "skillData": {
          "description": "Modifications to skill data defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnySkillModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "pets": {
          "description": "Pet modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PetModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "itemUpgrades": {
          "description": "Item upgrade modifications defined by this data package",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ItemUpgradeModificationData"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "DependentData": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace that must be registered to register this data",
          "type": "string",
          "allOf": [
            {
              "$ref": "#/$defs/Namespace"
            }
          ]
        },
        "data": {
          "description": "Optional. Game Data that will be registered when the namespace is present",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/GameData"
            }
          ]
        },
        "modifications": {
          "description": "Optional. Game Data Modifications that will be registered when the namespace is present",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/GameDataModifications"
            }
          ]
        }
      },
      "required": [
        "namespace"
      ],
      "additionalProperties": false
    },
    "SupportedLanguage": {
      "type": "string",
      "enum": [
        "en",
        "zh-CN",
        "zh-TW",
        "fr",
        "de",
        "it",
        "ko",
        "ja",
        "pt",
        "pt-br",
        "es",
        "ru",
        "tr",
        "lemon",
        "carrot"
      ]
    },
    "IDData": {
      "description": "Data for constructing a NamespacedObject object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The local ID of the object",
          "type": "string",
          "pattern": "^\\w+$"
        }
      },
      "required": [
        "id"
      ]
    },
    "RealmedObjectData": {
      "description": "Data for constructing a RealmedObject object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "realm": {
          "description": "Optional. The ID of the realm this object belongs to. Defaults to melvorD:Melvor",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        }
      }
    },
    "ModificationIDData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the object to modify",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "id"
      ]
    },
    "CombatTriangleType": {
      "type": "string",
      "enum": [
        "Standard",
        "Hardcore",
        "InvertedHardcore"
      ]
    },
    "AttackType": {
      "type": "string",
      "enum": [
        "melee",
        "ranged",
        "magic"
      ]
    },
    "RunecraftingSubCategory": {
      "type": "string",
      "enum": [
        "ElementalRunes",
        "Staff",
        "Wand",
        "None"
      ]
    },
    "AmmoType": {
      "description": "Type of ammo",
      "type": "string",
      "enum": [
        "Arrows",
        "Bolts",
        "Javelins",
        "ThrowingKnives",
        "None",
        "AbyssalArrows",
        "AbyssalBolts"
      ]
    },
    "SlayerTier": {
      "description": "The tier of a slayer task",
      "type": "string",
      "enum": [
        "Easy",
        "Normal",
        "Hard",
        "Elite",
        "Master",
        "Legendary",
        "Mythical"
      ]
    },
    "Namespace": {
      "description": "Valid Namespace name",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "melvorBaseGame",
            "melvorTrue",
            "melvorD",
            "melvorF",
            "melvorTotH",
            "melvorAoD",
            "melvorBirthday2023",
            "melvorAprilFools2024",
            "melvorItA"
          ]
        },
        {
          "type": "string",
          "pattern": "^(?!melvor)[\\w]+$"
        }
      ]
    },
    "ValidID": {
      "type": "string",
      "pattern": "^\\w+:\\w+$"
    },
    "AnyItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ItemID"
        },
        {
          "$ref": "#/$defs/EquipmentItemID"
        },
        {
          "$ref": "#/$defs/FoodItemID"
        },
        {
          "$ref": "#/$defs/BoneItemID"
        },
        {
          "$ref": "#/$defs/PotionItemID"
        },
        {
          "$ref": "#/$defs/ReadableItemID"
        },
        {
          "$ref": "#/$defs/OpenableItemID"
        },
        {
          "$ref": "#/$defs/TokenItemID"
        },
        {
          "$ref": "#/$defs/CompostItemID"
        },
        {
          "$ref": "#/$defs/SoulItemID"
        },
        {
          "$ref": "#/$defs/RuneItemID"
        },
        {
          "$ref": "#/$defs/FiremakingOilItemID"
        }
      ]
    },
    "ItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Normal_Logs",
            "melvorD:Oak_Logs",
            "melvorD:Willow_Logs",
            "melvorD:Teak_Logs",
            "melvorD:Maple_Logs",
            "melvorD:Mahogany_Logs",
            "melvorD:Yew_Logs",
            "melvorD:Magic_Logs",
            "melvorD:Redwood_Logs",
            "melvorD:Raw_Shrimp",
            "melvorD:Raw_Sardine",
            "melvorD:Raw_Herring",
            "melvorD:Raw_Trout",
            "melvorD:Raw_Salmon",
            "melvorD:Raw_Lobster",
            "melvorD:Raw_Swordfish",
            "melvorD:Raw_Crab",
            "melvorD:Raw_Shark",
            "melvorD:Raw_Cave_Fish",
            "melvorD:Raw_Manta_Ray",
            "melvorD:Raw_Whale",
            "melvorD:Burnt_Shrimp",
            "melvorD:Burnt_Sardine",
            "melvorD:Burnt_Herring",
            "melvorD:Burnt_Trout",
            "melvorD:Burnt_Salmon",
            "melvorD:Burnt_Lobster",
            "melvorD:Burnt_Swordfish",
            "melvorD:Burnt_Crab",
            "melvorD:Burnt_Shark",
            "melvorD:Burnt_Cave_Fish",
            "melvorD:Burnt_Manta_Ray",
            "melvorD:Burnt_Whale",
            "melvorD:Copper_Ore",
            "melvorD:Tin_Ore",
            "melvorD:Iron_Ore",
            "melvorD:Coal_Ore",
            "melvorD:Silver_Ore",
            "melvorD:Gold_Ore",
            "melvorD:Mithril_Ore",
            "melvorD:Adamantite_Ore",
            "melvorD:Runite_Ore",
            "melvorD:Dragonite_Ore",
            "melvorD:Bronze_Bar",
            "melvorD:Iron_Bar",
            "melvorD:Steel_Bar",
            "melvorD:Gold_Bar",
            "melvorD:Mithril_Bar",
            "melvorD:Adamantite_Bar",
            "melvorD:Runite_Bar",
            "melvorD:Dragonite_Bar",
            "melvorD:Topaz",
            "melvorD:Sapphire",
            "melvorD:Ruby",
            "melvorD:Emerald",
            "melvorD:Diamond",
            "melvorD:Silver_Bar",
            "melvorD:Potato_Seed",
            "melvorD:Onion_Seed",
            "melvorD:Cabbage_Seed",
            "melvorD:Tomato_Seed",
            "melvorD:Sweetcorn_Seed",
            "melvorD:Strawberry_Seed",
            "melvorD:Watermelon_Seed",
            "melvorD:Snape_Grass_Seed",
            "melvorD:Oak_Tree_Seed",
            "melvorD:Willow_Tree_Seed",
            "melvorD:Maple_Tree_Seed",
            "melvorD:Yew_Tree_Seed",
            "melvorD:Magic_Tree_Seed",
            "melvorD:Bronze_Arrowtips",
            "melvorD:Iron_Arrowtips",
            "melvorD:Steel_Arrowtips",
            "melvorD:Mithril_Arrowtips",
            "melvorD:Adamant_Arrowtips",
            "melvorD:Rune_Arrowtips",
            "melvorD:Dragon_Arrowtips",
            "melvorD:Headless_Arrows",
            "melvorD:Feathers",
            "melvorD:Bowstring",
            "melvorD:Leather",
            "melvorD:Green_Dragonhide",
            "melvorD:Blue_Dragonhide",
            "melvorD:Red_Dragonhide",
            "melvorD:Black_Dragonhide",
            "melvorD:Rune_Essence",
            "melvorD:Carrot_Seeds",
            "melvorD:Garum_Herb",
            "melvorD:Sourweed_Herb",
            "melvorD:Mantalyme_Herb",
            "melvorD:Lemontyle_Herb",
            "melvorD:Oxilyme_Herb",
            "melvorD:Garum_Seed",
            "melvorD:Sourweed_Seed",
            "melvorD:Mantalyme_Seed",
            "melvorD:Lemontyle_Seed",
            "melvorD:Oxilyme_Seed",
            "melvorD:Signet_Ring_Half_A",
            "melvorD:Signet_Ring_Half_B",
            "melvorD:Old_Boot",
            "melvorD:Old_Hat",
            "melvorD:Seaweed",
            "melvorD:Rusty_Key",
            "melvorD:Shell",
            "melvorD:Rope",
            "melvorD:Glass_Bottle",
            "melvorD:Rubber_Ducky",
            "melvorD:Raw_Blowfish",
            "melvorD:Raw_Poison_Fish",
            "melvorD:Leaping_Trout",
            "melvorD:Leaping_Salmon",
            "melvorD:Leaping_Broad_Fish",
            "melvorD:Raw_Anglerfish",
            "melvorD:Raw_Fanfish",
            "melvorD:Raw_Seahorse",
            "melvorD:Raw_Carp",
            "melvorD:Burnt_Anglerfish",
            "melvorD:Burnt_Fanfish",
            "melvorD:Burnt_Seahorse",
            "melvorD:Burnt_Carp",
            "melvorD:Lemon",
            "melvorD:Lemons",
            "melvorD:Headless_Bolts",
            "melvorD:Bronze_Crossbow_Head",
            "melvorD:Iron_Crossbow_Head",
            "melvorD:Steel_Crossbow_Head",
            "melvorD:Mithril_Crossbow_Head",
            "melvorD:Adamant_Crossbow_Head",
            "melvorD:Rune_Crossbow_Head",
            "melvorD:Dragon_Crossbow_Head",
            "melvorD:Bronze_Javelin_Heads",
            "melvorD:Iron_Javelin_Heads",
            "melvorD:Steel_Javelin_Heads",
            "melvorD:Mithril_Javelin_Heads",
            "melvorD:Adamant_Javelin_Heads",
            "melvorD:Rune_Javelin_Heads",
            "melvorD:Dragon_Javelin_Heads",
            "melvorD:Eight",
            "melvorD:Circlet_of_Rhaelyx",
            "melvorD:Jewel_of_Rhaelyx",
            "melvorD:Charge_Stone_of_Rhaelyx",
            "melvorD:Mysterious_Stone",
            "melvorD:Event_Clue_1",
            "melvorD:Event_Clue_2",
            "melvorD:Event_Clue_3",
            "melvorD:Event_Clue_4",
            "melvorD:Cake_Base",
            "melvorD:Candle",
            "melvorD:Magical_Icing",
            "melvorD:Magical_Flavouring",
            "melvorD:Birthday_Token",
            "melvorD:Christmas_Cracker",
            "melvorD:Easter_Egg",
            "melvorD:Red_Herring",
            "melvorD:Bag_of_Flour",
            "melvorD:Raw_Beef",
            "melvorD:Raw_Chicken",
            "melvorD:Cherry_Seeds",
            "melvorD:Cheese",
            "melvorD:Cream",
            "melvorD:Natures_Call_Staff_Top",
            "melvorD:Event_Token",
            "melvorD:Christmas_Scarf",
            "melvorD:Locked_Chest_Key",
            "melvorD:Event_Token_Christmas2021",
            "melvorF:Arrow_Shafts",
            "melvorF:Normal_Shortbow_U",
            "melvorF:Oak_Shortbow_U",
            "melvorF:Willow_Shortbow_U",
            "melvorF:Maple_Shortbow_U",
            "melvorF:Yew_Shortbow_U",
            "melvorF:Magic_Shortbow_U",
            "melvorF:Normal_Longbow_U",
            "melvorF:Oak_Longbow_U",
            "melvorF:Willow_Longbow_U",
            "melvorF:Maple_Longbow_U",
            "melvorF:Yew_Longbow_U",
            "melvorF:Magic_Longbow_U",
            "melvorF:Redwood_Shortbow_U",
            "melvorF:Redwood_Longbow_U",
            "melvorF:Bobbys_Pocket",
            "melvorF:Eyeball",
            "melvorF:Dragon_Claw_Fragment",
            "melvorF:Ancient_Claw_Fragment",
            "melvorF:Poraxx_Herb",
            "melvorF:Pigtayle_Herb",
            "melvorF:Barrentoe_Herb",
            "melvorF:Poraxx_Seed",
            "melvorF:Pigtayle_Seed",
            "melvorF:Barrentoe_Seed",
            "melvorF:Large_Horn",
            "melvorF:Elder_Dragonhide",
            "melvorF:Air_Shard",
            "melvorF:Water_Shard",
            "melvorF:Earth_Shard",
            "melvorF:Fire_Shard",
            "melvorF:Slayer_Crossbow_Head",
            "melvorF:Tidal_Edge_Fragment",
            "melvorF:Ocean_Song_Fragment",
            "melvorF:Shockwave_Fragment",
            "melvorF:Infernal_Core",
            "melvorF:Slayer_Upgrade_Kit_Strong",
            "melvorF:Slayer_Upgrade_Kit_Elite",
            "melvorF:Slayer_Upgrade_Kit_Master",
            "melvorF:Summoning_Shard_Red",
            "melvorF:Summoning_Shard_Green",
            "melvorF:Summoning_Shard_Blue",
            "melvorF:Summoning_Shard_Silver",
            "melvorF:Summoning_Shard_Gold",
            "melvorF:Summoning_Shard_Black",
            "melvorF:Abnormal_Log",
            "melvorF:Marksmans_Sigil",
            "melvorF:Basic_Bag",
            "melvorF:Shipwheel",
            "melvorF:Giant_Club",
            "melvorF:Knights_Sigil",
            "melvorF:Wizards_Sigil",
            "melvorF:Antique_Vase",
            "melvorF:Jadestone",
            "melvorF:Apple_Tree_Seeds",
            "melvorF:Goo",
            "melvorF:Wildflower",
            "melvorF:Natures_Call_Staff_Bottom",
            "melvorF:Fine_Poison_Powder",
            "melvorF:Poison_Scales",
            "melvorF:Miolite_Spore",
            "melvorF:Poison_Essence",
            "melvorF:Worm_Spike",
            "melvorF:Burning_Essence",
            "melvorF:Cursed_Hands",
            "melvorF:Stinging_Essence",
            "melvorF:Tough_Shell",
            "melvorF:Undead_Essence",
            "melvorF:Desecrated_Bones",
            "melvorF:Stardust",
            "melvorF:Golden_Stardust",
            "melvorF:Small_Urn",
            "melvorF:Medium_Urn",
            "melvorF:Skilling_Outfit_Upgrade",
            "melvorF:Consumable_Enhancer",
            "melvorF:Birthday_Cake_2023_Piece_1",
            "melvorF:Birthday_Cake_2023_Piece_2",
            "melvorF:Birthday_Cake_2023_Piece_3",
            "melvorF:Birthday_Cake_2023_Piece_4",
            "melvorTotH:Spruce_Logs",
            "melvorTotH:Hornbeam_Logs",
            "melvorTotH:Grove_Logs",
            "melvorTotH:Linden_Logs",
            "melvorTotH:Elderwood_Logs",
            "melvorTotH:Red_Oak_Logs",
            "melvorTotH:Revenant_Logs",
            "melvorTotH:Mystic_Logs",
            "melvorTotH:Carrion_Logs",
            "melvorTotH:Corundumite_Ore",
            "melvorTotH:Pure_Essence",
            "melvorTotH:Iridium_Ore",
            "melvorTotH:Palladium_Ore",
            "melvorTotH:Augite_Ore",
            "melvorTotH:Onyx",
            "melvorTotH:Meteorite_Ore",
            "melvorTotH:Divinite_Ore",
            "melvorTotH:Oricha",
            "melvorTotH:Cerulean",
            "melvorTotH:Zephyte",
            "melvorTotH:Corundumite_Bar",
            "melvorTotH:Iridium_Bar",
            "melvorTotH:Palladium_Bar",
            "melvorTotH:Augite_Bar",
            "melvorTotH:Meteorite_Bar",
            "melvorTotH:Divinite_Bar",
            "melvorTotH:Corundum_Arrowtips",
            "melvorTotH:Corundum_Javelin_Heads",
            "melvorTotH:Corundum_Crossbow_Head",
            "melvorTotH:Augite_Arrowtips",
            "melvorTotH:Augite_Javelin_Heads",
            "melvorTotH:Augite_Crossbow_Head",
            "melvorTotH:Meteorite_Javelin_Heads",
            "melvorTotH:Meteorite_Crossbow_Head",
            "melvorTotH:Divine_Arrowtips",
            "melvorTotH:Divine_Javelin_Heads",
            "melvorTotH:Divine_Crossbow_Head",
            "melvorTotH:Woodcutting_Ring_Fragment",
            "melvorTotH:Woodcutting_Amulet_Fragment",
            "melvorTotH:Raw_Lava_Fish",
            "melvorTotH:Raw_Spike_Fish",
            "melvorTotH:Raw_Rockfish",
            "melvorTotH:Raw_Blue_Crab",
            "melvorTotH:Raw_Magma_Fish",
            "melvorTotH:Raw_Large_Blowfish",
            "melvorTotH:Raw_Static_Jellyfish",
            "melvorTotH:Raw_Frost_Crab",
            "melvorTotH:Raw_Magma_Eel",
            "melvorTotH:Raw_Frozen_Manta_Ray",
            "melvorTotH:Raw_Ghost_Fish",
            "melvorTotH:Raw_Mystic_Seahorse",
            "melvorTotH:Raw_Terrorfish",
            "melvorTotH:Raw_Mystic_Shark",
            "melvorTotH:Pumpkin_Seeds",
            "melvorTotH:Chilli_Seeds",
            "melvorTotH:Mushroom_Spores",
            "melvorTotH:Starfruit_Seeds",
            "melvorTotH:Snowcress_Seeds",
            "melvorTotH:Snowcress_Herb",
            "melvorTotH:Bitterlyme_Seeds",
            "melvorTotH:Bitterlyme_Herb",
            "melvorTotH:Moonwort_Seeds",
            "melvorTotH:Moonwort_Herb",
            "melvorTotH:Wurmtayle_Seeds",
            "melvorTotH:Wurmtayle_Herb",
            "melvorTotH:Banana_Tree_Seeds",
            "melvorTotH:Grove_Tree_Seeds",
            "melvorTotH:Elderwood_Tree_Seeds",
            "melvorTotH:Carrion_Tree_Seeds",
            "melvorTotH:Elderwood_Shortbow_U",
            "melvorTotH:Elderwood_Longbow_U",
            "melvorTotH:Revenant_Shortbow_U",
            "melvorTotH:Revenant_Longbow_U",
            "melvorTotH:Carrion_Shortbow_U",
            "melvorTotH:Carrion_Longbow_U",
            "melvorTotH:Large_Urn",
            "melvorTotH:Carrion_Bark",
            "melvorTotH:Runestone",
            "melvorTotH:Perfect_Sight_Legs_Material",
            "melvorTotH:Bundled_Protection_Body_Material",
            "melvorTotH:Jungle_Spores",
            "melvorTotH:Weakness_Exploiter_Cape_Material",
            "melvorTotH:Thorned_Power_Core",
            "melvorTotH:Burning_Protection_Material",
            "melvorTotH:Ward_of_Flame_Material",
            "melvorTotH:Frost_Walker_Boots_Material",
            "melvorTotH:Freezing_Touch_Material",
            "melvorTotH:Spectral_Ice_Sword_Shard",
            "melvorTotH:Leviathan_Shield_Material",
            "melvorTotH:Torrential_Blast_Crossbow_Shard",
            "melvorTotH:Spider_Queen_Eggs",
            "melvorTotH:Ectoplasm",
            "melvorTotH:Feather_Storm_Crossbow_Shard",
            "melvorTotH:Agile_Wings_Rapier_Shard",
            "melvorTotH:Slicing_Maelstrom_Wand_Shard",
            "melvorTotH:Slayer_Upgrade_Kit_Legendary",
            "melvorTotH:Slayer_Upgrade_Kit_Mythical",
            "melvorTotH:Labyrinth_Clue_1",
            "melvorTotH:Labyrinth_Clue_2",
            "melvorTotH:Labyrinth_Clue_3",
            "melvorTotH:Labyrinth_Clue_4",
            "melvorTotH:Labyrinth_Clue_5",
            "melvorTotH:Charcoal",
            "melvorTotH:Decaying_Stem",
            "melvorTotH:Meteorite_Dust",
            "melvorTotH:Lemonade_Empty",
            "melvorTotH:Lemonade_Very_empty",
            "melvorTotH:Lemonade_Still_very_empty",
            "melvorTotH:Lemonade_Not_as_empty_as_before",
            "melvorTotH:Lemonade_Not_much",
            "melvorTotH:Lemonade_Has_a_bit_now",
            "melvorTotH:Lemonade_A_little_bit_more_now",
            "melvorTotH:Lemonade_Half_full",
            "melvorTotH:Lemonade_Just_over_half_full",
            "melvorTotH:Lemonade_Maybe_this_is_half_full",
            "melvorTotH:Lemonade_Nope_this_is_half_full_now",
            "melvorTotH:Lemonade_Wow_this_is_slow",
            "melvorTotH:Lemonade_Just_fill_it_up_already",
            "melvorTotH:Lemonade_Still_not_full",
            "melvorTotH:Lemonade_Again_still_not_full",
            "melvorTotH:Lemonade_Less_than_before_because_you_drank_some",
            "melvorTotH:Lemonade_Back_to_where_we_were_before",
            "melvorTotH:Lemonade_Almost_full",
            "melvorTotH:Lemonade_Still_almost_full",
            "melvorTotH:Lemonade_How_full_is_it_supposed_to_be",
            "melvorTotH:Lemonade_Wait_this_might_be_half_full_now",
            "melvorTotH:Lemonade_Haha_just_joking_hurry_up",
            "melvorTotH:Lemonade_Okay_this_looks_pretty_full_now",
            "melvorTotH:Lemonade_Now",
            "melvorTotH:Lemonade_What_about_now",
            "melvorTotH:Lemonade_YAY_ITS_FINALLY_FULL",
            "melvorTotH:Lemonade_Oh_still_not_full",
            "melvorTotH:Lemonade_Wait_for_it",
            "melvorTotH:Lemonade_Wait_for_it2",
            "melvorTotH:Golden_Key",
            "melvorAoD:Imbued_Bronze_Bar",
            "melvorAoD:Imbued_Iron_Bar",
            "melvorAoD:Imbued_Steel_Bar",
            "melvorAoD:Imbued_Mithril_Bar",
            "melvorAoD:Imbued_Adamantite_Bar",
            "melvorAoD:Imbued_Runite_Bar",
            "melvorAoD:Imbued_Dragonite_Bar",
            "melvorAoD:Paper",
            "melvorAoD:Treasure_Map",
            "melvorAoD:Special_Key",
            "melvorAoD:Golden_Golbin_Statue",
            "melvorAoD:Old_Darksteel_Plating",
            "melvorAoD:Old_Aranite_Plating",
            "melvorAoD:Old_Relic_Plating",
            "melvorAoD:Magic_Anvil",
            "melvorAoD:Boat_Figurehead",
            "melvorAoD:Whetstone_Fragment",
            "melvorAoD:Aranite_Arrowtips",
            "melvorAoD:Darksteel_Arrowtips",
            "melvorAoD:Decorative_Fabric",
            "melvorAoD:Old_Dreamcatcher",
            "melvorAoD:Old_Music_Box",
            "melvorAoD:Wooden_Cart",
            "melvorAoD:Ancient_Wine_Casket",
            "melvorAoD:Giant_Clay_Pot",
            "melvorAoD:Amphora",
            "melvorAoD:City_Map",
            "melvorAoD:Ancient_Woven_Bags",
            "melvorAoD:Ruined_Woven_Bags",
            "melvorAoD:Ancient_Silk",
            "melvorAoD:Golden_Silk",
            "melvorAoD:Old_Silver_Coin",
            "melvorAoD:Old_Gold_Coin",
            "melvorAoD:Old_Jeweled_Necklace",
            "melvorAoD:Pristine_Jeweled_Necklace",
            "melvorAoD:Ancient_Wall_Chart",
            "melvorAoD:Dark_Altar",
            "melvorAoD:Candles",
            "melvorAoD:Candelabra",
            "melvorAoD:Golden_idol",
            "melvorAoD:Stone_statue",
            "melvorAoD:Old_Music_Manuscript",
            "melvorAoD:Navigation_Chart",
            "melvorAoD:Island_Map",
            "melvorAoD:Statue_of_Prosperity",
            "melvorAoD:Gold_Brazier",
            "melvorAoD:Ritual_Bowl",
            "melvorAoD:Ancient_Brush",
            "melvorAoD:Aranite_Brush",
            "melvorAoD:Relic_Brush",
            "melvorAoD:Ancient_Stone_Tablet",
            "melvorAoD:Old_Metal_Plaque",
            "melvorAoD:Chipped_Marble",
            "melvorAoD:Large_Stone",
            "melvorAoD:Large_Marble",
            "melvorAoD:Broken_Oil_Lamp",
            "melvorAoD:Broken_Quiver",
            "melvorAoD:Old_Burnt_Offerings",
            "melvorAoD:Broken_Down_Ballista",
            "melvorAoD:Colourful_Vase",
            "melvorAoD:Golden_Leaf",
            "melvorAoD:Leather_Belt",
            "melvorAoD:Torn_Map",
            "melvorAoD:Secret_Coffer",
            "melvorAoD:Jug_of_Beer",
            "melvorAoD:Cult_Flyer",
            "melvorAoD:Aranite_Trowel",
            "melvorAoD:Ancient_Trowel",
            "melvorAoD:Relic_Trowel",
            "melvorAoD:Ancient_Sieve",
            "melvorAoD:Aranite_Sieve",
            "melvorAoD:Relic_Sieve",
            "melvorAoD:Aranite_Shovel",
            "melvorAoD:Ancient_Shovel",
            "melvorAoD:Relic_Shovel",
            "melvorAoD:Shipment_Map",
            "melvorAoD:Wooden_Sign",
            "melvorAoD:Darksteel_Ore",
            "melvorAoD:Darksteel_Bar",
            "melvorAoD:Aranite_Ore",
            "melvorAoD:Aranite_Bar",
            "melvorAoD:Rock_Carving",
            "melvorAoD:Large_Organ",
            "melvorAoD:Ancient_Fossil",
            "melvorAoD:Large_Fossil",
            "melvorAoD:Coral",
            "melvorAoD:Rusted_Ring",
            "melvorAoD:Stained_Glass",
            "melvorAoD:Bell",
            "melvorAoD:Charged_Topaz_Shard",
            "melvorAoD:Charged_Sapphire_Shard",
            "melvorAoD:Charged_Ruby_Shard",
            "melvorAoD:Charged_Emerald_Shard",
            "melvorAoD:Charged_Diamond_Shard",
            "melvorAoD:Charged_Jadestone_Shard",
            "melvorAoD:Totem_Pole",
            "melvorAoD:Cursed_Golden_Disc",
            "melvorAoD:Old_Temple_Map",
            "melvorAoD:Lost_Cursed_Text",
            "melvorAoD:Skull",
            "melvorAoD:Cursed_Charm",
            "melvorAoD:Broken_Door",
            "melvorAoD:Dusty_Book_of_Knowledge",
            "melvorAoD:Rotten_Fish",
            "melvorAoD:Broken_Golden_Harp",
            "melvorAoD:Old_Tower_Bell",
            "melvorAoD:Old_Cooking_Pot",
            "melvorAoD:Old_Route_Chart",
            "melvorAoD:Old_Vase",
            "melvorAoD:Silver_Goblet",
            "melvorAoD:Old_Plant_Pot",
            "melvorAoD:Old_Gold_Bars",
            "melvorAoD:Noble_Jeweled_Necklace",
            "melvorAoD:Kingdom_Painting",
            "melvorAoD:Insignia",
            "melvorAoD:Kingdom_Banners",
            "melvorAoD:Candle_Lamp",
            "melvorAoD:Chess_Piece",
            "melvorAoD:Hunting_Trophy",
            "melvorAoD:Golbin_Portrait",
            "melvorAoD:Lockbox_Key",
            "melvorAoD:Miniature_Toy_Horse",
            "melvorAoD:Silver_Spoon",
            "melvorAoD:Large_Anchor",
            "melvorAoD:Broken_Odd_Weapon",
            "melvorAoD:Bundle_of_Rope",
            "melvorAoD:Blue_Jewel",
            "melvorAoD:Bottle_of_Rum",
            "melvorAoD:Shackles",
            "melvorAoD:Pirate_Doubloons",
            "melvorAoD:Misty_Jewel",
            "melvorAoD:Silver_Statue",
            "melvorAoD:Silver_Armband",
            "melvorAoD:Large_Shell",
            "melvorAoD:Mosaic",
            "melvorAoD:Merman_Pendant_Piece_1",
            "melvorAoD:Merman_Pendant_Piece_2",
            "melvorAoD:Different_Shell",
            "melvorAoD:Pearl",
            "melvorAoD:Old_Anvil",
            "melvorAoD:Flint",
            "melvorAoD:Crumbled_Artefact",
            "melvorAoD:Large_Wooden_Plank",
            "melvorAoD:Broken_Ship_Wood",
            "melvorAoD:Broken_Stone_Shard",
            "melvorAoD:Old_Cell_Key",
            "melvorAoD:Torn_Fishing_Net",
            "melvorAoD:Horseshoe",
            "melvorAoD:Crystal_Ball",
            "melvorAoD:Nails",
            "melvorAoD:Large_Woven_Rug",
            "melvorAoD:Large_Silver_Plate",
            "melvorAoD:Kelp",
            "melvorAoD:Silver_Stone_Brick",
            "melvorAoD:Broken_Pickaxe",
            "melvorAoD:Crystalized_Mithril_Fragment",
            "melvorAoD:Crystalized_Dragon_Fragment",
            "melvorAoD:Broken_Brush",
            "melvorAoD:Broken_Jug",
            "melvorAoD:Broken_Trowel",
            "melvorAoD:Broken_Shovel",
            "melvorAoD:Old_Bucket",
            "melvorAoD:Marble",
            "melvorAoD:Pebble",
            "melvorAoD:Incense",
            "melvorAoD:Broken_Gem",
            "melvorAoD:Pirate_Flag",
            "melvorAoD:Old_Wooden_Bowl",
            "melvorAoD:Rusted_Bronze_Coin",
            "melvorAoD:Destroyed_Cannon",
            "melvorAoD:Torn_Scrolls",
            "melvorAoD:Gold_Speck",
            "melvorAoD:Diamond_Speck",
            "melvorAoD:Old_Cauldron",
            "melvorAoD:Old_Headless_Arrows",
            "melvorAoD:Tough_Quill_Feather",
            "melvorAoD:Barrier_Dust",
            "melvorAoD:Barrier_Pure_Shard",
            "melvorAoD:Barrier_Exalted_Shard",
            "melvorAoD:Barrier_God_Shard",
            "melvorAoD:Crystal",
            "melvorAoD:Pure_Crystal",
            "melvorAoD:Refined_Crystal",
            "melvorAoD:Refined_Pure_Crystal",
            "melvorAoD:Crystal_Arrowtips",
            "melvorAoD:Crystal_Crossbow_Head",
            "melvorAoD:Crystal_Javelin_Heads",
            "melvorAoD:Pure_Crystal_Arrowtips",
            "melvorAoD:Pure_Crystal_Crossbow_Head",
            "melvorAoD:Pure_Crystal_Javelin_Heads",
            "melvorAoD:Crystal_Binding_Dust",
            "melvorAoD:Pure_Crystal_Binding_Dust",
            "melvorAoD:Unholy_Logs",
            "melvorAoD:Cursed_Logs",
            "melvorAoD:Unholy_Longbow_U",
            "melvorAoD:Beaded_Necklace",
            "melvorAoD:Ancient_Wildberry_Seeds",
            "melvorAoD:Ancient_Corn_Seeds",
            "melvorAoD:Ancient_Carrot_Seeds",
            "melvorAoD:Shatter_Stone",
            "melvorAoD:Devouring_Shard",
            "melvorAoD:Imbued_Leather",
            "melvorAoD:Imbued_Green_Dragonhide",
            "melvorAoD:Imbued_Blue_Dragonhide",
            "melvorAoD:Imbued_Red_Dragonhide",
            "melvorAoD:Imbued_Black_Dragonhide",
            "melvorAoD:Imbued_Elder_Dragonhide",
            "melvorAoD:Raw_Mackerel",
            "melvorAoD:Raw_Halibut",
            "melvorAoD:Raw_Tilapia",
            "melvorAoD:Enhanced_Spyglass_Lens",
            "melvorAoD:Museum_Token",
            "melvorItA:Abyssium_Bar",
            "melvorItA:Abyssium_Arrowtips",
            "melvorItA:Abyssium_Javelin_Heads",
            "melvorItA:Abyssium_Crossbow_Head",
            "melvorItA:Abyssal_Headless_Bolts",
            "melvorItA:Brumite_Bar",
            "melvorItA:Brumite_Arrowtips",
            "melvorItA:Brumite_Javelin_Heads",
            "melvorItA:Brumite_Crossbow_Head",
            "melvorItA:Gloomite_Bar",
            "melvorItA:Gloomite_Arrowtips",
            "melvorItA:Gloomite_Javelin_Heads",
            "melvorItA:Gloomite_Crossbow_Head",
            "melvorItA:Witherite_Bar",
            "melvorItA:Witherite_Arrowtips",
            "melvorItA:Witherite_Javelin_Heads",
            "melvorItA:Witherite_Crossbow_Head",
            "melvorItA:Netherite_Bar",
            "melvorItA:Netherite_Arrowtips",
            "melvorItA:Netherite_Javelin_Heads",
            "melvorItA:Netherite_Crossbow_Head",
            "melvorItA:Raw_Crimson_Biter",
            "melvorItA:Raw_Crimson_Bream",
            "melvorItA:Raw_Veilhunter",
            "melvorItA:Raw_Mistjaw",
            "melvorItA:Raw_Steamswimmer",
            "melvorItA:Raw_Toxic_Pufferfish",
            "melvorItA:Raw_Toxic_Crab",
            "melvorItA:Raw_Toxic_Octopus",
            "melvorItA:Raw_Stoneskin_Pike",
            "melvorItA:Raw_Stoneskin_Garfish",
            "melvorItA:Raw_Whisperfish",
            "melvorItA:Raw_Murmurclaw",
            "melvorItA:Raw_Hushscale",
            "melvorItA:Raw_Depthlurker",
            "melvorItA:Raw_Deep_Squid",
            "melvorItA:Raw_Voidfish",
            "melvorItA:Raw_Void_Jelly",
            "melvorItA:Raw_Void_Ray",
            "melvorItA:Abyssia_Logs",
            "melvorItA:Twisted_Logs",
            "melvorItA:Brumia_Logs",
            "melvorItA:Plagueroot_Logs",
            "melvorItA:Gloomia_Logs",
            "melvorItA:Shadebark_Logs",
            "melvorItA:Withia_Logs",
            "melvorItA:Crumbletain_Logs",
            "melvorItA:Nethia_Logs",
            "melvorItA:Whisperwillow_Logs",
            "melvorItA:Eldria_Logs",
            "melvorItA:Voidia_Logs",
            "melvorItA:Abyssal_Stardust",
            "melvorItA:Abyssal_Stone",
            "melvorItA:Abyssal_Bark",
            "melvorItA:Abyssal_Quartz",
            "melvorItA:Twisted_Thorn",
            "melvorItA:Twisted_Tendril",
            "melvorItA:Twisted_Root",
            "melvorItA:Gloom_Resin",
            "melvorItA:Gloom_Amber",
            "melvorItA:Gloom_Vine",
            "melvorItA:Shadow_Quartz",
            "melvorItA:Shadow_Shard",
            "melvorItA:Shadow_Scale",
            "melvorItA:Obsidian_Tendril",
            "melvorItA:Obsidian_Bark",
            "melvorItA:Obsidian_Thorn",
            "melvorItA:Voidfire_Ash",
            "melvorItA:Voidfire_Resin",
            "melvorItA:Voidfire_Quartz",
            "melvorItA:Abyssal_Essence",
            "melvorItA:Abyssium_Ore",
            "melvorItA:Brumite_Ore",
            "melvorItA:Gloomite_Ore",
            "melvorItA:Witherite_Ore",
            "melvorItA:Netherite_Ore",
            "melvorItA:Nightopal",
            "melvorItA:Shadowpearl",
            "melvorItA:Moonstone",
            "melvorItA:Voidheart",
            "melvorItA:Abycite_Fragment",
            "melvorItA:Azurian_Fragment",
            "melvorItA:Mysticite_Fragment",
            "melvorItA:Obsidian_Fragment",
            "melvorItA:Echocite_Fragment",
            "melvorItA:Abyssal_Feathers",
            "melvorItA:Abyssal_Leather",
            "melvorItA:Abyssal_Batwing",
            "melvorItA:Abyssal_Potato_Seed",
            "melvorItA:Abyssal_Pumpkin_Seed",
            "melvorItA:Gloompepper_Seed",
            "melvorItA:Shadenut_Seed",
            "melvorItA:Withermelon_Seed",
            "melvorItA:Whisperradish_Seed",
            "melvorItA:Eldraberry_Seed",
            "melvorItA:Gloomsprout_Seed",
            "melvorItA:Nightgleam_Seed",
            "melvorItA:Blightblossom_Seed",
            "melvorItA:Shadefrond_Seed",
            "melvorItA:Fearmallow_Seed",
            "melvorItA:Witherlyme_Seed",
            "melvorItA:Whispertallow_Seed",
            "melvorItA:Echosnap_Seed",
            "melvorItA:Eldraroot_Seed",
            "melvorItA:Voidbloom_Seed",
            "melvorItA:Abyssia_Tree_Seed",
            "melvorItA:Brumia_Tree_Seed",
            "melvorItA:Gloomia_Tree_Seed",
            "melvorItA:Withia_Tree_Seed",
            "melvorItA:Nethia_Tree_Seed",
            "melvorItA:Eldria_Tree_Seed",
            "melvorItA:Gloomsprout_Herb",
            "melvorItA:Nightgleam_Herb",
            "melvorItA:Blightblossom_Herb",
            "melvorItA:Shadefrond_Herb",
            "melvorItA:Fearmallow_Herb",
            "melvorItA:Witherlyme_Herb",
            "melvorItA:Whispertallow_Herb",
            "melvorItA:Echosnap_Herb",
            "melvorItA:Eldraroot_Herb",
            "melvorItA:Voidbloom_Herb",
            "melvorItA:Lacerating_Dagger_Shard",
            "melvorItA:Lacerating_Shortbow_Fragment",
            "melvorItA:Lacerating_Staff_Fragment",
            "melvorItA:Blighted_Roots_Seed",
            "melvorItA:Blighted_Roots",
            "melvorItA:Essence_Seed",
            "melvorItA:Abyssal_Vein_Seed",
            "melvorItA:Twisted_Vein_Seed",
            "melvorItA:Gloom_Vein_Seed",
            "melvorItA:Shadow_Vein_Seed",
            "melvorItA:Obsidian_Vein_Seed",
            "melvorItA:Voidfire_Vein_Seed",
            "melvorItA:Toxic_Spores",
            "melvorItA:Shade_Key",
            "melvorItA:Shade_Essence",
            "melvorItA:Locked_Maze_Chest",
            "melvorItA:Withering_Bones",
            "melvorItA:Withering_Stones",
            "melvorItA:Silent_Essence",
            "melvorItA:Old_Chains",
            "melvorItA:Broken_Skeleton_Key",
            "melvorItA:Attention_Stone",
            "melvorItA:Force_Stone",
            "melvorItA:Existence_Stone",
            "melvorItA:Sky_Stone",
            "melvorItA:Present_Stone",
            "melvorItA:Void_Lens",
            "melvorItA:Void_Essence",
            "melvorItA:Abyssium_Decorative_Shield",
            "melvorItA:Brumite_Decorative_Shield",
            "melvorItA:Gloomite_Decorative_Shield",
            "melvorItA:Blight_Powder",
            "melvorItA:Petrified_Eye",
            "melvorItA:Silentsnap_Scales",
            "melvorItA:Eldritch_Tendril",
            "melvorItA:Corrupted_Ring_Fragment_1",
            "melvorItA:Corrupted_Ring_Fragment_2",
            "melvorItA:Corrupted_Ring_Fragment_3",
            "melvorItA:Corrupted_Ring_Fragment_4",
            "melvorItA:Blighted_Carapace",
            "melvorItA:Toxic_Blast_Crossbow_Fragment",
            "melvorItA:Toxic_Fumes_Wand_Fragment",
            "melvorItA:Silent_Surge_Crossblade_Shard",
            "melvorItA:Silent_Tangle_Wand_Shard",
            "melvorItA:Stinging_Silence_Crossbow_Shard",
            "melvorItA:Void_Vortex_Whip_Shard",
            "melvorItA:Voidfire_Cascade_Wand_Shard",
            "melvorItA:Voidburst_Barrage_Crossbow_Shard",
            "melvorItA:Fractured_Dust",
            "melvorItA:Razor_Talon",
            "melvorItA:Abyssal_Slayer_Upgrade_Kit",
            "melvorItA:Summoning_Shard_Crimson",
            "melvorItA:Summoning_Shard_Azure",
            "melvorItA:Azurian_Bar",
            "melvorItA:Obsidian_Bar",
            "melvorItA:Obzurian_Bar",
            "melvorItA:Woeful_Core",
            "melvorItA:Abyssal_Core",
            "melvorItA:Blighted_Core",
            "melvorItA:Fear_Core",
            "melvorItA:Powerful_Abyssal_Core",
            "melvorItA:Eldritch_Core",
            "melvorItA:Voidborne_Shard",
            "melvorItA:Withered_Ash",
            "melvorItA:Bobs_Lost_Rake_Handle",
            "melvorItA:Bobs_Lost_Rake_Head",
            "melvorItA:Eternal_Stardust",
            "melvorItA:Stellarite_Fragment",
            "melvorItA:Riftstone",
            "melvorItA:Eventide_Ore",
            "melvorItA:Eventide_Bar",
            "melvorItA:Stellarite_Bar",
            "melvorItA:Riftwood_Logs",
            "melvorItA:Starwood_Logs",
            "melvorItA:Eternal_Ash",
            "melvorItA:Riftwood_Bow_U",
            "melvorItA:Eternal_Rune",
            "melvorItA:Starwood_Bow_U",
            "melvorItA:Eternity_Seed",
            "melvorItA:Eternity_Leaf",
            "melvorItA:Raw_Celestial_Ray",
            "melvorItA:Charge_Stone_Melee",
            "melvorItA:Charge_Stone_Ranged",
            "melvorItA:Charge_Stone_Magic"
          ]
        }
      ]
    },
    "EquipmentItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/WeaponItemID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Empty_Equipment",
            "melvorD:Bronze_Helmet",
            "melvorD:Bronze_Boots",
            "melvorD:Bronze_Platelegs",
            "melvorD:Bronze_Platebody",
            "melvorD:Iron_Helmet",
            "melvorD:Iron_Boots",
            "melvorD:Iron_Platelegs",
            "melvorD:Iron_Platebody",
            "melvorD:Steel_Helmet",
            "melvorD:Steel_Boots",
            "melvorD:Steel_Platelegs",
            "melvorD:Steel_Platebody",
            "melvorD:Mithril_Helmet",
            "melvorD:Mithril_Boots",
            "melvorD:Mithril_Platelegs",
            "melvorD:Mithril_Platebody",
            "melvorD:Adamant_Helmet",
            "melvorD:Adamant_Boots",
            "melvorD:Adamant_Platelegs",
            "melvorD:Adamant_Platebody",
            "melvorD:Rune_Helmet",
            "melvorD:Rune_Boots",
            "melvorD:Rune_Platelegs",
            "melvorD:Rune_Platebody",
            "melvorD:Dragon_Helmet",
            "melvorD:Dragon_Boots",
            "melvorD:Dragon_Platelegs",
            "melvorD:Dragon_Platebody",
            "melvorD:Bronze_Shield",
            "melvorD:Iron_Shield",
            "melvorD:Steel_Shield",
            "melvorD:Mithril_Shield",
            "melvorD:Adamant_Shield",
            "melvorD:Rune_Shield",
            "melvorD:Dragon_Shield",
            "melvorD:Black_Helmet",
            "melvorD:Black_Boots",
            "melvorD:Black_Platelegs",
            "melvorD:Black_Platebody",
            "melvorD:Black_Shield",
            "melvorD:Bronze_Helmet_T_S",
            "melvorD:Bronze_Boots_T_S",
            "melvorD:Bronze_Platelegs_T_S",
            "melvorD:Bronze_Platebody_T_S",
            "melvorD:Bronze_Shield_T_S",
            "melvorD:Iron_Helmet_T_S",
            "melvorD:Iron_Boots_T_S",
            "melvorD:Iron_Platelegs_T_S",
            "melvorD:Iron_Platebody_T_S",
            "melvorD:Iron_Shield_T_S",
            "melvorD:Steel_Helmet_T_S",
            "melvorD:Steel_Boots_T_S",
            "melvorD:Steel_Platelegs_T_S",
            "melvorD:Steel_Platebody_T_S",
            "melvorD:Steel_Shield_T_S",
            "melvorD:Black_Helmet_T_S",
            "melvorD:Black_Boots_T_S",
            "melvorD:Black_Platelegs_T_S",
            "melvorD:Black_Platebody_T_S",
            "melvorD:Black_Shield_T_S",
            "melvorD:Mithril_Helmet_T_S",
            "melvorD:Mithril_Boots_T_S",
            "melvorD:Mithril_Platelegs_T_S",
            "melvorD:Mithril_Platebody_T_S",
            "melvorD:Mithril_Shield_T_S",
            "melvorD:Adamant_Helmet_T_S",
            "melvorD:Adamant_Boots_T_S",
            "melvorD:Adamant_Platelegs_T_S",
            "melvorD:Adamant_Platebody_T_S",
            "melvorD:Adamant_Shield_T_S",
            "melvorD:Rune_Helmet_T_S",
            "melvorD:Rune_Boots_T_S",
            "melvorD:Rune_Platelegs_T_S",
            "melvorD:Rune_Platebody_T_S",
            "melvorD:Rune_Shield_T_S",
            "melvorD:Dragon_Helmet_T_S",
            "melvorD:Dragon_Boots_T_S",
            "melvorD:Dragon_Platelegs_T_S",
            "melvorD:Dragon_Platebody_T_S",
            "melvorD:Dragon_Shield_T_S",
            "melvorD:Bronze_Helmet_T_G",
            "melvorD:Bronze_Boots_T_G",
            "melvorD:Bronze_Platelegs_T_G",
            "melvorD:Bronze_Platebody_T_G",
            "melvorD:Bronze_Shield_T_G",
            "melvorD:Iron_Helmet_T_G",
            "melvorD:Iron_Boots_T_G",
            "melvorD:Iron_Platelegs_T_G",
            "melvorD:Iron_Platebody_T_G",
            "melvorD:Iron_Shield_T_G",
            "melvorD:Steel_Helmet_T_G",
            "melvorD:Steel_Boots_T_G",
            "melvorD:Steel_Platelegs_T_G",
            "melvorD:Steel_Platebody_T_G",
            "melvorD:Steel_Shield_T_G",
            "melvorD:Black_Helmet_T_G",
            "melvorD:Black_Boots_T_G",
            "melvorD:Black_Platelegs_T_G",
            "melvorD:Black_Platebody_T_G",
            "melvorD:Black_Shield_T_G",
            "melvorD:Mithril_Helmet_T_G",
            "melvorD:Mithril_Boots_T_G",
            "melvorD:Mithril_Platelegs_T_G",
            "melvorD:Mithril_Platebody_T_G",
            "melvorD:Mithril_Shield_T_G",
            "melvorD:Adamant_Helmet_T_G",
            "melvorD:Adamant_Boots_T_G",
            "melvorD:Adamant_Platelegs_T_G",
            "melvorD:Adamant_Platebody_T_G",
            "melvorD:Adamant_Shield_T_G",
            "melvorD:Rune_Helmet_T_G",
            "melvorD:Rune_Boots_T_G",
            "melvorD:Rune_Platelegs_T_G",
            "melvorD:Rune_Platebody_T_G",
            "melvorD:Rune_Shield_T_G",
            "melvorD:Dragon_Helmet_T_G",
            "melvorD:Dragon_Boots_T_G",
            "melvorD:Dragon_Platelegs_T_G",
            "melvorD:Dragon_Platebody_T_G",
            "melvorD:Dragon_Shield_T_G",
            "melvorD:Amulet_of_Fishing",
            "melvorD:Amulet_of_Strength",
            "melvorD:Amulet_of_Accuracy",
            "melvorD:Amulet_of_Defence",
            "melvorD:Amulet_of_Glory",
            "melvorD:Bronze_Arrows",
            "melvorD:Iron_Arrows",
            "melvorD:Steel_Arrows",
            "melvorD:Mithril_Arrows",
            "melvorD:Adamant_Arrows",
            "melvorD:Rune_Arrows",
            "melvorD:Dragon_Arrows",
            "melvorD:Leather_Boots",
            "melvorD:Leather_Cowl",
            "melvorD:Leather_Vambraces",
            "melvorD:Leather_Chaps",
            "melvorD:Green_Dhide_Vambraces",
            "melvorD:Green_Dhide_Chaps",
            "melvorD:Green_Dhide_Body",
            "melvorD:Blue_Dhide_Vambraces",
            "melvorD:Blue_Dhide_Chaps",
            "melvorD:Blue_Dhide_Body",
            "melvorD:Red_Dhide_Vambraces",
            "melvorD:Red_Dhide_Chaps",
            "melvorD:Red_Dhide_Body",
            "melvorD:Black_Dhide_Vambraces",
            "melvorD:Black_Dhide_Chaps",
            "melvorD:Black_Dhide_Body",
            "melvorD:Gold_Topaz_Ring",
            "melvorD:Cooking_Gloves",
            "melvorD:Mining_Gloves",
            "melvorD:Smithing_Gloves",
            "melvorD:Gem_Gloves",
            "melvorD:Cape_Of_Prat",
            "melvorD:Obsidian_Cape",
            "melvorD:Elite_Amulet_of_Strength",
            "melvorD:Elite_Amulet_of_Accuracy",
            "melvorD:Elite_Amulet_of_Defence",
            "melvorD:Elite_Amulet_of_Glory",
            "melvorD:Ancient_Helmet",
            "melvorD:Ancient_Platelegs",
            "melvorD:Ancient_Platebody",
            "melvorD:Ancient_Shield",
            "melvorD:Ancient_Helmet_T_S",
            "melvorD:Ancient_Platelegs_T_S",
            "melvorD:Ancient_Platebody_T_S",
            "melvorD:Ancient_Shield_T_S",
            "melvorD:Ancient_Helmet_T_G",
            "melvorD:Ancient_Platelegs_T_G",
            "melvorD:Ancient_Platebody_T_G",
            "melvorD:Ancient_Shield_T_G",
            "melvorD:Fire_Cape",
            "melvorD:Rangers_Hat",
            "melvorD:Ranger_Boots",
            "melvorD:Amulet_of_Fury",
            "melvorD:Amulet_of_Torture",
            "melvorD:Amulet_of_Ranged",
            "melvorD:Ice_Helmet",
            "melvorD:Ice_Boots",
            "melvorD:Ice_Platelegs",
            "melvorD:Ice_Platebody",
            "melvorD:Ice_Shield",
            "melvorD:Ice_Arrows",
            "melvorD:Amulet_of_Looting",
            "melvorD:Green_Wizard_Hat",
            "melvorD:Green_Wizard_Robes",
            "melvorD:Green_Wizard_Bottoms",
            "melvorD:Green_Wizard_Boots",
            "melvorD:Blue_Wizard_Hat",
            "melvorD:Blue_Wizard_Robes",
            "melvorD:Blue_Wizard_Bottoms",
            "melvorD:Blue_Wizard_Boots",
            "melvorD:Red_Wizard_Hat",
            "melvorD:Red_Wizard_Robes",
            "melvorD:Red_Wizard_Bottoms",
            "melvorD:Red_Wizard_Boots",
            "melvorD:Black_Wizard_Hat",
            "melvorD:Black_Wizard_Robes",
            "melvorD:Black_Wizard_Bottoms",
            "melvorD:Black_Wizard_Boots",
            "melvorD:Ancient_Wizard_Hat",
            "melvorD:Ancient_Wizard_Robes",
            "melvorD:Ancient_Wizard_Bottoms",
            "melvorD:Ancient_Wizard_Boots",
            "melvorD:Attack_Skillcape",
            "melvorD:Cooking_Skillcape",
            "melvorD:Defence_Skillcape",
            "melvorD:Farming_Skillcape",
            "melvorD:Firemaking_Skillcape",
            "melvorD:Fishing_Skillcape",
            "melvorD:Hitpoints_Skillcape",
            "melvorD:Mining_Skillcape",
            "melvorD:Smithing_Skillcape",
            "melvorD:Strength_Skillcape",
            "melvorD:Woodcutting_Skillcape",
            "melvorD:Bronze_Gloves",
            "melvorD:Iron_Gloves",
            "melvorD:Steel_Gloves",
            "melvorD:Mithril_Gloves",
            "melvorD:Adamant_Gloves",
            "melvorD:Rune_Gloves",
            "melvorD:Dragon_Gloves",
            "melvorD:Amulet_of_Calculated_Promotion",
            "melvorD:Aorpheats_Signet_Ring",
            "melvorD:Pirates_Lost_Ring",
            "melvorD:Barbarian_Gloves",
            "melvorD:Ancient_Ring_Of_Skills",
            "melvorD:Clue_Chasers_Insignia",
            "melvorD:Green_Dhide_Vambraces_U",
            "melvorD:Green_Dhide_Chaps_U",
            "melvorD:Green_Dhide_Body_U",
            "melvorD:Blue_Dhide_Vambraces_U",
            "melvorD:Blue_Dhide_Chaps_U",
            "melvorD:Blue_Dhide_Body_U",
            "melvorD:Red_Dhide_Vambraces_U",
            "melvorD:Red_Dhide_Chaps_U",
            "melvorD:Red_Dhide_Body_U",
            "melvorD:Black_Dhide_Vambraces_U",
            "melvorD:Black_Dhide_Chaps_U",
            "melvorD:Black_Dhide_Body_U",
            "melvorD:Elite_Amulet_of_Ranged",
            "melvorD:Amulet_of_Magic",
            "melvorD:Elite_Amulet_of_Magic",
            "melvorD:Bone_Necklace",
            "melvorD:Fury_of_the_Elemental_Zodiac",
            "melvorD:Red_Party_Hat",
            "melvorD:Dragonfire_Shield",
            "melvorD:Crown_of_Rhaelyx",
            "melvorD:Enchanted_Cape",
            "melvorD:Enchanted_Shield",
            "melvorD:Purple_Party_Hat",
            "melvorD:Ancient_Ring_Of_Mastery",
            "melvorD:Santa_Hat",
            "melvorD:Friendship_Bracelet",
            "melvorD:Christmas_Coal",
            "melvorD:Christmas_Sweater",
            "melvorD:Christmas_Wreath",
            "melvorD:Yellow_Party_Hat",
            "melvorD:Cool_Glasses",
            "melvorD:Enchanted_Topaz_Bolts",
            "melvorD:Enchanted_Sapphire_Bolts",
            "melvorD:Enchanted_Ruby_Bolts",
            "melvorD:Enchanted_Emerald_Bolts",
            "melvorD:Enchanted_Diamond_Bolts",
            "melvorD:Enchanted_Jadestone_Bolts",
            "melvorD:Poison_Ring",
            "melvorD:Burning_Ring",
            "melvorD:Frostburn_Ring",
            "melvorD:Poison_Arrows",
            "melvorD:Fire_Arrows",
            "melvorD:Frost_Arrows",
            "melvorD:Ring_Of_Balance",
            "melvorD:Flying_Cape",
            "melvorD:Amulet_Of_Healing",
            "melvorD:One_Layer_Shield",
            "melvorD:Warding_Shield",
            "melvorD:Ultimate_Speed_Boots",
            "melvorD:I_Cant_See_Helmet",
            "melvorD:Almighty_Ring",
            "melvorD:Punching_Bag_Platebody",
            "melvorD:Precision_Gloves",
            "melvorD:Heavy_Gloves",
            "melvorD:Ultimate_Slapping_Gloves",
            "melvorD:Amulet_Of_Burning_Leech",
            "melvorD:Amulet_Of_Poison_Leech",
            "melvorD:Magic_Crit_Amulet",
            "melvorD:Melee_Crit_Amulet",
            "melvorD:Bloodthirst_Amulet",
            "melvorD:Dragon_Head_Helmet",
            "melvorD:Stonewall_Shield",
            "melvorD:Book_of_Eli",
            "melvorD:Burning_Amulet_of_Gold",
            "melvorD:Burning_Amulet_of_Stardust",
            "melvorD:Burning_Amulet_of_Ash",
            "melvorD:Burning_Amulet_of_XP",
            "melvorD:DEBUG_ITEM",
            "melvorF:Leather_Gloves",
            "melvorF:Leather_Body",
            "melvorF:Silver_Topaz_Ring",
            "melvorF:Silver_Sapphire_Ring",
            "melvorF:Silver_Ruby_Ring",
            "melvorF:Silver_Emerald_Ring",
            "melvorF:Silver_Diamond_Ring",
            "melvorF:Gold_Sapphire_Ring",
            "melvorF:Gold_Ruby_Ring",
            "melvorF:Gold_Emerald_Ring",
            "melvorF:Gold_Diamond_Ring",
            "melvorF:Silver_Topaz_Necklace",
            "melvorF:Silver_Sapphire_Necklace",
            "melvorF:Silver_Ruby_Necklace",
            "melvorF:Silver_Emerald_Necklace",
            "melvorF:Silver_Diamond_Necklace",
            "melvorF:Gold_Topaz_Necklace",
            "melvorF:Gold_Sapphire_Necklace",
            "melvorF:Gold_Ruby_Necklace",
            "melvorF:Gold_Emerald_Necklace",
            "melvorF:Gold_Diamond_Necklace",
            "melvorF:Thieving_Gloves",
            "melvorF:Crafting_Skillcape",
            "melvorF:Fletching_Skillcape",
            "melvorF:Magic_Skillcape",
            "melvorF:Ranged_Skillcape",
            "melvorF:Runecrafting_Skillcape",
            "melvorF:Thieving_Skillcape",
            "melvorF:Prayer_Skillcape",
            "melvorF:Slayer_Helmet_Basic",
            "melvorF:Slayer_Platebody_Basic",
            "melvorF:Slayer_Helmet_Strong",
            "melvorF:Slayer_Platebody_Strong",
            "melvorF:Slayer_Helmet_Elite",
            "melvorF:Slayer_Platebody_Elite",
            "melvorF:Mirror_Shield",
            "melvorF:Cape_of_Arrow_Preservation",
            "melvorF:Magical_Ring",
            "melvorF:Ancient_Arrow",
            "melvorF:Slayer_Skillcape",
            "melvorF:Slayer_Wizard_Hat_Basic",
            "melvorF:Slayer_Wizard_Robes_Basic",
            "melvorF:Slayer_Wizard_Hat_Strong",
            "melvorF:Slayer_Wizard_Robes_Strong",
            "melvorF:Slayer_Wizard_Hat_Elite",
            "melvorF:Slayer_Wizard_Robes_Elite",
            "melvorF:Slayer_Cowl_Basic",
            "melvorF:Slayer_Leather_Body_Basic",
            "melvorF:Slayer_Cowl_Strong",
            "melvorF:Slayer_Leather_Body_Strong",
            "melvorF:Slayer_Cowl_Elite",
            "melvorF:Slayer_Leather_Body_Elite",
            "melvorF:Hard_Leather_Gloves",
            "melvorF:Hard_Leather_Boots",
            "melvorF:Hard_Leather_Cowl",
            "melvorF:Hard_Leather_Vambraces",
            "melvorF:Hard_Leather_Body",
            "melvorF:Hard_Leather_Chaps",
            "melvorF:Chapeau_Noir",
            "melvorF:Herblore_Skillcape",
            "melvorF:Topaz_Bolts",
            "melvorF:Sapphire_Bolts",
            "melvorF:Ruby_Bolts",
            "melvorF:Emerald_Bolts",
            "melvorF:Diamond_Bolts",
            "melvorF:Aeris_God_Helmet",
            "melvorF:Aeris_God_Platelegs",
            "melvorF:Aeris_God_Platebody",
            "melvorF:Aeris_God_Boots",
            "melvorF:Aeris_God_Gloves",
            "melvorF:Glacia_God_Helmet",
            "melvorF:Glacia_God_Platelegs",
            "melvorF:Glacia_God_Platebody",
            "melvorF:Glacia_God_Boots",
            "melvorF:Glacia_God_Gloves",
            "melvorF:Ancient_Dhide_Vambraces",
            "melvorF:Ancient_Dhide_Chaps",
            "melvorF:Ancient_Dhide_Body",
            "melvorF:Ancient_Dhide_Vambraces_U",
            "melvorF:Ancient_Dhide_Chaps_U",
            "melvorF:Ancient_Dhide_Body_U",
            "melvorF:Green_Dhide_Shield",
            "melvorF:Blue_Dhide_Shield",
            "melvorF:Red_Dhide_Shield",
            "melvorF:Black_Dhide_Shield",
            "melvorF:Ancient_Dhide_Shield",
            "melvorF:Green_Dhide_Shield_U",
            "melvorF:Blue_Dhide_Shield_U",
            "melvorF:Red_Dhide_Shield_U",
            "melvorF:Black_Dhide_Shield_U",
            "melvorF:Ancient_Dhide_Shield_U",
            "melvorF:Terran_God_Helmet",
            "melvorF:Terran_God_Platelegs",
            "melvorF:Terran_God_Platebody",
            "melvorF:Terran_God_Boots",
            "melvorF:Terran_God_Gloves",
            "melvorF:Ragnar_God_Helmet",
            "melvorF:Ragnar_God_Platelegs",
            "melvorF:Ragnar_God_Platebody",
            "melvorF:Ragnar_God_Boots",
            "melvorF:Ragnar_God_Gloves",
            "melvorF:Deadeye_Ring",
            "melvorF:Deadeye_Amulet",
            "melvorF:Warlock_Ring",
            "melvorF:Warlock_Amulet",
            "melvorF:Guardian_Ring",
            "melvorF:Guardian_Amulet",
            "melvorF:Fighter_Ring",
            "melvorF:Fighter_Amulet",
            "melvorF:Max_Skillcape",
            "melvorF:Earth_Layered_Shield",
            "melvorF:Skull_Cape",
            "melvorF:Air_Acolyte_Wizard_Hat",
            "melvorF:Air_Acolyte_Wizard_Robes",
            "melvorF:Air_Acolyte_Wizard_Bottoms",
            "melvorF:Air_Acolyte_Wizard_Boots",
            "melvorF:Water_Acolyte_Wizard_Hat",
            "melvorF:Water_Acolyte_Wizard_Robes",
            "melvorF:Water_Acolyte_Wizard_Bottoms",
            "melvorF:Water_Acolyte_Wizard_Boots",
            "melvorF:Earth_Acolyte_Wizard_Hat",
            "melvorF:Earth_Acolyte_Wizard_Robes",
            "melvorF:Earth_Acolyte_Wizard_Bottoms",
            "melvorF:Earth_Acolyte_Wizard_Boots",
            "melvorF:Fire_Acolyte_Wizard_Hat",
            "melvorF:Fire_Acolyte_Wizard_Robes",
            "melvorF:Fire_Acolyte_Wizard_Bottoms",
            "melvorF:Fire_Acolyte_Wizard_Boots",
            "melvorF:Air_Adept_Wizard_Hat",
            "melvorF:Air_Adept_Wizard_Robes",
            "melvorF:Air_Adept_Wizard_Bottoms",
            "melvorF:Air_Adept_Wizard_Boots",
            "melvorF:Water_Adept_Wizard_Hat",
            "melvorF:Water_Adept_Wizard_Robes",
            "melvorF:Water_Adept_Wizard_Bottoms",
            "melvorF:Water_Adept_Wizard_Boots",
            "melvorF:Earth_Adept_Wizard_Hat",
            "melvorF:Earth_Adept_Wizard_Robes",
            "melvorF:Earth_Adept_Wizard_Bottoms",
            "melvorF:Earth_Adept_Wizard_Boots",
            "melvorF:Fire_Adept_Wizard_Hat",
            "melvorF:Fire_Adept_Wizard_Robes",
            "melvorF:Fire_Adept_Wizard_Bottoms",
            "melvorF:Fire_Adept_Wizard_Boots",
            "melvorF:Air_Expert_Wizard_Hat",
            "melvorF:Air_Expert_Wizard_Robes",
            "melvorF:Air_Expert_Wizard_Bottoms",
            "melvorF:Air_Expert_Wizard_Boots",
            "melvorF:Water_Expert_Wizard_Hat",
            "melvorF:Water_Expert_Wizard_Robes",
            "melvorF:Water_Expert_Wizard_Bottoms",
            "melvorF:Water_Expert_Wizard_Boots",
            "melvorF:Earth_Expert_Wizard_Hat",
            "melvorF:Earth_Expert_Wizard_Robes",
            "melvorF:Earth_Expert_Wizard_Bottoms",
            "melvorF:Earth_Expert_Wizard_Boots",
            "melvorF:Fire_Expert_Wizard_Hat",
            "melvorF:Fire_Expert_Wizard_Robes",
            "melvorF:Fire_Expert_Wizard_Bottoms",
            "melvorF:Fire_Expert_Wizard_Boots",
            "melvorF:Cape_of_Completion",
            "melvorF:Desert_Hat",
            "melvorF:Blazing_Lantern",
            "melvorF:Climbing_Boots",
            "melvorF:Miolite_Helmet",
            "melvorF:Miolite_Boots",
            "melvorF:Miolite_Platelegs",
            "melvorF:Miolite_Platebody",
            "melvorF:Miolite_Shield",
            "melvorF:Gloves_of_Silence",
            "melvorF:Shaman_Ring",
            "melvorF:Book_of_Occults",
            "melvorF:Elementalist_Gloves",
            "melvorF:Sand_Treaders",
            "melvorF:Desert_Wrappings",
            "melvorF:Sandstorm_Ring",
            "melvorF:Elder_Crown",
            "melvorF:Tormented_Ring",
            "melvorF:Recoil_Shield",
            "melvorF:Wasteful_Ring",
            "melvorF:Jadestone_Bolts",
            "melvorF:Paladin_Gloves",
            "melvorF:Priest_Hat",
            "melvorF:Infernal_Cape",
            "melvorF:Slayer_Helmet_Master",
            "melvorF:Slayer_Platebody_Master",
            "melvorF:Slayer_Cowl_Master",
            "melvorF:Slayer_Leather_Body_Master",
            "melvorF:Slayer_Wizard_Hat_Master",
            "melvorF:Slayer_Wizard_Robes_Master",
            "melvorF:Green_Party_Hat",
            "melvorF:Hunters_Ring",
            "melvorF:Agility_Skillcape",
            "melvorF:Summoning_Familiar_Golbin_Thief",
            "melvorF:Summoning_Familiar_Occultist",
            "melvorF:Summoning_Familiar_Wolf",
            "melvorF:Summoning_Familiar_Ent",
            "melvorF:Summoning_Familiar_Mole",
            "melvorF:Summoning_Familiar_Octopus",
            "melvorF:Summoning_Familiar_Minotaur",
            "melvorF:Summoning_Familiar_Centaur",
            "melvorF:Summoning_Familiar_Witch",
            "melvorF:Summoning_Familiar_Pig",
            "melvorF:Summoning_Familiar_Crow",
            "melvorF:Summoning_Familiar_Leprechaun",
            "melvorF:Summoning_Familiar_Cyclops",
            "melvorF:Summoning_Familiar_Yak",
            "melvorF:Summoning_Familiar_Unicorn",
            "melvorF:Summoning_Familiar_Dragon",
            "melvorF:Summoning_Familiar_Monkey",
            "melvorF:Summoning_Familiar_Salamander",
            "melvorF:Summoning_Familiar_Bear",
            "melvorF:Summoning_Familiar_Devil",
            "melvorF:Summoning_Skillcape",
            "melvorF:Necromancer_Hat",
            "melvorF:Necromancer_Robes",
            "melvorF:Necromancer_Bottoms",
            "melvorF:Necromancer_Boots",
            "melvorF:Boots_Of_Stealth",
            "melvorF:Jeweled_Necklace",
            "melvorF:Thievers_Cape",
            "melvorF:Cooking_Apron",
            "melvorF:Fishing_Hook",
            "melvorF:Knights_Cape",
            "melvorF:Whetstone",
            "melvorF:Wizards_Scroll",
            "melvorF:Prayer_Scroll",
            "melvorF:Ring_Of_Wealth",
            "melvorF:Absorbing_Shield",
            "melvorF:Chefs_Hat",
            "melvorF:Training_Shield",
            "melvorF:Knights_Defender",
            "melvorF:Cave_Giant_Boots",
            "melvorF:Bobs_Gloves",
            "melvorF:Golbin_Mask",
            "melvorF:Fine_Coinpurse",
            "melvorF:Lumberjacks_Top",
            "melvorF:Miners_Helmet",
            "melvorF:Sailors_Top",
            "melvorF:Jesters_Hat",
            "melvorF:Gold_Crested_Shield",
            "melvorF:Book_Of_Scholars",
            "melvorF:Amulet_Of_Incantation",
            "melvorF:Thiefs_Moneysack",
            "melvorF:Seed_Pouch",
            "melvorF:Runecrafting_Pouch",
            "melvorF:Alchemists_Bag",
            "melvorF:Shield_Of_Melee_Power",
            "melvorF:Shield_Of_Ranged_Power",
            "melvorF:Shield_Of_Magic_Power",
            "melvorF:Ring_Of_Power",
            "melvorF:Throwing_Power_Gloves",
            "melvorF:Natures_Blessing_Ring",
            "melvorF:Scaled_Shield",
            "melvorF:Poison_Virulence_Ring",
            "melvorF:Poison_Virulence_Gloves",
            "melvorF:Burning_Madness_Ring",
            "melvorF:Burning_Madness_Gloves",
            "melvorF:Spiked_Shell_Ring",
            "melvorF:Spiked_Shell_Gloves",
            "melvorF:Relentless_Fury_Ring",
            "melvorF:Relentless_Fury_Gloves",
            "melvorF:Ring_Of_Blade_Echoes",
            "melvorF:Ring_Of_Barrage",
            "melvorF:Ring_Of_Spirit_Power",
            "melvorF:Astrology_Skillcape",
            "melvorF:Woodcutters_Hat",
            "melvorF:Woodcutters_Body",
            "melvorF:Woodcutters_Leggings",
            "melvorF:Woodcutters_Boots",
            "melvorF:Burning_Mans_Hat",
            "melvorF:Burning_Mans_Body",
            "melvorF:Burning_Mans_Leggings",
            "melvorF:Burning_Mans_Boots",
            "melvorF:Fishermans_Hat",
            "melvorF:Fishermans_Body",
            "melvorF:Fishermans_Leggings",
            "melvorF:Fishermans_Boots",
            "melvorF:Miners_Hat",
            "melvorF:Miners_Body",
            "melvorF:Miners_Leggings",
            "melvorF:Miners_Boots",
            "melvorF:Blacksmiths_Hat",
            "melvorF:Blacksmiths_Body",
            "melvorF:Blacksmiths_Leggings",
            "melvorF:Blacksmiths_Boots",
            "melvorF:Fletchers_Hat",
            "melvorF:Fletchers_Body",
            "melvorF:Fletchers_Leggings",
            "melvorF:Fletchers_Boots",
            "melvorF:Crafters_Hat",
            "melvorF:Crafters_Body",
            "melvorF:Crafters_Leggings",
            "melvorF:Crafters_Boots",
            "melvorF:Runecrafters_Hat",
            "melvorF:Runecrafters_Body",
            "melvorF:Runecrafters_Leggings",
            "melvorF:Runecrafters_Boots",
            "melvorF:Potion_Makers_Hat",
            "melvorF:Potion_Makers_Body",
            "melvorF:Potion_Makers_Leggings",
            "melvorF:Potion_Makers_Boots",
            "melvorF:Performance_Enhancing_Hat",
            "melvorF:Performance_Enhancing_Body",
            "melvorF:Performance_Enhancing_Leggings",
            "melvorF:Performance_Enhancing_Boots",
            "melvorF:Star_Gazing_Hat",
            "melvorF:Star_Gazing_Body",
            "melvorF:Star_Gazing_Leggings",
            "melvorF:Star_Gazing_Boots",
            "melvorF:Skillers_Hat",
            "melvorF:Skillers_Body",
            "melvorF:Skillers_Leggings",
            "melvorF:Skillers_Boots",
            "melvorF:Warm_Beanie",
            "melvorF:Pirate_Captain_Hat",
            "melvorF:Prats_Hat",
            "melvorF:Top_Hat",
            "melvorF:Hunters_Hat",
            "melvorF:Clown_Hat",
            "melvorF:Township_Skillcape",
            "melvorF:Fishing_Scroll_Of_XP",
            "melvorF:Woodcutting_Scroll_Of_XP",
            "melvorF:Mining_Scroll_Of_XP",
            "melvorF:Runecrafting_Scroll_Of_XP",
            "melvorF:Herblore_Scroll_Of_XP",
            "melvorF:Crafting_Scroll_Of_XP",
            "melvorF:Scroll_Of_Essence",
            "melvorF:Looter_Pouch",
            "melvorF:Monster_Hunter_Scroll",
            "melvorF:Thiefs_Moneysack_II",
            "melvorF:Wizards_Scroll_II",
            "melvorF:Seed_Pouch_II",
            "melvorF:Alchemists_Bag_II",
            "melvorF:Mastery_Magnet",
            "melvorF:Burning_Scroll_Of_Gold",
            "melvorF:Burning_Scroll_Of_Gold_II",
            "melvorF:Burning_Scroll_Of_Stardust",
            "melvorF:Burning_Scroll_Of_Stardust_II",
            "melvorF:Burning_Scroll_Of_Ash",
            "melvorF:Burning_Scroll_Of_Ash_II",
            "melvorF:Quick_Burner",
            "melvorF:Quick_Burner_II",
            "melvorF:Golden_Star",
            "melvorF:Golden_Star_II",
            "melvorF:Additional_Cooker_Scroll",
            "melvorF:Gem_Finder_Scroll",
            "melvorF:Bad_Cooker_Scroll",
            "melvorF:Gem_Preserver_Scroll",
            "melvorF:Staff_Maker_Scroll",
            "melvorF:Flaming_Axe_Scroll",
            "melvorF:Leather_Crafter_Scroll",
            "melvorF:Herblore_Preservation_Scroll",
            "melvorF:Slayer_Harvest_Scroll",
            "melvorF:Slayer_Binding_Scroll",
            "melvorF:Ranged_Hinder_Scroll",
            "melvorF:Magic_Hinder_Scroll",
            "melvorF:Melee_Hinder_Scroll",
            "melvorF:Dragonbreath_Deterer",
            "melvorF:Slayer_Deterer",
            "melvorF:Fervor_Scroll",
            "melvorF:Birthday_Balloon",
            "melvorF:Orange_Party_Hat",
            "melvorF:Party_Bow_Tie",
            "melvorF:Party_Shoes",
            "melvorF:Undead_Enhancement_1",
            "melvorF:Undead_Enhancement_2",
            "melvorF:Undead_Enhancement_3",
            "melvorF:Undead_Enhancement_1_Augmented",
            "melvorF:Undead_Enhancement_2_Augmented",
            "melvorF:Undead_Enhancement_3_Augmented",
            "melvorF:Undead_Enhancement_Superior",
            "melvorF:Magic_Enhancement_1",
            "melvorF:Magic_Enhancement_2",
            "melvorF:Magic_Enhancement_3",
            "melvorF:Magic_Enhancement_1_Augmented",
            "melvorF:Magic_Enhancement_2_Augmented",
            "melvorF:Magic_Enhancement_3_Augmented",
            "melvorF:Magic_Enhancement_Superior",
            "melvorF:Dragon_Enhancement_1",
            "melvorF:Dragon_Enhancement_2",
            "melvorF:Dragon_Enhancement_3",
            "melvorF:Dragon_Enhancement_1_Augmented",
            "melvorF:Dragon_Enhancement_2_Augmented",
            "melvorF:Dragon_Enhancement_3_Augmented",
            "melvorF:Dragon_Enhancement_Superior",
            "melvorF:Gods_Enhancement_1",
            "melvorF:Gods_Enhancement_2",
            "melvorF:Gods_Enhancement_3",
            "melvorF:Gods_Enhancement_1_Augmented",
            "melvorF:Gods_Enhancement_2_Augmented",
            "melvorF:Gods_Enhancement_3_Augmented",
            "melvorF:Gods_Enhancement_Superior",
            "melvorTotH:Corundum_Helmet",
            "melvorTotH:Corundum_Boots",
            "melvorTotH:Corundum_Platelegs",
            "melvorTotH:Corundum_Platebody",
            "melvorTotH:Corundum_Shield",
            "melvorTotH:Corundum_Gloves",
            "melvorTotH:Augite_Helmet",
            "melvorTotH:Augite_Boots",
            "melvorTotH:Augite_Platelegs",
            "melvorTotH:Augite_Platebody",
            "melvorTotH:Augite_Shield",
            "melvorTotH:Augite_Gloves",
            "melvorTotH:Meteorite_Helmet",
            "melvorTotH:Meteorite_Platelegs",
            "melvorTotH:Meteorite_Platebody",
            "melvorTotH:Divine_Helmet",
            "melvorTotH:Divine_Boots",
            "melvorTotH:Divine_Platelegs",
            "melvorTotH:Divine_Platebody",
            "melvorTotH:Divine_Shield",
            "melvorTotH:Divine_Gloves",
            "melvorTotH:Corundum_Helmet_T_I",
            "melvorTotH:Corundum_Boots_T_I",
            "melvorTotH:Corundum_Platelegs_T_I",
            "melvorTotH:Corundum_Platebody_T_I",
            "melvorTotH:Corundum_Shield_T_I",
            "melvorTotH:Corundum_Helmet_T_P",
            "melvorTotH:Corundum_Boots_T_P",
            "melvorTotH:Corundum_Platelegs_T_P",
            "melvorTotH:Corundum_Platebody_T_P",
            "melvorTotH:Corundum_Shield_T_P",
            "melvorTotH:Augite_Helmet_T_I",
            "melvorTotH:Augite_Boots_T_I",
            "melvorTotH:Augite_Platelegs_T_I",
            "melvorTotH:Augite_Platebody_T_I",
            "melvorTotH:Augite_Shield_T_I",
            "melvorTotH:Augite_Helmet_T_P",
            "melvorTotH:Augite_Boots_T_P",
            "melvorTotH:Augite_Platelegs_T_P",
            "melvorTotH:Augite_Platebody_T_P",
            "melvorTotH:Augite_Shield_T_P",
            "melvorTotH:Divine_Helmet_T_I",
            "melvorTotH:Divine_Boots_T_I",
            "melvorTotH:Divine_Platelegs_T_I",
            "melvorTotH:Divine_Platebody_T_I",
            "melvorTotH:Divine_Shield_T_I",
            "melvorTotH:Divine_Helmet_T_P",
            "melvorTotH:Divine_Boots_T_P",
            "melvorTotH:Divine_Platelegs_T_P",
            "melvorTotH:Divine_Platebody_T_P",
            "melvorTotH:Divine_Shield_T_P",
            "melvorTotH:Meteorite_Woodcutting_Ring",
            "melvorTotH:Meteorite_Woodcutting_Amulet",
            "melvorTotH:Explorers_Map",
            "melvorTotH:Necromancers_Crown",
            "melvorTotH:Amulet_of_Prayers",
            "melvorTotH:Adventurers_Backpack",
            "melvorTotH:Hunters_Journal",
            "melvorTotH:Crown_of_Madremonte",
            "melvorTotH:Vampiric_Cloak",
            "melvorTotH:Corundum_Arrows",
            "melvorTotH:Augite_Arrows",
            "melvorTotH:Divine_Arrows",
            "melvorTotH:Ethereal_Arrows",
            "melvorTotH:Onyx_Bolts",
            "melvorTotH:Meteorite_Bolts",
            "melvorTotH:Decay_Bolts",
            "melvorTotH:Zephyte_Bolts",
            "melvorTotH:Elderwood_Vambraces",
            "melvorTotH:Elderwood_Vambraces_U",
            "melvorTotH:Elderwood_Chaps",
            "melvorTotH:Elderwood_Chaps_U",
            "melvorTotH:Elderwood_Shield",
            "melvorTotH:Elderwood_Shield_U",
            "melvorTotH:Elderwood_Body",
            "melvorTotH:Elderwood_Body_U",
            "melvorTotH:Revenant_Vambraces",
            "melvorTotH:Revenant_Vambraces_U",
            "melvorTotH:Revenant_Chaps",
            "melvorTotH:Revenant_Chaps_U",
            "melvorTotH:Revenant_Shield",
            "melvorTotH:Revenant_Shield_U",
            "melvorTotH:Revenant_Body",
            "melvorTotH:Revenant_Body_U",
            "melvorTotH:Carrion_Vambraces",
            "melvorTotH:Carrion_Vambraces_U",
            "melvorTotH:Carrion_Chaps",
            "melvorTotH:Carrion_Chaps_U",
            "melvorTotH:Carrion_Shield",
            "melvorTotH:Carrion_Shield_U",
            "melvorTotH:Carrion_Body",
            "melvorTotH:Carrion_Body_U",
            "melvorTotH:Iridium_Onyx_Ring",
            "melvorTotH:Palladium_Onyx_Ring",
            "melvorTotH:Iridium_Oricha_Ring",
            "melvorTotH:Palladium_Oricha_Ring",
            "melvorTotH:Iridium_Cerulean_Ring",
            "melvorTotH:Palladium_Cerulean_Ring",
            "melvorTotH:Iridium_Runestone_Ring",
            "melvorTotH:Palladium_Runestone_Ring",
            "melvorTotH:Iridium_Zephyte_Ring",
            "melvorTotH:Palladium_Zephyte_Ring",
            "melvorTotH:Meteorite_Warrior_Ring",
            "melvorTotH:Meteorite_Marksman_Ring",
            "melvorTotH:Iridium_Onyx_Necklace",
            "melvorTotH:Palladium_Onyx_Necklace",
            "melvorTotH:Iridium_Oricha_Necklace",
            "melvorTotH:Palladium_Oricha_Necklace",
            "melvorTotH:Iridium_Cerulean_Necklace",
            "melvorTotH:Palladium_Cerulean_Necklace",
            "melvorTotH:Iridium_Runestone_Necklace",
            "melvorTotH:Palladium_Runestone_Necklace",
            "melvorTotH:Iridium_Zephyte_Necklace",
            "melvorTotH:Palladium_Zephyte_Necklace",
            "melvorTotH:Artisan_Pouch",
            "melvorTotH:Kindling_Pouch",
            "melvorTotH:Stamina_Pouch",
            "melvorTotH:Spirit_Bag",
            "melvorTotH:Chefs_Bag",
            "melvorTotH:Summoners_Bag",
            "melvorTotH:Poison_Master_Wizard_Hat",
            "melvorTotH:Poison_Master_Wizard_Boots",
            "melvorTotH:Poison_Master_Wizard_Bottoms",
            "melvorTotH:Poison_Master_Wizard_Robes",
            "melvorTotH:Infernal_Master_Wizard_Hat",
            "melvorTotH:Infernal_Master_Wizard_Boots",
            "melvorTotH:Infernal_Master_Wizard_Bottoms",
            "melvorTotH:Infernal_Master_Wizard_Robes",
            "melvorTotH:Lightning_Master_Wizard_Hat",
            "melvorTotH:Lightning_Master_Wizard_Boots",
            "melvorTotH:Lightning_Master_Wizard_Bottoms",
            "melvorTotH:Lightning_Master_Wizard_Robes",
            "melvorTotH:Poison_Legendary_Wizard_Hat",
            "melvorTotH:Poison_Legendary_Wizard_Boots",
            "melvorTotH:Poison_Legendary_Wizard_Bottoms",
            "melvorTotH:Poison_Legendary_Wizard_Robes",
            "melvorTotH:Infernal_Legendary_Wizard_Hat",
            "melvorTotH:Infernal_Legendary_Wizard_Boots",
            "melvorTotH:Infernal_Legendary_Wizard_Bottoms",
            "melvorTotH:Infernal_Legendary_Wizard_Robes",
            "melvorTotH:Lightning_Legendary_Wizard_Hat",
            "melvorTotH:Lightning_Legendary_Wizard_Boots",
            "melvorTotH:Lightning_Legendary_Wizard_Bottoms",
            "melvorTotH:Lightning_Legendary_Wizard_Robes",
            "melvorTotH:Poison_Mythical_Wizard_Hat",
            "melvorTotH:Poison_Mythical_Wizard_Boots",
            "melvorTotH:Poison_Mythical_Wizard_Bottoms",
            "melvorTotH:Poison_Mythical_Wizard_Robes",
            "melvorTotH:Infernal_Mythical_Wizard_Hat",
            "melvorTotH:Infernal_Mythical_Wizard_Boots",
            "melvorTotH:Infernal_Mythical_Wizard_Bottoms",
            "melvorTotH:Infernal_Mythical_Wizard_Robes",
            "melvorTotH:Lightning_Mythical_Wizard_Hat",
            "melvorTotH:Lightning_Mythical_Wizard_Boots",
            "melvorTotH:Lightning_Mythical_Wizard_Bottoms",
            "melvorTotH:Lightning_Mythical_Wizard_Robes",
            "melvorTotH:Summoning_Familiar_Eagle",
            "melvorTotH:Summoning_Familiar_Owl",
            "melvorTotH:Summoning_Familiar_Beaver",
            "melvorTotH:Summoning_Familiar_Fox",
            "melvorTotH:Summoning_Familiar_Lightning_Spirit",
            "melvorTotH:Summoning_Familiar_Siren",
            "melvorTotH:Summoning_Familiar_Spider",
            "melvorTotH:Summoning_Familiar_Spectre",
            "melvorTotH:Weakness_Finder_Cape",
            "melvorTotH:Sharp_Fletcher_Gloves",
            "melvorTotH:Perfect_Sight_Legs",
            "melvorTotH:Bundled_Protection_Body",
            "melvorTotH:Poison_Lifesteal_Amulet",
            "melvorTotH:Weakness_Exploiter_Cape",
            "melvorTotH:Toxic_Maker_Gloves",
            "melvorTotH:Blacksmiths_Gloves",
            "melvorTotH:Burning_Embers_Book",
            "melvorTotH:Burning_Protection_Platelegs",
            "melvorTotH:Ward_of_Flame_Platebody",
            "melvorTotH:Blazing_Helmet",
            "melvorTotH:Frost_Walker_Boots",
            "melvorTotH:Cool_Winds_Gloves",
            "melvorTotH:Freezing_Touch_Body",
            "melvorTotH:Frostshield_Amulet",
            "melvorTotH:Lightning_Amulet",
            "melvorTotH:FrostSpark_Amulet",
            "melvorTotH:Lightning_Boots",
            "melvorTotH:Frostspark_Boots",
            "melvorTotH:Lightning_Aura_Helmet",
            "melvorTotH:Allure_Amulet",
            "melvorTotH:Bleed_Burner_Cape",
            "melvorTotH:Leviathan_Shield",
            "melvorTotH:Gauntlets_of_Rage",
            "melvorTotH:Ring_of_Curse_Protection",
            "melvorTotH:Mask_of_Madness",
            "melvorTotH:Mask_of_Torment",
            "melvorTotH:Mask_of_Despair",
            "melvorTotH:Voodoo_Trinket",
            "melvorTotH:Hood_of_Shade_Summon",
            "melvorTotH:Gloves_of_Greater_Shade_Summon",
            "melvorTotH:Ring_of_Phantom_Summon",
            "melvorTotH:Amulet_of_Curse_Totem_Summon",
            "melvorTotH:Summoning_Scrolls",
            "melvorTotH:Vorloran_Devastator_Gauntlets",
            "melvorTotH:Vorloran_Devastator_Boots",
            "melvorTotH:Vorloran_Devastator_Helmet",
            "melvorTotH:Vorloran_Devastator_Platelegs",
            "melvorTotH:Vorloran_Devastator_Platebody",
            "melvorTotH:Vorloran_Watcher_Gauntlets",
            "melvorTotH:Vorloran_Watcher_Boots",
            "melvorTotH:Vorloran_Watcher_Helmet",
            "melvorTotH:Vorloran_Watcher_Platelegs",
            "melvorTotH:Vorloran_Watcher_Platebody",
            "melvorTotH:Vorloran_Protector_Gauntlets",
            "melvorTotH:Vorloran_Protector_Boots",
            "melvorTotH:Vorloran_Protector_Helmet",
            "melvorTotH:Vorloran_Protector_Platelegs",
            "melvorTotH:Vorloran_Protector_Platebody",
            "melvorTotH:Slayer_Helmet_Legendary",
            "melvorTotH:Slayer_Platebody_Legendary",
            "melvorTotH:Slayer_Cowl_Legendary",
            "melvorTotH:Slayer_Leather_Body_Legendary",
            "melvorTotH:Slayer_Wizard_Hat_Legendary",
            "melvorTotH:Slayer_Wizard_Robes_Legendary",
            "melvorTotH:Slayer_Helmet_Mythical",
            "melvorTotH:Slayer_Platebody_Mythical",
            "melvorTotH:Slayer_Cowl_Mythical",
            "melvorTotH:Slayer_Leather_Body_Mythical",
            "melvorTotH:Slayer_Wizard_Hat_Mythical",
            "melvorTotH:Slayer_Wizard_Robes_Mythical",
            "melvorTotH:Slayer_Torch",
            "melvorTotH:Mystic_Lantern",
            "melvorTotH:Book_of_the_Ancients",
            "melvorTotH:Travellers_Compass",
            "melvorTotH:Blood_Ring",
            "melvorTotH:Portable_Rations",
            "melvorTotH:Mortar_and_Pestle",
            "melvorTotH:Blood_Vial",
            "melvorTotH:Masquerade_Mask",
            "melvorTotH:Superior_Agility_Skillcape",
            "melvorTotH:Superior_Astrology_Skillcape",
            "melvorTotH:Superior_Attack_Skillcape",
            "melvorTotH:Superior_Cooking_Skillcape",
            "melvorTotH:Superior_Crafting_Skillcape",
            "melvorTotH:Superior_Defence_Skillcape",
            "melvorTotH:Superior_Farming_Skillcape",
            "melvorTotH:Superior_Firemaking_Skillcape",
            "melvorTotH:Superior_Fishing_Skillcape",
            "melvorTotH:Superior_Fletching_Skillcape",
            "melvorTotH:Superior_Herblore_Skillcape",
            "melvorTotH:Superior_Hitpoints_Skillcape",
            "melvorTotH:Superior_Magic_Skillcape",
            "melvorTotH:Superior_Mining_Skillcape",
            "melvorTotH:Superior_Prayer_Skillcape",
            "melvorTotH:Superior_Ranged_Skillcape",
            "melvorTotH:Superior_Runecrafting_Skillcape",
            "melvorTotH:Superior_Slayer_Skillcape",
            "melvorTotH:Superior_Smithing_Skillcape",
            "melvorTotH:Superior_Strength_Skillcape",
            "melvorTotH:Superior_Summoning_Skillcape",
            "melvorTotH:Superior_Thieving_Skillcape",
            "melvorTotH:Superior_Township_Skillcape",
            "melvorTotH:Superior_Woodcutting_Skillcape",
            "melvorTotH:Superior_Max_Skillcape",
            "melvorTotH:Shadow_Cloak",
            "melvorTotH:Golden_Reel",
            "melvorTotH:Burning_Reel",
            "melvorTotH:Thieving_Shorts",
            "melvorTotH:Meteorite_Spellcaster_Ring",
            "melvorTotH:Superior_Cape_Of_Completion",
            "melvorTotH:Burning_Amulet_of_Charcoal",
            "melvorTotH:Explorers_Map_II",
            "melvorTotH:Portable_Rations_II",
            "melvorTotH:Blood_Vial_II",
            "melvorTotH:Kindling_Pouch_II",
            "melvorTotH:Artisan_Pouch_II",
            "melvorAoD:Reduced_Hitpoints_Gem",
            "melvorAoD:Doubling_Gem",
            "melvorAoD:Max_Hitpoints_Gem",
            "melvorAoD:Slayer_Gem",
            "melvorAoD:Dungeon_Gem",
            "melvorAoD:Combat_Gem",
            "melvorAoD:Combination_Gem",
            "melvorAoD:Large_Warhorn",
            "melvorAoD:Bulky_Gloves",
            "melvorAoD:Elusive_Boots",
            "melvorAoD:Ancient_Magic_Hammer",
            "melvorAoD:Ancient_Whetstone",
            "melvorAoD:Relic_Whetstone",
            "melvorAoD:Charged_Golden_Quiver",
            "melvorAoD:Charged_Ancient_Quiver",
            "melvorAoD:Charged_Relic_Quiver",
            "melvorAoD:Tiny_Spice_Jar",
            "melvorAoD:Magicburn_Shield",
            "melvorAoD:Blessed_Shield",
            "melvorAoD:Malevolent_Ward_Shield",
            "melvorAoD:Candelabra_Lit",
            "melvorAoD:Cursed_Arcana",
            "melvorAoD:Elemental_Scroll",
            "melvorAoD:Impenetrable_Idol",
            "melvorAoD:Decoy_Idol",
            "melvorAoD:Old_Crafting_Gloves",
            "melvorAoD:Blood_Chalice",
            "melvorAoD:Circlet_of_Pain",
            "melvorAoD:Golden_Wreath",
            "melvorAoD:Dividers",
            "melvorAoD:Old_Woodcutting_Gloves",
            "melvorAoD:Mining_Lantern",
            "melvorAoD:Grinding_Stone",
            "melvorAoD:Dirty_Mining_Boots",
            "melvorAoD:Cursed_Idol",
            "melvorAoD:Mask_of_Weakening",
            "melvorAoD:Mask_of_Confusion",
            "melvorAoD:Old_Summoning_Gloves",
            "melvorAoD:Old_Summoning_Amulet",
            "melvorAoD:Ring_of_Summoning",
            "melvorAoD:Bone_Ring",
            "melvorAoD:Old_Scripture",
            "melvorAoD:Aranite_Platebody",
            "melvorAoD:Kings_Crown",
            "melvorAoD:Peasant_Shirt",
            "melvorAoD:Candle_Lamp_Lit",
            "melvorAoD:Book_of_Prayers",
            "melvorAoD:Old_Pirate_Pants",
            "melvorAoD:Captains_Logbook",
            "melvorAoD:Ring_of_Deception",
            "melvorAoD:Ring_of_Faith",
            "melvorAoD:Sailors_Compass",
            "melvorAoD:Water_Shield",
            "melvorAoD:Ancient_Arcana",
            "melvorAoD:Water_Crown",
            "melvorAoD:Bottle_of_Mystic_Water",
            "melvorAoD:Power_Crystals",
            "melvorAoD:Shell_Amulet",
            "melvorAoD:Merman_Pendant",
            "melvorAoD:Darksteel_Shield",
            "melvorAoD:Aranite_Shield",
            "melvorAoD:Relic_Shield",
            "melvorAoD:Darksteel_Arrows",
            "melvorAoD:Aranite_Arrows",
            "melvorAoD:Topaz_Bolts_Enchanted",
            "melvorAoD:Ruby_Bolts_Enchanted",
            "melvorAoD:Sapphire_Bolts_Enchanted",
            "melvorAoD:Emerald_Bolts_Enchanted",
            "melvorAoD:Diamond_Bolts_Enchanted",
            "melvorAoD:Jadestone_Bolts_Enchanted",
            "melvorAoD:Topaz_Bolts_Arcane",
            "melvorAoD:Ruby_Bolts_Arcane",
            "melvorAoD:Sapphire_Bolts_Arcane",
            "melvorAoD:Emerald_Bolts_Arcane",
            "melvorAoD:Diamond_Bolts_Arcane",
            "melvorAoD:Jadestone_Bolts_Arcane",
            "melvorAoD:Silver_Magic_Band",
            "melvorAoD:Pirate_Hook",
            "melvorAoD:Ceramic_Jar",
            "melvorAoD:Haunted_Ring",
            "melvorAoD:Eyepatch",
            "melvorAoD:Heavy_Boots",
            "melvorAoD:Torch",
            "melvorAoD:Bronze_Ring",
            "melvorAoD:Barrier_Gem",
            "melvorAoD:Basic_Barrier_Gem",
            "melvorAoD:Barrier_Touch_Gem",
            "melvorAoD:Sapping_Barrier_Gem",
            "melvorAoD:Draining_Barrier_Gem",
            "melvorAoD:Eroding_Barrier_Gem",
            "melvorAoD:Siphoning_Barrier_Gem",
            "melvorAoD:Devouring_Barrier_Gem",
            "melvorAoD:Barrier_Touch_Shield",
            "melvorAoD:Barrier_Sapping_Shield",
            "melvorAoD:Barrier_Sapping_Gloves",
            "melvorAoD:Barrier_Draining_Gloves",
            "melvorAoD:Barrier_Burn_Shield",
            "melvorAoD:Devouring_Barrier_Shield",
            "melvorAoD:Ring_of_Barrier_Touch",
            "melvorAoD:Amulet_of_Barrier_Touch",
            "melvorAoD:Barrier_Hunter_Ring",
            "melvorAoD:Barrier_Hunter_Amulet",
            "melvorAoD:Barrier_Eroding_Ring",
            "melvorAoD:Barrier_Eroding_Amulet",
            "melvorAoD:Cleansing_Ring",
            "melvorAoD:Nullifying_Amulet",
            "melvorAoD:Summoning_Familiar_Barrier",
            "melvorAoD:Crystal_Defender",
            "melvorAoD:Crystal_Arrows",
            "melvorAoD:Crystal_Helmet",
            "melvorAoD:Crystal_Boots",
            "melvorAoD:Crystal_Platelegs",
            "melvorAoD:Crystal_Platebody",
            "melvorAoD:Crystal_Shield",
            "melvorAoD:Crystal_Gloves",
            "melvorAoD:Crystal_Helmet_T_S",
            "melvorAoD:Crystal_Boots_T_S",
            "melvorAoD:Crystal_Platelegs_T_S",
            "melvorAoD:Crystal_Platebody_T_S",
            "melvorAoD:Crystal_Shield_T_S",
            "melvorAoD:Crystal_Helmet_T_G",
            "melvorAoD:Crystal_Boots_T_G",
            "melvorAoD:Crystal_Platelegs_T_G",
            "melvorAoD:Crystal_Platebody_T_G",
            "melvorAoD:Crystal_Shield_T_G",
            "melvorAoD:Pure_Crystal_Defender",
            "melvorAoD:Pure_Crystal_Arrows",
            "melvorAoD:Pure_Crystal_Helmet",
            "melvorAoD:Pure_Crystal_Boots",
            "melvorAoD:Pure_Crystal_Platelegs",
            "melvorAoD:Pure_Crystal_Platebody",
            "melvorAoD:Pure_Crystal_Shield",
            "melvorAoD:Pure_Crystal_Gloves",
            "melvorAoD:Pure_Crystal_Helmet_T_S",
            "melvorAoD:Pure_Crystal_Boots_T_S",
            "melvorAoD:Pure_Crystal_Platelegs_T_S",
            "melvorAoD:Pure_Crystal_Platebody_T_S",
            "melvorAoD:Pure_Crystal_Shield_T_S",
            "melvorAoD:Pure_Crystal_Helmet_T_G",
            "melvorAoD:Pure_Crystal_Boots_T_G",
            "melvorAoD:Pure_Crystal_Platelegs_T_G",
            "melvorAoD:Pure_Crystal_Platebody_T_G",
            "melvorAoD:Pure_Crystal_Shield_T_G",
            "melvorAoD:Lesser_Summoning_Amulet",
            "melvorAoD:Earth_Wall_Shield",
            "melvorAoD:Eradicating_Gloves",
            "melvorAoD:Adaptive_Summoning_Amulet",
            "melvorAoD:Poisonous_Arrows",
            "melvorAoD:Poison_Bolts",
            "melvorAoD:Poison_Cape",
            "melvorAoD:Cape_of_Illusion",
            "melvorAoD:Ghostly_Parrot",
            "melvorAoD:Underwater_Helmet",
            "melvorAoD:Vial_of_Goo",
            "melvorAoD:Vial_of_Acid",
            "melvorAoD:Leeching_Bolts",
            "melvorAoD:Biting_Gloves",
            "melvorAoD:Mage_Mask",
            "melvorAoD:Unholy_Platebody",
            "melvorAoD:Unholy_Body",
            "melvorAoD:Unholy_Wizard_Robes",
            "melvorAoD:Unholy_Amulet",
            "melvorAoD:Unholy_Ring",
            "melvorAoD:Cursed_Platebody",
            "melvorAoD:Cursed_Body",
            "melvorAoD:Cursed_Wizard_Robes",
            "melvorAoD:Cursed_Amulet",
            "melvorAoD:Cursed_Ring",
            "melvorAoD:Ring_of_Malice",
            "melvorAoD:Grudge_Amulet",
            "melvorAoD:Consuming_Shield",
            "melvorAoD:Helmet_of_Spite",
            "melvorAoD:Shield_of_Martyr",
            "melvorAoD:Blacksmith_Tongs",
            "melvorAoD:Golden_Fire_Cape",
            "melvorAoD:Ancient_Infernal_Cape",
            "melvorAoD:Shatter_Arrows",
            "melvorAoD:Unholy_Ranged_Gloves",
            "melvorAoD:Unholy_Melee_Gloves",
            "melvorAoD:Unholy_Magic_Gloves",
            "melvorAoD:Unholy_Battle_Boots",
            "melvorAoD:Summoners_Blessed_Ring",
            "melvorAoD:Accuracy_Gem",
            "melvorAoD:Lifesteal_Gem",
            "melvorAoD:Evasion_Gem",
            "melvorAoD:Burning_Gem",
            "melvorAoD:Poisonous_Gem",
            "melvorAoD:Agile_Gem",
            "melvorAoD:Confusing_Gem",
            "melvorAoD:Decaying_Gem",
            "melvorAoD:Unholy_Gem",
            "melvorAoD:Bronze_Helmet_T_B",
            "melvorAoD:Bronze_Platelegs_T_B",
            "melvorAoD:Bronze_Platebody_T_B",
            "melvorAoD:Iron_Helmet_T_B",
            "melvorAoD:Iron_Platelegs_T_B",
            "melvorAoD:Iron_Platebody_T_B",
            "melvorAoD:Steel_Helmet_T_B",
            "melvorAoD:Steel_Platelegs_T_B",
            "melvorAoD:Steel_Platebody_T_B",
            "melvorAoD:Black_Helmet_T_B",
            "melvorAoD:Black_Platelegs_T_B",
            "melvorAoD:Black_Platebody_T_B",
            "melvorAoD:Mithril_Helmet_T_B",
            "melvorAoD:Mithril_Platelegs_T_B",
            "melvorAoD:Mithril_Platebody_T_B",
            "melvorAoD:Adamant_Helmet_T_B",
            "melvorAoD:Adamant_Platelegs_T_B",
            "melvorAoD:Adamant_Platebody_T_B",
            "melvorAoD:Rune_Helmet_T_B",
            "melvorAoD:Rune_Platelegs_T_B",
            "melvorAoD:Rune_Platebody_T_B",
            "melvorAoD:Dragon_Helmet_T_B",
            "melvorAoD:Dragon_Platelegs_T_B",
            "melvorAoD:Dragon_Platebody_T_B",
            "melvorAoD:Ancient_Helmet_T_B",
            "melvorAoD:Ancient_Platelegs_T_B",
            "melvorAoD:Ancient_Platebody_T_B",
            "melvorAoD:Mithril_Helmet_T_C",
            "melvorAoD:Mithril_Platelegs_T_C",
            "melvorAoD:Mithril_Platebody_T_C",
            "melvorAoD:Adamant_Helmet_T_C",
            "melvorAoD:Adamant_Platelegs_T_C",
            "melvorAoD:Adamant_Platebody_T_C",
            "melvorAoD:Rune_Helmet_T_C",
            "melvorAoD:Rune_Platelegs_T_C",
            "melvorAoD:Rune_Platebody_T_C",
            "melvorAoD:Dragon_Helmet_T_C",
            "melvorAoD:Dragon_Platelegs_T_C",
            "melvorAoD:Dragon_Platebody_T_C",
            "melvorAoD:Ancient_Helmet_T_C",
            "melvorAoD:Ancient_Platelegs_T_C",
            "melvorAoD:Ancient_Platebody_T_C",
            "melvorAoD:Leather_Vambraces_B",
            "melvorAoD:Leather_Chaps_B",
            "melvorAoD:Leather_Body_B",
            "melvorAoD:Hard_Leather_Vambraces_B",
            "melvorAoD:Hard_Leather_Chaps_B",
            "melvorAoD:Hard_Leather_Body_B",
            "melvorAoD:Green_Dhide_Vambraces_B",
            "melvorAoD:Green_Dhide_Chaps_B",
            "melvorAoD:Green_Dhide_Body_B",
            "melvorAoD:Blue_Dhide_Vambraces_B",
            "melvorAoD:Blue_Dhide_Chaps_B",
            "melvorAoD:Blue_Dhide_Body_B",
            "melvorAoD:Red_Dhide_Vambraces_B",
            "melvorAoD:Red_Dhide_Chaps_B",
            "melvorAoD:Red_Dhide_Body_B",
            "melvorAoD:Black_Dhide_Vambraces_B",
            "melvorAoD:Black_Dhide_Chaps_B",
            "melvorAoD:Black_Dhide_Body_B",
            "melvorAoD:Ancient_Dhide_Vambraces_B",
            "melvorAoD:Ancient_Dhide_Chaps_B",
            "melvorAoD:Ancient_Dhide_Body_B",
            "melvorAoD:Air_Acolyte_Wizard_Hat_B",
            "melvorAoD:Air_Acolyte_Wizard_Robes_B",
            "melvorAoD:Air_Acolyte_Wizard_Bottoms_B",
            "melvorAoD:Water_Acolyte_Wizard_Hat_B",
            "melvorAoD:Water_Acolyte_Wizard_Robes_B",
            "melvorAoD:Water_Acolyte_Wizard_Bottoms_B",
            "melvorAoD:Earth_Acolyte_Wizard_Hat_B",
            "melvorAoD:Earth_Acolyte_Wizard_Robes_B",
            "melvorAoD:Earth_Acolyte_Wizard_Bottoms_B",
            "melvorAoD:Fire_Acolyte_Wizard_Hat_B",
            "melvorAoD:Fire_Acolyte_Wizard_Robes_B",
            "melvorAoD:Fire_Acolyte_Wizard_Bottoms_B",
            "melvorAoD:Air_Adept_Wizard_Hat_B",
            "melvorAoD:Air_Adept_Wizard_Robes_B",
            "melvorAoD:Air_Adept_Wizard_Bottoms_B",
            "melvorAoD:Water_Adept_Wizard_Hat_B",
            "melvorAoD:Water_Adept_Wizard_Robes_B",
            "melvorAoD:Water_Adept_Wizard_Bottoms_B",
            "melvorAoD:Earth_Adept_Wizard_Hat_B",
            "melvorAoD:Earth_Adept_Wizard_Robes_B",
            "melvorAoD:Earth_Adept_Wizard_Bottoms_B",
            "melvorAoD:Fire_Adept_Wizard_Hat_B",
            "melvorAoD:Fire_Adept_Wizard_Robes_B",
            "melvorAoD:Fire_Adept_Wizard_Bottoms_B",
            "melvorAoD:Air_Expert_Wizard_Hat_B",
            "melvorAoD:Air_Expert_Wizard_Robes_B",
            "melvorAoD:Air_Expert_Wizard_Bottoms_B",
            "melvorAoD:Water_Expert_Wizard_Hat_B",
            "melvorAoD:Water_Expert_Wizard_Robes_B",
            "melvorAoD:Water_Expert_Wizard_Bottoms_B",
            "melvorAoD:Earth_Expert_Wizard_Hat_B",
            "melvorAoD:Earth_Expert_Wizard_Robes_B",
            "melvorAoD:Earth_Expert_Wizard_Bottoms_B",
            "melvorAoD:Fire_Expert_Wizard_Hat_B",
            "melvorAoD:Fire_Expert_Wizard_Robes_B",
            "melvorAoD:Fire_Expert_Wizard_Bottoms_B",
            "melvorAoD:Ancient_Wizard_Hat_B",
            "melvorAoD:Ancient_Wizard_Robes_B",
            "melvorAoD:Ancient_Wizard_Bottoms_B",
            "melvorAoD:Woodcutting_Lesser_Relic",
            "melvorAoD:Fishing_Lesser_Relic",
            "melvorAoD:Firemaking_Lesser_Relic",
            "melvorAoD:Cooking_Lesser_Relic",
            "melvorAoD:Mining_Lesser_Relic",
            "melvorAoD:Smithing_Lesser_Relic",
            "melvorAoD:Thieving_Lesser_Relic",
            "melvorAoD:Fletching_Lesser_Relic",
            "melvorAoD:Crafting_Lesser_Relic",
            "melvorAoD:Runecrafting_Lesser_Relic",
            "melvorAoD:Herblore_Lesser_Relic",
            "melvorAoD:Agility_Lesser_Relic",
            "melvorAoD:Summoning_Lesser_Relic",
            "melvorAoD:Astrology_Lesser_Relic",
            "melvorAoD:Archaeologist_Hat",
            "melvorAoD:Archaeologist_Body",
            "melvorAoD:Archaeologist_Leggings",
            "melvorAoD:Archaeologist_Boots",
            "melvorAoD:Archaeologist_Gloves",
            "melvorAoD:Cult_Robes",
            "melvorAoD:Superior_Cartography_Skillcape",
            "melvorAoD:Superior_Archaeology_Skillcape",
            "melvorAoD:Cartography_Skillcape",
            "melvorAoD:Archaeology_Skillcape",
            "melvorAoD:Cape_of_Completion_AoD",
            "melvorAoD:Golden_Trowel",
            "melvorAoD:Archaeologists_Consumable",
            "melvorAoD:Summoners_Blessing",
            "melvorAoD:Summoners_Defender",
            "melvorAoD:Knights_Summoning_Defender",
            "melvorAoD:Aeris_God_Helmet_T_B",
            "melvorAoD:Aeris_God_Platelegs_T_B",
            "melvorAoD:Aeris_God_Platebody_T_B",
            "melvorAoD:Aeris_God_Boots_T_B",
            "melvorAoD:Glacia_God_Helmet_T_B",
            "melvorAoD:Glacia_God_Platelegs_T_B",
            "melvorAoD:Glacia_God_Platebody_T_B",
            "melvorAoD:Glacia_God_Boots_T_B",
            "melvorAoD:Terran_God_Helmet_T_B",
            "melvorAoD:Terran_God_Platelegs_T_B",
            "melvorAoD:Terran_God_Platebody_T_B",
            "melvorAoD:Terran_God_Boots_T_B",
            "melvorAoD:Ragnar_God_Helmet_T_B",
            "melvorAoD:Ragnar_God_Platelegs_T_B",
            "melvorAoD:Ragnar_God_Platebody_T_B",
            "melvorAoD:Ragnar_God_Boots_T_B",
            "melvorAoD:Aeris_God_Helmet_T_C",
            "melvorAoD:Aeris_God_Platelegs_T_C",
            "melvorAoD:Aeris_God_Platebody_T_C",
            "melvorAoD:Aeris_God_Boots_T_C",
            "melvorAoD:Glacia_God_Helmet_T_C",
            "melvorAoD:Glacia_God_Platelegs_T_C",
            "melvorAoD:Glacia_God_Platebody_T_C",
            "melvorAoD:Glacia_God_Boots_T_C",
            "melvorAoD:Terran_God_Helmet_T_C",
            "melvorAoD:Terran_God_Platelegs_T_C",
            "melvorAoD:Terran_God_Platebody_T_C",
            "melvorAoD:Terran_God_Boots_T_C",
            "melvorAoD:Ragnar_God_Helmet_T_C",
            "melvorAoD:Ragnar_God_Platelegs_T_C",
            "melvorAoD:Ragnar_God_Platebody_T_C",
            "melvorAoD:Ragnar_God_Boots_T_C",
            "melvorItA:Abyssium_Helmet",
            "melvorItA:Abyssium_Boots",
            "melvorItA:Abyssium_Platelegs",
            "melvorItA:Abyssium_Platebody",
            "melvorItA:Abyssium_Helmet_U",
            "melvorItA:Abyssium_Boots_U",
            "melvorItA:Abyssium_Platelegs_U",
            "melvorItA:Abyssium_Platebody_U",
            "melvorItA:Brumite_Helmet",
            "melvorItA:Brumite_Boots",
            "melvorItA:Brumite_Platelegs",
            "melvorItA:Brumite_Platebody",
            "melvorItA:Brumite_Helmet_U",
            "melvorItA:Brumite_Boots_U",
            "melvorItA:Brumite_Platelegs_U",
            "melvorItA:Brumite_Platebody_U",
            "melvorItA:Gloomite_Helmet",
            "melvorItA:Gloomite_Boots",
            "melvorItA:Gloomite_Platelegs",
            "melvorItA:Gloomite_Platebody",
            "melvorItA:Gloomite_Helmet_U",
            "melvorItA:Gloomite_Boots_U",
            "melvorItA:Gloomite_Platelegs_U",
            "melvorItA:Gloomite_Platebody_U",
            "melvorItA:Witherite_Helmet",
            "melvorItA:Witherite_Boots",
            "melvorItA:Witherite_Platelegs",
            "melvorItA:Witherite_Platebody",
            "melvorItA:Witherite_Helmet_U",
            "melvorItA:Witherite_Boots_U",
            "melvorItA:Witherite_Platelegs_U",
            "melvorItA:Witherite_Platebody_U",
            "melvorItA:Netherite_Helmet",
            "melvorItA:Netherite_Boots",
            "melvorItA:Netherite_Platelegs",
            "melvorItA:Netherite_Platebody",
            "melvorItA:Netherite_Helmet_U",
            "melvorItA:Netherite_Boots_U",
            "melvorItA:Netherite_Platelegs_U",
            "melvorItA:Netherite_Platebody_U",
            "melvorItA:Abyssium_Arrows",
            "melvorItA:Brumite_Arrows",
            "melvorItA:Gloomite_Arrows",
            "melvorItA:Witherite_Arrows",
            "melvorItA:Netherite_Arrows",
            "melvorItA:Nightopal_Bolts",
            "melvorItA:Shadowpearl_Bolts",
            "melvorItA:Moonstone_Bolts",
            "melvorItA:Voidheart_Bolts",
            "melvorItA:Voidburst_Bolts",
            "melvorItA:Abyssal_Leather_Boots",
            "melvorItA:Abyssal_Leather_Legs",
            "melvorItA:Abyssal_Leather_Body",
            "melvorItA:Abyssia_Coif",
            "melvorItA:Abyssia_Legs",
            "melvorItA:Abyssia_Body",
            "melvorItA:Abyssia_Coif_U",
            "melvorItA:Abyssia_Legs_U",
            "melvorItA:Abyssia_Body_U",
            "melvorItA:Brumia_Coif",
            "melvorItA:Brumia_Legs",
            "melvorItA:Brumia_Body",
            "melvorItA:Brumia_Coif_U",
            "melvorItA:Brumia_Legs_U",
            "melvorItA:Brumia_Body_U",
            "melvorItA:Gloomia_Coif",
            "melvorItA:Gloomia_Legs",
            "melvorItA:Gloomia_Body",
            "melvorItA:Gloomia_Coif_U",
            "melvorItA:Gloomia_Legs_U",
            "melvorItA:Gloomia_Body_U",
            "melvorItA:Withia_Coif",
            "melvorItA:Withia_Legs",
            "melvorItA:Withia_Body",
            "melvorItA:Withia_Coif_U",
            "melvorItA:Withia_Legs_U",
            "melvorItA:Withia_Body_U",
            "melvorItA:Nethia_Coif",
            "melvorItA:Nethia_Legs",
            "melvorItA:Nethia_Body",
            "melvorItA:Nethia_Coif_U",
            "melvorItA:Nethia_Legs_U",
            "melvorItA:Nethia_Body_U",
            "melvorItA:Azurian_Nightopal_Ring_I",
            "melvorItA:Azurian_Shadowpearl_Ring_I",
            "melvorItA:Azurian_Moonstone_Ring_I",
            "melvorItA:Azurian_Voidheart_Ring_I",
            "melvorItA:Azurian_Nightopal_Ring_II",
            "melvorItA:Azurian_Shadowpearl_Ring_II",
            "melvorItA:Azurian_Moonstone_Ring_II",
            "melvorItA:Azurian_Voidheart_Ring_II",
            "melvorItA:Obsidian_Nightopal_Ring_I",
            "melvorItA:Obsidian_Shadowpearl_Ring_I",
            "melvorItA:Obsidian_Moonstone_Ring_I",
            "melvorItA:Obsidian_Voidheart_Ring_I",
            "melvorItA:Obsidian_Nightopal_Ring_II",
            "melvorItA:Obsidian_Shadowpearl_Ring_II",
            "melvorItA:Obsidian_Moonstone_Ring_II",
            "melvorItA:Obsidian_Voidheart_Ring_II",
            "melvorItA:Obzurian_Melee_Breaker_Ring",
            "melvorItA:Obzurian_Ranged_Impactor_Ring",
            "melvorItA:Obzurian_Magic_Debilitator_Ring",
            "melvorItA:Obzurian_Unnatural_Vitality_Ring",
            "melvorItA:Azurian_Nightopal_Amulet_I",
            "melvorItA:Azurian_Shadowpearl_Amulet_I",
            "melvorItA:Azurian_Moonstone_Amulet_I",
            "melvorItA:Azurian_Voidheart_Amulet_I",
            "melvorItA:Azurian_Nightopal_Amulet_II",
            "melvorItA:Azurian_Shadowpearl_Amulet_II",
            "melvorItA:Azurian_Moonstone_Amulet_II",
            "melvorItA:Azurian_Voidheart_Amulet_II",
            "melvorItA:Obsidian_Nightopal_Amulet_I",
            "melvorItA:Obsidian_Shadowpearl_Amulet_I",
            "melvorItA:Obsidian_Moonstone_Amulet_I",
            "melvorItA:Obsidian_Voidheart_Amulet_I",
            "melvorItA:Obsidian_Nightopal_Amulet_II",
            "melvorItA:Obsidian_Shadowpearl_Amulet_II",
            "melvorItA:Obsidian_Moonstone_Amulet_II",
            "melvorItA:Obsidian_Voidheart_Amulet_II",
            "melvorItA:Obzurian_Critical_Strike_Amulet",
            "melvorItA:Obzurian_Versatile_Hunter_Amulet",
            "melvorItA:Obzurian_Rampant_Power_Amulet",
            "melvorItA:Obzurian_Unbreakable_Defender_Amulet",
            "melvorItA:Abyssal_Elite_Wizard_Hat",
            "melvorItA:Abyssal_Elite_Wizard_Robes",
            "melvorItA:Abyssal_Elite_Wizard_Legs",
            "melvorItA:Abyssal_Elite_Wizard_Boots",
            "melvorItA:Abyssal_Elite_Wizard_Hat_U",
            "melvorItA:Abyssal_Elite_Wizard_Robes_U",
            "melvorItA:Abyssal_Elite_Wizard_Legs_U",
            "melvorItA:Abyssal_Elite_Wizard_Boots_U",
            "melvorItA:Abyssal_Master_Wizard_Hat",
            "melvorItA:Abyssal_Master_Wizard_Robes",
            "melvorItA:Abyssal_Master_Wizard_Legs",
            "melvorItA:Abyssal_Master_Wizard_Boots",
            "melvorItA:Abyssal_Master_Wizard_Hat_U",
            "melvorItA:Abyssal_Master_Wizard_Robes_U",
            "melvorItA:Abyssal_Master_Wizard_Legs_U",
            "melvorItA:Abyssal_Master_Wizard_Boots_U",
            "melvorItA:Brume_Master_Wizard_Hat",
            "melvorItA:Brume_Master_Wizard_Robes",
            "melvorItA:Brume_Master_Wizard_Legs",
            "melvorItA:Brume_Master_Wizard_Boots",
            "melvorItA:Brume_Master_Wizard_Hat_U",
            "melvorItA:Brume_Master_Wizard_Robes_U",
            "melvorItA:Brume_Master_Wizard_Legs_U",
            "melvorItA:Brume_Master_Wizard_Boots_U",
            "melvorItA:Abyssal_Mystic_Wizard_Hat",
            "melvorItA:Abyssal_Mystic_Wizard_Robes",
            "melvorItA:Abyssal_Mystic_Wizard_Legs",
            "melvorItA:Abyssal_Mystic_Wizard_Boots",
            "melvorItA:Abyssal_Mystic_Wizard_Hat_U",
            "melvorItA:Abyssal_Mystic_Wizard_Robes_U",
            "melvorItA:Abyssal_Mystic_Wizard_Legs_U",
            "melvorItA:Abyssal_Mystic_Wizard_Boots_U",
            "melvorItA:Brume_Mystic_Wizard_Hat",
            "melvorItA:Brume_Mystic_Wizard_Robes",
            "melvorItA:Brume_Mystic_Wizard_Legs",
            "melvorItA:Brume_Mystic_Wizard_Boots",
            "melvorItA:Brume_Mystic_Wizard_Hat_U",
            "melvorItA:Brume_Mystic_Wizard_Robes_U",
            "melvorItA:Brume_Mystic_Wizard_Legs_U",
            "melvorItA:Brume_Mystic_Wizard_Boots_U",
            "melvorItA:Gloom_Mystic_Wizard_Hat",
            "melvorItA:Gloom_Mystic_Wizard_Robes",
            "melvorItA:Gloom_Mystic_Wizard_Legs",
            "melvorItA:Gloom_Mystic_Wizard_Boots",
            "melvorItA:Gloom_Mystic_Wizard_Hat_U",
            "melvorItA:Gloom_Mystic_Wizard_Robes_U",
            "melvorItA:Gloom_Mystic_Wizard_Legs_U",
            "melvorItA:Gloom_Mystic_Wizard_Boots_U",
            "melvorItA:Abyssal_Legendary_Wizard_Hat",
            "melvorItA:Abyssal_Legendary_Wizard_Robes",
            "melvorItA:Abyssal_Legendary_Wizard_Legs",
            "melvorItA:Abyssal_Legendary_Wizard_Boots",
            "melvorItA:Abyssal_Legendary_Wizard_Hat_U",
            "melvorItA:Abyssal_Legendary_Wizard_Robes_U",
            "melvorItA:Abyssal_Legendary_Wizard_Legs_U",
            "melvorItA:Abyssal_Legendary_Wizard_Boots_U",
            "melvorItA:Brume_Legendary_Wizard_Hat",
            "melvorItA:Brume_Legendary_Wizard_Robes",
            "melvorItA:Brume_Legendary_Wizard_Legs",
            "melvorItA:Brume_Legendary_Wizard_Boots",
            "melvorItA:Brume_Legendary_Wizard_Hat_U",
            "melvorItA:Brume_Legendary_Wizard_Robes_U",
            "melvorItA:Brume_Legendary_Wizard_Legs_U",
            "melvorItA:Brume_Legendary_Wizard_Boots_U",
            "melvorItA:Gloom_Legendary_Wizard_Hat",
            "melvorItA:Gloom_Legendary_Wizard_Robes",
            "melvorItA:Gloom_Legendary_Wizard_Legs",
            "melvorItA:Gloom_Legendary_Wizard_Boots",
            "melvorItA:Gloom_Legendary_Wizard_Hat_U",
            "melvorItA:Gloom_Legendary_Wizard_Robes_U",
            "melvorItA:Gloom_Legendary_Wizard_Legs_U",
            "melvorItA:Gloom_Legendary_Wizard_Boots_U",
            "melvorItA:Wither_Legendary_Wizard_Hat",
            "melvorItA:Wither_Legendary_Wizard_Robes",
            "melvorItA:Wither_Legendary_Wizard_Legs",
            "melvorItA:Wither_Legendary_Wizard_Boots",
            "melvorItA:Wither_Legendary_Wizard_Hat_U",
            "melvorItA:Wither_Legendary_Wizard_Robes_U",
            "melvorItA:Wither_Legendary_Wizard_Legs_U",
            "melvorItA:Wither_Legendary_Wizard_Boots_U",
            "melvorItA:Abyssal_Mythical_Wizard_Hat",
            "melvorItA:Abyssal_Mythical_Wizard_Robes",
            "melvorItA:Abyssal_Mythical_Wizard_Legs",
            "melvorItA:Abyssal_Mythical_Wizard_Boots",
            "melvorItA:Abyssal_Mythical_Wizard_Hat_U",
            "melvorItA:Abyssal_Mythical_Wizard_Robes_U",
            "melvorItA:Abyssal_Mythical_Wizard_Legs_U",
            "melvorItA:Abyssal_Mythical_Wizard_Boots_U",
            "melvorItA:Brume_Mythical_Wizard_Hat",
            "melvorItA:Brume_Mythical_Wizard_Robes",
            "melvorItA:Brume_Mythical_Wizard_Legs",
            "melvorItA:Brume_Mythical_Wizard_Boots",
            "melvorItA:Brume_Mythical_Wizard_Hat_U",
            "melvorItA:Brume_Mythical_Wizard_Robes_U",
            "melvorItA:Brume_Mythical_Wizard_Legs_U",
            "melvorItA:Brume_Mythical_Wizard_Boots_U",
            "melvorItA:Gloom_Mythical_Wizard_Hat",
            "melvorItA:Gloom_Mythical_Wizard_Robes",
            "melvorItA:Gloom_Mythical_Wizard_Legs",
            "melvorItA:Gloom_Mythical_Wizard_Boots",
            "melvorItA:Gloom_Mythical_Wizard_Hat_U",
            "melvorItA:Gloom_Mythical_Wizard_Robes_U",
            "melvorItA:Gloom_Mythical_Wizard_Legs_U",
            "melvorItA:Gloom_Mythical_Wizard_Boots_U",
            "melvorItA:Wither_Mythical_Wizard_Hat",
            "melvorItA:Wither_Mythical_Wizard_Robes",
            "melvorItA:Wither_Mythical_Wizard_Legs",
            "melvorItA:Wither_Mythical_Wizard_Boots",
            "melvorItA:Wither_Mythical_Wizard_Hat_U",
            "melvorItA:Wither_Mythical_Wizard_Robes_U",
            "melvorItA:Wither_Mythical_Wizard_Legs_U",
            "melvorItA:Wither_Mythical_Wizard_Boots_U",
            "melvorItA:Nether_Mythical_Wizard_Hat",
            "melvorItA:Nether_Mythical_Wizard_Robes",
            "melvorItA:Nether_Mythical_Wizard_Legs",
            "melvorItA:Nether_Mythical_Wizard_Boots",
            "melvorItA:Nether_Mythical_Wizard_Hat_U",
            "melvorItA:Nether_Mythical_Wizard_Robes_U",
            "melvorItA:Nether_Mythical_Wizard_Legs_U",
            "melvorItA:Nether_Mythical_Wizard_Boots_U",
            "melvorItA:Thorn_Defender",
            "melvorItA:Thorn_Legs",
            "melvorItA:Thorn_Ward",
            "melvorItA:Weavers_Amulet",
            "melvorItA:Silent_Top",
            "melvorItA:Piece_Collector_Amulet",
            "melvorItA:Crimson_Lantern_Stick",
            "melvorItA:Blighted_Heart_Amulet",
            "melvorItA:Lurker_Gem",
            "melvorItA:Shadeveil_Cape",
            "melvorItA:Abyssal_Skilling_Gem",
            "melvorItA:Withering_Gem",
            "melvorItA:Golem_Gloves",
            "melvorItA:Silent_Boots",
            "melvorItA:Skeleton_Key_Ring",
            "melvorItA:Old_Dusty_Mitt",
            "melvorItA:Eternity_Mitt",
            "melvorItA:Voidtaker_Amulet",
            "melvorItA:Void_Shambler_Cape",
            "melvorItA:Voidseeker_Glasses",
            "melvorItA:Signet_Ring_of_Corrupted_Souls",
            "melvorItA:Amulet_of_Power",
            "melvorItA:Elite_Amulet_of_Power",
            "melvorItA:Amulet_of_Distance",
            "melvorItA:Elite_Amulet_of_Distance",
            "melvorItA:Amulet_of_Enchantment",
            "melvorItA:Elite_Amulet_of_Enchantment",
            "melvorItA:Amulet_of_Precision",
            "melvorItA:Elite_Amulet_of_Precision",
            "melvorItA:Amulet_of_Corruption",
            "melvorItA:Elite_Amulet_of_Corruption",
            "melvorItA:Exalted_Ornament_of_Destruction_Illusion_Umbra_Sorcery",
            "melvorItA:Smog_Fiend_Cape",
            "melvorItA:Blight_Warder_Body",
            "melvorItA:Toxic_Protection_Mask",
            "melvorItA:Soul_Harvester_Gloves",
            "melvorItA:Soul_Harvester_Amulet",
            "melvorItA:Petrifying_Shield",
            "melvorItA:Petrifying_Ring",
            "melvorItA:Fractured_Beast_Shield",
            "melvorItA:Seismic_Wave_Boots",
            "melvorItA:Seismic_Toss_Gloves",
            "melvorItA:Withering_Arrows",
            "melvorItA:Wither_Guard_Shield",
            "melvorItA:Wither_Cape",
            "melvorItA:Tortoise_Shell_Platebody",
            "melvorItA:Echoing_Ring",
            "melvorItA:Echo_Walker_Boots",
            "melvorItA:Echo_Drifter_Cape",
            "melvorItA:Echoing_Amulet",
            "melvorItA:Ravenous_Hunger_Defender",
            "melvorItA:Phantom_Shift_Platelegs",
            "melvorItA:Tendril_Bind_Boots",
            "melvorItA:Eldritch_Marker_Amulet",
            "melvorItA:Soulbind_Ring",
            "melvorItA:Mind_Visage",
            "melvorItA:Voidium_Entity_Helmet",
            "melvorItA:Voidium_Entity_Platebody",
            "melvorItA:Voidium_Entity_Platelegs",
            "melvorItA:Voidium_Entity_Boots",
            "melvorItA:Voidium_Artificer_Helmet",
            "melvorItA:Voidium_Artificer_Body",
            "melvorItA:Voidium_Artificer_Legs",
            "melvorItA:Voidium_Artificer_Boots",
            "melvorItA:Voidium_Vagrant_Helmet",
            "melvorItA:Voidium_Vagrant_Robes",
            "melvorItA:Voidium_Vagrant_Bottoms",
            "melvorItA:Voidium_Vagrant_Boots",
            "melvorItA:Abyssal_Slayer_Helmet_Woeful",
            "melvorItA:Abyssal_Slayer_Platebody_Woeful",
            "melvorItA:Abyssal_Slayer_Cowl_Woeful",
            "melvorItA:Abyssal_Slayer_Leather_Body_Woeful",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Woeful",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Woeful",
            "melvorItA:Abyssal_Slayer_Helmet_Decayer",
            "melvorItA:Abyssal_Slayer_Platebody_Decayer",
            "melvorItA:Abyssal_Slayer_Cowl_Decayer",
            "melvorItA:Abyssal_Slayer_Leather_Body_Decayer",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Decayer",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Decayer",
            "melvorItA:Abyssal_Slayer_Helmet_Fearful",
            "melvorItA:Abyssal_Slayer_Platebody_Fearful",
            "melvorItA:Abyssal_Slayer_Cowl_Fearful",
            "melvorItA:Abyssal_Slayer_Leather_Body_Fearful",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Fearful",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Fearful",
            "melvorItA:Abyssal_Slayer_Helmet_Ruiner",
            "melvorItA:Abyssal_Slayer_Platebody_Ruiner",
            "melvorItA:Abyssal_Slayer_Cowl_Ruiner",
            "melvorItA:Abyssal_Slayer_Leather_Body_Ruiner",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Ruiner",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Ruiner",
            "melvorItA:Abyssal_Slayer_Helmet_Isolator",
            "melvorItA:Abyssal_Slayer_Platebody_Isolator",
            "melvorItA:Abyssal_Slayer_Cowl_Isolator",
            "melvorItA:Abyssal_Slayer_Leather_Body_Isolator",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Isolator",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Isolator",
            "melvorItA:Abyssal_Slayer_Helmet_Dissolver",
            "melvorItA:Abyssal_Slayer_Platebody_Dissolver",
            "melvorItA:Abyssal_Slayer_Cowl_Dissolver",
            "melvorItA:Abyssal_Slayer_Leather_Body_Dissolver",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Dissolver",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Dissolver",
            "melvorItA:Abyssal_Slayer_Helmet_Resolver",
            "melvorItA:Abyssal_Slayer_Platebody_Resolver",
            "melvorItA:Abyssal_Slayer_Cowl_Resolver",
            "melvorItA:Abyssal_Slayer_Leather_Body_Resolver",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Resolver",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Resolver",
            "melvorItA:Summoning_Familiar_Imp",
            "melvorItA:Summoning_Familiar_Golem",
            "melvorItA:Summoning_Familiar_Abyssal_Golbin_Thief",
            "melvorItA:Summoning_Familiar_Abyssal_Occultist",
            "melvorItA:Summoning_Familiar_Abyssal_Wolf",
            "melvorItA:Summoning_Familiar_Abyssal_Ent",
            "melvorItA:Summoning_Familiar_Abyssal_Mole",
            "melvorItA:Summoning_Familiar_Abyssal_Octopus",
            "melvorItA:Summoning_Familiar_Abyssal_Minotaur",
            "melvorItA:Summoning_Familiar_Abyssal_Centaur",
            "melvorItA:Summoning_Familiar_Abyssal_Witch",
            "melvorItA:Summoning_Familiar_Abyssal_Pig",
            "melvorItA:Summoning_Familiar_Abyssal_Crow",
            "melvorItA:Summoning_Familiar_Abyssal_Leprechaun",
            "melvorItA:Summoning_Familiar_Abyssal_Cyclops",
            "melvorItA:Summoning_Familiar_Abyssal_Yak",
            "melvorItA:Summoning_Familiar_Abyssal_Unicorn",
            "melvorItA:Summoning_Familiar_Abyssal_Dragon",
            "melvorItA:Summoning_Familiar_Abyssal_Monkey",
            "melvorItA:Summoning_Familiar_Abyssal_Salamander",
            "melvorItA:Summoning_Familiar_Abyssal_Bear",
            "melvorItA:Summoning_Familiar_Abyssal_Devil",
            "melvorItA:Summoning_Familiar_Eldritch_Eyeball",
            "melvorItA:Summoning_Familiar_Void_Wisp",
            "melvorItA:Woeful_Gloves",
            "melvorItA:Woeful_Gem",
            "melvorItA:Woeful_Platebody",
            "melvorItA:Abyss_Ring",
            "melvorItA:Abyssal_Shield",
            "melvorItA:Blighting_Platelegs",
            "melvorItA:Blighting_Amulet",
            "melvorItA:Blighting_Gloves",
            "melvorItA:Fear_Helmet",
            "melvorItA:Fear_Gem",
            "melvorItA:Fear_Protection_Amulet",
            "melvorItA:Fear_Cloak",
            "melvorItA:Abyssal_Darkshield",
            "melvorItA:Powerful_Abyss_Ring",
            "melvorItA:Blazing_Gemstone",
            "melvorItA:Toxic_Gemstone",
            "melvorItA:Silencing_Gemstone",
            "melvorItA:Netherite_Gloves",
            "melvorItA:Eldritch_Reaper_Helmet",
            "melvorItA:Eldritch_Reaper_Boots",
            "melvorItA:Eldritch_Reaper_Platelegs",
            "melvorItA:Eldritch_Reaper_Platebody",
            "melvorItA:Eldritch_Nightmare_Helmet",
            "melvorItA:Eldritch_Nightmare_Legs",
            "melvorItA:Eldritch_Nightmare_Body",
            "melvorItA:Eldritch_Nightmare_Boots",
            "melvorItA:Eldritch_Harbinger_Helmet",
            "melvorItA:Eldritch_Harbinger_Robes",
            "melvorItA:Eldritch_Harbinger_Legs",
            "melvorItA:Eldritch_Harbinger_Boots",
            "melvorItA:Eldritch_Curse_Gloves",
            "melvorItA:Eldritch_Abyss_Ring",
            "melvorItA:Voidium_Cape",
            "melvorItA:Voidborne_Cape",
            "melvorItA:Voidium_Shield",
            "melvorItA:Voidborne_Shield",
            "melvorItA:Voidburst_Gloves",
            "melvorItA:Void_Gem",
            "melvorItA:Harvesting_Consumable_I",
            "melvorItA:Corrupted_Light_Consumable_I",
            "melvorItA:Dark_Summon_Consumable_I",
            "melvorItA:Toxicity_Consumable_I",
            "melvorItA:Abyssal_Essence_Consumable_I",
            "melvorItA:Shade_Consumable_I",
            "melvorItA:Fear_Consumable_I",
            "melvorItA:Abyssal_Resist_Consumable_I",
            "melvorItA:Deep_Wounds_Consumable_I",
            "melvorItA:Withering_Consumable_I",
            "melvorItA:Silence_Consumable_I",
            "melvorItA:Soul_Harvesting_Consumable_I",
            "melvorItA:Item_Cost_Consumable_I",
            "melvorItA:Eldritch_Curse_Consumable_I",
            "melvorItA:Voidburst_Consumable_I",
            "melvorItA:Harvesting_Consumable_II",
            "melvorItA:Corrupted_Light_Consumable_II",
            "melvorItA:Dark_Summon_Consumable_II",
            "melvorItA:Toxicity_Consumable_II",
            "melvorItA:Abyssal_Essence_Consumable_II",
            "melvorItA:Shade_Consumable_II",
            "melvorItA:Fear_Consumable_II",
            "melvorItA:Abyssal_Resist_Consumable_II",
            "melvorItA:Deep_Wounds_Consumable_II",
            "melvorItA:Withering_Consumable_II",
            "melvorItA:Silence_Consumable_II",
            "melvorItA:Soul_Harvesting_Consumable_II",
            "melvorItA:Item_Cost_Consumable_II",
            "melvorItA:Eldritch_Curse_Consumable_II",
            "melvorItA:Voidburst_Consumable_II",
            "melvorItA:Harvesting_Consumable_III",
            "melvorItA:Corrupted_Light_Consumable_III",
            "melvorItA:Dark_Summon_Consumable_III",
            "melvorItA:Toxicity_Consumable_III",
            "melvorItA:Abyssal_Essence_Consumable_III",
            "melvorItA:Shade_Consumable_III",
            "melvorItA:Fear_Consumable_III",
            "melvorItA:Abyssal_Resist_Consumable_III",
            "melvorItA:Deep_Wounds_Consumable_III",
            "melvorItA:Withering_Consumable_III",
            "melvorItA:Silence_Consumable_III",
            "melvorItA:Soul_Harvesting_Consumable_III",
            "melvorItA:Item_Cost_Consumable_III",
            "melvorItA:Eldritch_Curse_Consumable_III",
            "melvorItA:Voidburst_Consumable_III",
            "melvorItA:Lost_Ring_of_the_Abyss",
            "melvorItA:Tentacle_Hat",
            "melvorItA:Luminous_Lure",
            "melvorItA:Blighted_Enhancement_1",
            "melvorItA:Blighted_Enhancement_2",
            "melvorItA:Blighted_Enhancement_3",
            "melvorItA:Blighted_Enhancement_1_Augmented",
            "melvorItA:Blighted_Enhancement_2_Augmented",
            "melvorItA:Blighted_Enhancement_3_Augmented",
            "melvorItA:Blighted_Enhancement_Superior",
            "melvorItA:Fear_Enhancement_1",
            "melvorItA:Fear_Enhancement_2",
            "melvorItA:Fear_Enhancement_3",
            "melvorItA:Fear_Enhancement_1_Augmented",
            "melvorItA:Fear_Enhancement_2_Augmented",
            "melvorItA:Fear_Enhancement_3_Augmented",
            "melvorItA:Fear_Enhancement_Superior",
            "melvorItA:Nightmare_Enhancement_1",
            "melvorItA:Nightmare_Enhancement_2",
            "melvorItA:Nightmare_Enhancement_3",
            "melvorItA:Nightmare_Enhancement_1_Augmented",
            "melvorItA:Nightmare_Enhancement_2_Augmented",
            "melvorItA:Nightmare_Enhancement_3_Augmented",
            "melvorItA:Nightmare_Enhancement_Superior",
            "melvorItA:Overlords_Enhancement_1",
            "melvorItA:Overlords_Enhancement_2",
            "melvorItA:Overlords_Enhancement_3",
            "melvorItA:Overlords_Enhancement_1_Augmented",
            "melvorItA:Overlords_Enhancement_2_Augmented",
            "melvorItA:Overlords_Enhancement_3_Augmented",
            "melvorItA:Overlords_Enhancement_Superior",
            "melvorItA:Enhanced_Township_Food_Scroll",
            "melvorItA:Enhanced_Township_Wood_Scroll",
            "melvorItA:Enhanced_Township_Stone_Scroll",
            "melvorItA:Enhanced_Township_Herb_Scroll",
            "melvorItA:Enhanced_Township_Rune_Essence_Scroll",
            "melvorItA:Enhanced_Township_Leather_Scroll",
            "melvorItA:Enhanced_Township_Potion_Scroll",
            "melvorItA:Enhanced_Township_Plank_Scroll",
            "melvorItA:Abyssal_XP_Scroll_of_Production",
            "melvorItA:Abyssal_XP_Scroll_of_Gathering",
            "melvorItA:Production_Reduction_Scroll",
            "melvorItA:Enhanced_Gathering_Scroll",
            "melvorItA:Enhanced_Production_Scroll",
            "melvorItA:Harvesting_Scroll",
            "melvorItA:Corruption_Scroll",
            "melvorItA:Mining_Fortune_Scroll",
            "melvorItA:Woodcutting_Fortune_Scroll",
            "melvorItA:Fishing_Fortune_Scroll",
            "melvorItA:Abyssal_Cooking_Scroll",
            "melvorItA:Abyssal_Smithing_Scroll",
            "melvorItA:Abyssal_Fletching_Scroll",
            "melvorItA:Abyssal_Summoning_Scroll",
            "melvorItA:Abyssal_Mining_Gloves",
            "melvorItA:Abyssal_Smithing_Gloves",
            "melvorItA:Abyssal_Firemaking_Gloves",
            "melvorItA:Abyssal_Harvesting_Gloves",
            "melvorItA:Abyssal_Fletching_Gloves",
            "melvorItA:Abyssal_Crafting_Gloves",
            "melvorItA:Abyssal_Herblore_Gloves",
            "melvorItA:Abyssal_Runecrafting_Gloves",
            "melvorItA:Abyssal_Negation_Contract_I",
            "melvorItA:Abyssal_Negation_Contract_II",
            "melvorItA:Abyssal_Coin_Contract_I",
            "melvorItA:Abyssal_Coin_Contract_II",
            "melvorItA:Abyssal_Counter_Contract_I",
            "melvorItA:Abyssal_Counter_Contract_II",
            "melvorItA:Abyssal_Corruption_Contract_I",
            "melvorItA:Abyssal_Corruption_Contract_II",
            "melvorItA:Bobs_Lost_Gloves",
            "melvorItA:Cape_of_Completion_ItA"
          ]
        }
      ]
    },
    "WeaponItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Bronze_Dagger",
            "melvorD:Bronze_Sword",
            "melvorD:Bronze_Battleaxe",
            "melvorD:Bronze_2H_Sword",
            "melvorD:Iron_Dagger",
            "melvorD:Iron_Sword",
            "melvorD:Iron_Battleaxe",
            "melvorD:Iron_2H_Sword",
            "melvorD:Steel_Dagger",
            "melvorD:Steel_Sword",
            "melvorD:Steel_Battleaxe",
            "melvorD:Steel_2H_Sword",
            "melvorD:Mithril_Dagger",
            "melvorD:Mithril_Sword",
            "melvorD:Mithril_Battleaxe",
            "melvorD:Mithril_2H_Sword",
            "melvorD:Adamant_Dagger",
            "melvorD:Adamant_Sword",
            "melvorD:Adamant_Battleaxe",
            "melvorD:Adamant_2H_Sword",
            "melvorD:Rune_Dagger",
            "melvorD:Rune_Sword",
            "melvorD:Rune_Battleaxe",
            "melvorD:Rune_2H_Sword",
            "melvorD:Dragon_Dagger",
            "melvorD:Dragon_Sword",
            "melvorD:Dragon_Battleaxe",
            "melvorD:Dragon_2H_Sword",
            "melvorD:Black_Dagger",
            "melvorD:Black_Sword",
            "melvorD:Black_Battleaxe",
            "melvorD:Black_2H_Sword",
            "melvorD:Normal_Shortbow",
            "melvorD:Oak_Shortbow",
            "melvorD:Maple_Shortbow",
            "melvorD:Yew_Shortbow",
            "melvorD:Magic_Shortbow",
            "melvorD:Maple_Longbow",
            "melvorD:Magic_Longbow",
            "melvorD:Ancient_Sword",
            "melvorD:Ice_Dagger",
            "melvorD:Ice_Sword",
            "melvorD:Ice_Battleaxe",
            "melvorD:Ice_2h_Sword",
            "melvorD:Ice_Shortbow",
            "melvorD:Ice_Longbow",
            "melvorD:Redwood_Longbow",
            "melvorD:Air_Battlestaff",
            "melvorD:Water_Battlestaff",
            "melvorD:Earth_Battlestaff",
            "melvorD:Fire_Battlestaff",
            "melvorD:Mystic_Air_Staff",
            "melvorD:Bronze_Scimitar",
            "melvorD:Iron_Scimitar",
            "melvorD:Steel_Scimitar",
            "melvorD:Black_Scimitar",
            "melvorD:Mithril_Scimitar",
            "melvorD:Adamant_Scimitar",
            "melvorD:Rune_Scimitar",
            "melvorD:Dragon_Scimitar",
            "melvorD:Ancient_Longbow",
            "melvorD:Magic_Wand_Basic",
            "melvorD:Magic_Wand_Powerful",
            "melvorD:Magic_Wand_Elite",
            "melvorD:Sunset_Rapier",
            "melvorD:Bronze_Throwing_Knife",
            "melvorD:Iron_Throwing_Knife",
            "melvorD:Steel_Throwing_Knife",
            "melvorD:Mithril_Throwing_Knife",
            "melvorD:Adamant_Throwing_Knife",
            "melvorD:Rune_Throwing_Knife",
            "melvorD:Dragon_Throwing_Knife",
            "melvorD:Bobs_Rake",
            "melvorD:Candy_Cane",
            "melvorD:Slingshot",
            "melvorD:Elerine_Longbow",
            "melvorD:Elerine_Spear",
            "melvorD:Mystery_Wand",
            "melvorD:Burning_Wand",
            "melvorD:Frostburn_Wand",
            "melvorD:Sword_Of_Some_Reliability",
            "melvorD:Tilted_Crossbow",
            "melvorD:Impossible_Longbow",
            "melvorD:Throwing_Dragon_Sword",
            "melvorD:DEBUG_STICK",
            "melvorF:Willow_Shortbow",
            "melvorF:Normal_Longbow",
            "melvorF:Oak_Longbow",
            "melvorF:Willow_Longbow",
            "melvorF:Yew_Longbow",
            "melvorF:Redwood_Shortbow",
            "melvorF:Staff_of_Air",
            "melvorF:Staff_of_Water",
            "melvorF:Staff_of_Earth",
            "melvorF:Staff_of_Fire",
            "melvorF:Mystic_Water_Staff",
            "melvorF:Mystic_Earth_Staff",
            "melvorF:Mystic_Fire_Staff",
            "melvorF:Dragon_Claw",
            "melvorF:Ancient_Claw",
            "melvorF:Ancient_2H_Sword",
            "melvorF:Bronze_Crossbow",
            "melvorF:Iron_Crossbow",
            "melvorF:Steel_Crossbow",
            "melvorF:Mithril_Crossbow",
            "melvorF:Adamant_Crossbow",
            "melvorF:Rune_Crossbow",
            "melvorF:Dragon_Crossbow",
            "melvorF:Ancient_Crossbow",
            "melvorF:Bronze_Javelin",
            "melvorF:Iron_Javelin",
            "melvorF:Steel_Javelin",
            "melvorF:Mithril_Javelin",
            "melvorF:Adamant_Javelin",
            "melvorF:Rune_Javelin",
            "melvorF:Dragon_Javelin",
            "melvorF:Ancient_Javelin",
            "melvorF:Ancient_Throwing_Knife",
            "melvorF:Aeris_Godsword",
            "melvorF:Glacia_Godsword",
            "melvorF:Terran_Godsword",
            "melvorF:Ragnar_Godsword",
            "melvorF:Stormsnap",
            "melvorF:Big_Ron",
            "melvorF:Confetti_Crossbow",
            "melvorF:Slayer_Crossbow",
            "melvorF:Twin_Exiles",
            "melvorF:Cloudburst_Staff",
            "melvorF:Air_Imbued_Wand",
            "melvorF:Water_Imbued_Wand",
            "melvorF:Earth_Imbued_Wand",
            "melvorF:Fire_Imbued_Wand",
            "melvorF:Miolite_Sceptre",
            "melvorF:Desert_Sabre",
            "melvorF:Desert_Shortbow",
            "melvorF:Darksteel_Dagger",
            "melvorF:Sanguine_Blade",
            "melvorF:Infernal_Claw",
            "melvorF:Tidal_Edge",
            "melvorF:Ocean_Song",
            "melvorF:Shockwave",
            "melvorF:Almighty_Lute",
            "melvorF:Chefs_Spoon",
            "melvorF:War_Axe",
            "melvorF:Warberd",
            "melvorF:Natures_Call_Staff",
            "melvorF:Natures_Wrath_Staff",
            "melvorF:Poisoned_Shortbow",
            "melvorF:Poisoned_Dagger",
            "melvorF:Ultima_Godsword",
            "melvorTotH:Corundum_Dagger",
            "melvorTotH:Corundum_Sword",
            "melvorTotH:Corundum_Battleaxe",
            "melvorTotH:Corundum_2H_Sword",
            "melvorTotH:Corundum_Scimitar",
            "melvorTotH:Corundum_Throwing_Knife",
            "melvorTotH:Augite_Dagger",
            "melvorTotH:Augite_Sword",
            "melvorTotH:Augite_Battleaxe",
            "melvorTotH:Augite_2H_Sword",
            "melvorTotH:Augite_Scimitar",
            "melvorTotH:Augite_Throwing_Knife",
            "melvorTotH:Meteorite_2H_Sword",
            "melvorTotH:Divine_Dagger",
            "melvorTotH:Divine_Sword",
            "melvorTotH:Divine_Battleaxe",
            "melvorTotH:Divine_2H_Sword",
            "melvorTotH:Divine_Scimitar",
            "melvorTotH:Divine_Throwing_Knife",
            "melvorTotH:Potion_Stirrer",
            "melvorTotH:Elderwood_Shortbow",
            "melvorTotH:Elderwood_Longbow",
            "melvorTotH:Revenant_Shortbow",
            "melvorTotH:Revenant_Longbow",
            "melvorTotH:Carrion_Shortbow",
            "melvorTotH:Carrion_Longbow",
            "melvorTotH:Corundum_Crossbow",
            "melvorTotH:Augite_Crossbow",
            "melvorTotH:Divine_Crossbow",
            "melvorTotH:Meteorite_Crossbow",
            "melvorTotH:Corundum_Javelin",
            "melvorTotH:Augite_Javelin",
            "melvorTotH:Divine_Javelin",
            "melvorTotH:Meteorite_Javelin",
            "melvorTotH:Poison_Staff",
            "melvorTotH:Infernal_Staff",
            "melvorTotH:Lightning_Staff",
            "melvorTotH:Meteorite_Staff",
            "melvorTotH:Despair_Wand",
            "melvorTotH:Archaic_Wand",
            "melvorTotH:Calamity_Wand",
            "melvorTotH:Thorned_Power_Bow",
            "melvorTotH:Heated_Fury_2H_Hammer",
            "melvorTotH:Spectral_Ice_Sword",
            "melvorTotH:Lightning_Strike_1H_Sword",
            "melvorTotH:FrostSpark_1H_Sword",
            "melvorTotH:Lightning_Coil_2H_Staff",
            "melvorTotH:Torrential_Blast_Crossbow",
            "melvorTotH:Royal_Toxins_Spear",
            "melvorTotH:Ethereal_Longbow",
            "melvorTotH:Ethereal_Staff",
            "melvorTotH:Ethereal_Greataxe",
            "melvorTotH:Feather_Storm_Crossbow",
            "melvorTotH:Agile_Wings_Rapier",
            "melvorTotH:Slicing_Maelstrom_Wand",
            "melvorTotH:Dark_Blade_Defender",
            "melvorTotH:Grappling_Hook",
            "melvorAoD:Chisel",
            "melvorAoD:Ancient_Hunting_Bow",
            "melvorAoD:Old_Hunting_Bow",
            "melvorAoD:Old_Fancy_Quill",
            "melvorAoD:Aranite_2H_Blade",
            "melvorAoD:Darksteel_2H_SWord",
            "melvorAoD:Pirate_Captains_Sword",
            "melvorAoD:Old_Spyglass",
            "melvorAoD:Water_Sceptre",
            "melvorAoD:Ancient_Scythe",
            "melvorAoD:Golden_Bow",
            "melvorAoD:Fishing_Net",
            "melvorAoD:Magic_Flute",
            "melvorAoD:Sacrificial_Dagger",
            "melvorAoD:Magical_Broomstick",
            "melvorAoD:Stone_Hammer",
            "melvorAoD:Sturdy_Fancy_Quill",
            "melvorAoD:Familiar_Staff",
            "melvorAoD:Familiar_2H_Sword",
            "melvorAoD:Familiar_Longbow",
            "melvorAoD:Engulfing_Vortex_Longbow",
            "melvorAoD:Crystal_Throwing_Knife",
            "melvorAoD:Crystal_Twin_Blades",
            "melvorAoD:Crystal_2H_Hammer",
            "melvorAoD:Crystal_Shortbow",
            "melvorAoD:Crystal_Longbow",
            "melvorAoD:Crystal_Javelin",
            "melvorAoD:Crystal_Crossbow",
            "melvorAoD:Crystal_Battlestaff",
            "melvorAoD:Pure_Crystal_Throwing_Knife",
            "melvorAoD:Pure_Crystal_2H_Spear",
            "melvorAoD:Pure_Crystal_2H_Axe",
            "melvorAoD:Pure_Crystal_Shortbow",
            "melvorAoD:Pure_Crystal_Longbow",
            "melvorAoD:Pure_Crystal_Javelin",
            "melvorAoD:Pure_Crystal_Crossbow",
            "melvorAoD:Mystic_Pure_Crystal_Staff",
            "melvorAoD:Basic_2H_Sword",
            "melvorAoD:Basic_Shortbow",
            "melvorAoD:Basic_Staff",
            "melvorAoD:Granite_Mace",
            "melvorAoD:Granite_Crossbow",
            "melvorAoD:Mudball_Staff",
            "melvorAoD:Rune_Claw",
            "melvorAoD:Soul_Taker_Wand",
            "melvorAoD:Rotten_Staff",
            "melvorAoD:Lich_Staff",
            "melvorAoD:Poison_Crossbow",
            "melvorAoD:Trickery_Mirror",
            "melvorAoD:Powered_Red_Crystal",
            "melvorAoD:Ghost_Scimitar",
            "melvorAoD:Ghost_Blunderbow",
            "melvorAoD:Foresight_Wand",
            "melvorAoD:Water_Pulse_Staff",
            "melvorAoD:Hasty_Trident",
            "melvorAoD:Unholy_2H_Sword",
            "melvorAoD:Unholy_Longbow",
            "melvorAoD:Unholy_Staff",
            "melvorAoD:Cursed_2H_Sword",
            "melvorAoD:Cursed_Longbow",
            "melvorAoD:Cursed_Staff",
            "melvorAoD:Rune_Mallet",
            "melvorAoD:Old_Wooden_Ladle",
            "melvorAoD:Archaeologists_Whip",
            "melvorAoD:Enhanced_Spyglass",
            "melvorItA:Strange_Sword",
            "melvorItA:Abyssium_Dagger",
            "melvorItA:Abyssium_Sword",
            "melvorItA:Abyssium_2H_Sword",
            "melvorItA:Abyssium_Throwing_Knife",
            "melvorItA:Brumite_Dagger",
            "melvorItA:Brumite_Sword",
            "melvorItA:Brumite_2H_Sword",
            "melvorItA:Brumite_Throwing_Knife",
            "melvorItA:Gloomite_Dagger",
            "melvorItA:Gloomite_Sword",
            "melvorItA:Gloomite_2H_Sword",
            "melvorItA:Gloomite_Throwing_Knife",
            "melvorItA:Witherite_Dagger",
            "melvorItA:Witherite_Sword",
            "melvorItA:Witherite_2H_Sword",
            "melvorItA:Witherite_Throwing_Knife",
            "melvorItA:Netherite_Dagger",
            "melvorItA:Netherite_Sword",
            "melvorItA:Netherite_2H_Sword",
            "melvorItA:Netherite_Throwing_Knife",
            "melvorItA:Twisted_Shortbow",
            "melvorItA:Plagueroot_Shortbow",
            "melvorItA:Shadebark_Shortbow",
            "melvorItA:Crumbletain_Shortbow",
            "melvorItA:Whisperwillow_Shortbow",
            "melvorItA:Twisted_Longbow",
            "melvorItA:Plagueroot_Longbow",
            "melvorItA:Shadebark_Longbow",
            "melvorItA:Crumbletain_Longbow",
            "melvorItA:Whisperwillow_Longbow",
            "melvorItA:Abyssium_Javelin",
            "melvorItA:Brumite_Javelin",
            "melvorItA:Gloomite_Javelin",
            "melvorItA:Witherite_Javelin",
            "melvorItA:Netherite_Javelin",
            "melvorItA:Abyssium_Crossbow",
            "melvorItA:Brumite_Crossbow",
            "melvorItA:Gloomite_Crossbow",
            "melvorItA:Witherite_Crossbow",
            "melvorItA:Netherite_Crossbow",
            "melvorItA:Abyssal_Staff",
            "melvorItA:Brume_Staff",
            "melvorItA:Gloom_Staff",
            "melvorItA:Wither_Staff",
            "melvorItA:Nether_Staff",
            "melvorItA:Abyssal_Wand",
            "melvorItA:Brume_Wand",
            "melvorItA:Gloom_Wand",
            "melvorItA:Wither_Wand",
            "melvorItA:Nether_Wand",
            "melvorItA:Desolation_Wand",
            "melvorItA:Cataclysm_Wand",
            "melvorItA:Lacerating_Dagger",
            "melvorItA:Lacerating_Shortbow",
            "melvorItA:Lacerating_Staff",
            "melvorItA:Abyssal_Hourglass_Upright",
            "melvorItA:Abyssal_Hourglass_Inverted",
            "melvorItA:Abyssal_Scythe",
            "melvorItA:Blighted_Staff",
            "melvorItA:Blighted_Claw",
            "melvorItA:Toxic_Blast_Crossbow",
            "melvorItA:Toxic_Fumes_Wand",
            "melvorItA:Blighted_Feather_Bow",
            "melvorItA:Blighted_2H_Hook_Sword",
            "melvorItA:Blight_Burst_Staff",
            "melvorItA:Shadow_Dagger",
            "melvorItA:Shadow_Wand",
            "melvorItA:Shadow_Throwing_Knife",
            "melvorItA:Witherslinger_Crossbow",
            "melvorItA:Witherstab_Rapier",
            "melvorItA:Witherbind_Wand",
            "melvorItA:Silentsnap_Crab_Claw",
            "melvorItA:Silent_Surge_Crossblade",
            "melvorItA:Silent_Tangle_Wand",
            "melvorItA:Stinging_Silence_Crossbow",
            "melvorItA:Hollow_Reaper_Scythe",
            "melvorItA:Hollow_Nightmare_Bow",
            "melvorItA:Hollow_Doom_Staff",
            "melvorItA:Void_Vortex_Whip",
            "melvorItA:Voidfire_Cascade_Wand",
            "melvorItA:Voidburst_Barrage_Crossbow",
            "melvorItA:Blighting_Polearm",
            "melvorItA:Fear_Hunter_Whip",
            "melvorItA:Blazing_Shadow_Staff",
            "melvorItA:Open_Wounds_Greatsword",
            "melvorItA:Malevolent_Blight_Longbow",
            "melvorItA:Bobs_Lost_Rake",
            "melvorItA:Eternity_Sword_Uncharged",
            "melvorItA:Eternity_Sword",
            "melvorItA:Eternity_Staff_Uncharged",
            "melvorItA:Eternity_Staff",
            "melvorItA:Eternity_Bow_Uncharged",
            "melvorItA:Eternity_Bow",
            "melvorItA:ABYSSAL_DEBUG_STICK"
          ]
        }
      ]
    },
    "FoodItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Empty_Food",
            "melvorD:Shrimp",
            "melvorD:Sardine",
            "melvorD:Herring",
            "melvorD:Trout",
            "melvorD:Salmon",
            "melvorD:Lobster",
            "melvorD:Swordfish",
            "melvorD:Crab",
            "melvorD:Shark",
            "melvorD:Cave_Fish",
            "melvorD:Manta_Ray",
            "melvorD:Whale",
            "melvorD:Potatoes",
            "melvorD:Onions",
            "melvorD:Cabbage",
            "melvorD:Tomatoes",
            "melvorD:Sweetcorn",
            "melvorD:Strawberries",
            "melvorD:Watermelon",
            "melvorD:Snape_Grass",
            "melvorD:Carrot",
            "melvorD:Raw_Magic_Fish",
            "melvorD:Anglerfish",
            "melvorD:Fanfish",
            "melvorD:Seahorse",
            "melvorD:Carp",
            "melvorD:Lemonade",
            "melvorD:Birthday_Cake",
            "melvorD:Bread",
            "melvorD:Beef",
            "melvorD:Chicken",
            "melvorD:Plain_Pizza_Slice",
            "melvorD:Beef_Pie",
            "melvorD:Meat_Pizza_Slice",
            "melvorD:Basic_Soup",
            "melvorD:Strawberry_Cupcake",
            "melvorD:Hearty_Soup",
            "melvorD:Cherry_Cupcake",
            "melvorD:Cream_Corn_Soup",
            "melvorD:Chicken_Soup",
            "melvorD:Strawberry_Cake",
            "melvorD:Carrot_Cake",
            "melvorD:Shrimp_Perfect",
            "melvorD:Sardine_Perfect",
            "melvorD:Herring_Perfect",
            "melvorD:Seahorse_Perfect",
            "melvorD:Trout_Perfect",
            "melvorD:Salmon_Perfect",
            "melvorD:Lobster_Perfect",
            "melvorD:Swordfish_Perfect",
            "melvorD:Anglerfish_Perfect",
            "melvorD:Fanfish_Perfect",
            "melvorD:Crab_Perfect",
            "melvorD:Carp_Perfect",
            "melvorD:Shark_Perfect",
            "melvorD:Cave_Fish_Perfect",
            "melvorD:Manta_Ray_Perfect",
            "melvorD:Whale_Perfect",
            "melvorD:Bread_Perfect",
            "melvorD:Beef_Perfect",
            "melvorD:Chicken_Perfect",
            "melvorD:Plain_Pizza_Slice_Perfect",
            "melvorD:Beef_Pie_Perfect",
            "melvorD:Meat_Pizza_Slice_Perfect",
            "melvorD:Basic_Soup_Perfect",
            "melvorD:Strawberry_Cupcake_Perfect",
            "melvorD:Hearty_Soup_Perfect",
            "melvorD:Cherry_Cupcake_Perfect",
            "melvorD:Cream_Corn_Soup_Perfect",
            "melvorD:Chicken_Soup_Perfect",
            "melvorD:Strawberry_Cake_Perfect",
            "melvorD:Carrot_Cake_Perfect",
            "melvorD:Cherry",
            "melvorD:Gingerbread_House",
            "melvorD:Gingerbread_Man",
            "melvorD:Edible_Candy_Cane",
            "melvorF:Apple",
            "melvorF:Apple_Pie",
            "melvorF:Lemon_Cake",
            "melvorF:Apple_Pie_Perfect",
            "melvorF:Lemon_Cake_Perfect",
            "melvorF:Birthday_Cake_2023",
            "melvorF:Birthday_Cake_Slice",
            "melvorTotH:Lava_Fish",
            "melvorTotH:Lava_Fish_Perfect",
            "melvorTotH:Blue_Crab",
            "melvorTotH:Blue_Crab_Perfect",
            "melvorTotH:Magma_Fish",
            "melvorTotH:Magma_Fish_Perfect",
            "melvorTotH:Static_Jellyfish",
            "melvorTotH:Static_Jellyfish_Perfect",
            "melvorTotH:Magma_Eel",
            "melvorTotH:Magma_Eel_Perfect",
            "melvorTotH:Frost_Crab",
            "melvorTotH:Frost_Crab_Perfect",
            "melvorTotH:Frozen_Manta_Ray",
            "melvorTotH:Frozen_Manta_Ray_Perfect",
            "melvorTotH:Terrorfish",
            "melvorTotH:Terrorfish_Perfect",
            "melvorTotH:Mystic_Shark",
            "melvorTotH:Mystic_Shark_Perfect",
            "melvorTotH:Banana_Bread",
            "melvorTotH:Banana_Bread_Perfect",
            "melvorTotH:Mushroom_Soup",
            "melvorTotH:Mushroom_Soup_Perfect",
            "melvorTotH:Spicy_Chicken_Pizza",
            "melvorTotH:Spicy_Chicken_Pizza_Perfect",
            "melvorTotH:Beef_Mushroom_Stew",
            "melvorTotH:Beef_Mushroom_Stew_Perfect",
            "melvorTotH:Sandwich",
            "melvorTotH:Sandwich_Perfect",
            "melvorTotH:Pumpkin_Soup",
            "melvorTotH:Pumpkin_Soup_Perfect",
            "melvorTotH:Spicy_Shrimp_Soup",
            "melvorTotH:Spicy_Shrimp_Soup_Perfect",
            "melvorTotH:Fancy_Meat_Pizza",
            "melvorTotH:Fancy_Meat_Pizza_Perfect",
            "melvorTotH:Chicken_Cream_Mushroom_Soup",
            "melvorTotH:Chicken_Cream_Mushroom_Soup_Perfect",
            "melvorTotH:Chilli_Frost_Crab",
            "melvorTotH:Chilli_Frost_Crab_Perfect",
            "melvorTotH:Starfruit_Cake",
            "melvorTotH:Starfruit_Cake_Perfect",
            "melvorTotH:Pumpkin",
            "melvorTotH:Chilli",
            "melvorTotH:Mushrooms",
            "melvorTotH:Starfruit",
            "melvorTotH:Bananas",
            "melvorTotH:Lemonade_Full",
            "melvorAoD:Stale_Bread",
            "melvorAoD:Ancient_Wildberry",
            "melvorAoD:Ancient_Corn",
            "melvorAoD:Ancient_Carrot",
            "melvorAoD:Mackerel",
            "melvorAoD:Mackerel_Perfect",
            "melvorAoD:Halibut",
            "melvorAoD:Halibut_Perfect",
            "melvorAoD:Tilapia",
            "melvorAoD:Tilapia_Perfect",
            "melvorItA:Crimson_Biter",
            "melvorItA:Crimson_Biter_Perfect",
            "melvorItA:Crimson_Bream",
            "melvorItA:Crimson_Bream_Perfect",
            "melvorItA:Veilhunter",
            "melvorItA:Veilhunter_Perfect",
            "melvorItA:Steamswimmer",
            "melvorItA:Steamswimmer_Perfect",
            "melvorItA:Toxic_Crab",
            "melvorItA:Toxic_Crab_Perfect",
            "melvorItA:Toxic_Octopus",
            "melvorItA:Toxic_Octopus_Perfect",
            "melvorItA:Stoneskin_Pike",
            "melvorItA:Stoneskin_Pike_Perfect",
            "melvorItA:Whisperfish",
            "melvorItA:Whisperfish_Perfect",
            "melvorItA:Murmurclaw",
            "melvorItA:Murmurclaw_Perfect",
            "melvorItA:Depthlurker",
            "melvorItA:Depthlurker_Perfect",
            "melvorItA:Hushscale",
            "melvorItA:Hushscale_Perfect",
            "melvorItA:Deep_Squid",
            "melvorItA:Deep_Squid_Perfect",
            "melvorItA:Voidfish",
            "melvorItA:Voidfish_Perfect",
            "melvorItA:Void_Ray",
            "melvorItA:Void_Ray_Perfect",
            "melvorItA:Baked_Biter_Pie",
            "melvorItA:Baked_Biter_Pie_Perfect",
            "melvorItA:Abyssal_Pumpkin_Pie",
            "melvorItA:Abyssal_Pumpkin_Pie_Perfect",
            "melvorItA:Stoneskin_Pepper",
            "melvorItA:Stoneskin_Pepper_Perfect",
            "melvorItA:Shadenut_Cookie",
            "melvorItA:Shadenut_Cookie_Perfect",
            "melvorItA:Whisperfish_Pizza",
            "melvorItA:Whisperfish_Pizza_Perfect",
            "melvorItA:Withermelon_Tart",
            "melvorItA:Withermelon_Tart_Perfect",
            "melvorItA:Hushscale_Pepper",
            "melvorItA:Hushscale_Pepper_Perfect",
            "melvorItA:Eldraberry_Pie",
            "melvorItA:Eldraberry_Pie_Perfect",
            "melvorItA:Crimson_Bream_Soup",
            "melvorItA:Crimson_Bream_Soup_Perfect",
            "melvorItA:Steamswimmer_Soup",
            "melvorItA:Steamswimmer_Soup_Perfect",
            "melvorItA:Toxic_Crab_Cream_Soup",
            "melvorItA:Toxic_Crab_Cream_Soup_Perfect",
            "melvorItA:Toxic_Octopus_Stew",
            "melvorItA:Toxic_Octopus_Stew_Perfect",
            "melvorItA:Murmurclaw_Cream_Soup",
            "melvorItA:Murmurclaw_Cream_Soup_Perfect",
            "melvorItA:Whisperradish_Soup",
            "melvorItA:Whisperradish_Soup_Perfect",
            "melvorItA:Voidfish_Soup",
            "melvorItA:Voidfish_Soup_Perfect",
            "melvorItA:Void_Ray_Cream_Stew",
            "melvorItA:Void_Ray_Cream_Stew_Perfect",
            "melvorItA:Abyssal_Potato",
            "melvorItA:Abyssal_Pumpkin",
            "melvorItA:Gloompepper",
            "melvorItA:Shadenut",
            "melvorItA:Withermelon",
            "melvorItA:Whisperradish",
            "melvorItA:Eldraberry",
            "melvorItA:Celestial_Ray",
            "melvorItA:Celestial_Ray_Perfect"
          ]
        }
      ]
    },
    "BoneItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Bones",
            "melvorD:Dragon_Bones",
            "melvorD:Magic_Bones",
            "melvorD:Big_Bones",
            "melvorD:Raw_Skeleton_Fish",
            "melvorF:Holy_Dust",
            "melvorF:Ash",
            "melvorF:Small_Urn_Enchanted",
            "melvorF:Medium_Urn_Enchanted",
            "melvorTotH:Large_Urn_Enchanted",
            "melvorTotH:Infernal_Bones",
            "melvorAoD:Prayer_Idol",
            "melvorAoD:Crystal_Bones",
            "melvorAoD:Large_Crystal_Bones",
            "melvorAoD:Unholy_Dust",
            "melvorAoD:Cursed_Dust",
            "melvorAoD:Prayer_Statue"
          ]
        }
      ]
    },
    "PotionItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Melee_Accuracy_Potion_I",
            "melvorF:Melee_Accuracy_Potion_II",
            "melvorF:Melee_Accuracy_Potion_III",
            "melvorF:Melee_Accuracy_Potion_IV",
            "melvorF:Melee_Strength_Potion_I",
            "melvorF:Melee_Strength_Potion_II",
            "melvorF:Melee_Strength_Potion_III",
            "melvorF:Melee_Strength_Potion_IV",
            "melvorF:Melee_Evasion_Potion_I",
            "melvorF:Melee_Evasion_Potion_II",
            "melvorF:Melee_Evasion_Potion_III",
            "melvorF:Melee_Evasion_Potion_IV",
            "melvorF:Ranged_Assistance_Potion_I",
            "melvorF:Ranged_Assistance_Potion_II",
            "melvorF:Ranged_Assistance_Potion_III",
            "melvorF:Ranged_Assistance_Potion_IV",
            "melvorF:Magic_Assistance_Potion_I",
            "melvorF:Magic_Assistance_Potion_II",
            "melvorF:Magic_Assistance_Potion_III",
            "melvorF:Magic_Assistance_Potion_IV",
            "melvorF:Regeneration_Potion_I",
            "melvorF:Regeneration_Potion_II",
            "melvorF:Regeneration_Potion_III",
            "melvorF:Regeneration_Potion_IV",
            "melvorF:Damage_Reduction_Potion_I",
            "melvorF:Damage_Reduction_Potion_II",
            "melvorF:Damage_Reduction_Potion_III",
            "melvorF:Damage_Reduction_Potion_IV",
            "melvorF:Bird_Nest_Potion_I",
            "melvorF:Bird_Nest_Potion_II",
            "melvorF:Bird_Nest_Potion_III",
            "melvorF:Bird_Nest_Potion_IV",
            "melvorF:Fishermans_Potion_I",
            "melvorF:Fishermans_Potion_II",
            "melvorF:Fishermans_Potion_III",
            "melvorF:Fishermans_Potion_IV",
            "melvorF:Controlled_Heat_Potion_I",
            "melvorF:Controlled_Heat_Potion_II",
            "melvorF:Controlled_Heat_Potion_III",
            "melvorF:Controlled_Heat_Potion_IV",
            "melvorF:Generous_Cook_Potion_I",
            "melvorF:Generous_Cook_Potion_II",
            "melvorF:Generous_Cook_Potion_III",
            "melvorF:Generous_Cook_Potion_IV",
            "melvorF:Perfect_Swing_Potion_I",
            "melvorF:Perfect_Swing_Potion_II",
            "melvorF:Perfect_Swing_Potion_III",
            "melvorF:Perfect_Swing_Potion_IV",
            "melvorF:Seeing_Gold_Potion_I",
            "melvorF:Seeing_Gold_Potion_II",
            "melvorF:Seeing_Gold_Potion_III",
            "melvorF:Seeing_Gold_Potion_IV",
            "melvorF:Gentle_Hands_Potion_I",
            "melvorF:Gentle_Hands_Potion_II",
            "melvorF:Gentle_Hands_Potion_III",
            "melvorF:Gentle_Hands_Potion_IV",
            "melvorF:Farming_Potion_I",
            "melvorF:Farming_Potion_II",
            "melvorF:Farming_Potion_III",
            "melvorF:Farming_Potion_IV",
            "melvorF:Fletching_Potion_I",
            "melvorF:Fletching_Potion_II",
            "melvorF:Fletching_Potion_III",
            "melvorF:Fletching_Potion_IV",
            "melvorF:Crafting_Potion_I",
            "melvorF:Crafting_Potion_II",
            "melvorF:Crafting_Potion_III",
            "melvorF:Crafting_Potion_IV",
            "melvorF:Elemental_Potion_I",
            "melvorF:Elemental_Potion_II",
            "melvorF:Elemental_Potion_III",
            "melvorF:Elemental_Potion_IV",
            "melvorF:Herblore_Potion_I",
            "melvorF:Herblore_Potion_II",
            "melvorF:Herblore_Potion_III",
            "melvorF:Herblore_Potion_IV",
            "melvorF:Ranged_Strength_Potion_I",
            "melvorF:Ranged_Strength_Potion_II",
            "melvorF:Ranged_Strength_Potion_III",
            "melvorF:Ranged_Strength_Potion_IV",
            "melvorF:Magic_Damage_Potion_I",
            "melvorF:Magic_Damage_Potion_II",
            "melvorF:Magic_Damage_Potion_III",
            "melvorF:Magic_Damage_Potion_IV",
            "melvorF:Diamond_Luck_Potion_I",
            "melvorF:Diamond_Luck_Potion_II",
            "melvorF:Diamond_Luck_Potion_III",
            "melvorF:Diamond_Luck_Potion_IV",
            "melvorF:Divine_Potion_I",
            "melvorF:Divine_Potion_II",
            "melvorF:Divine_Potion_III",
            "melvorF:Divine_Potion_IV",
            "melvorF:Lucky_Herb_Potion_I",
            "melvorF:Lucky_Herb_Potion_II",
            "melvorF:Lucky_Herb_Potion_III",
            "melvorF:Lucky_Herb_Potion_IV",
            "melvorF:Performance_Enhancing_Potion_I",
            "melvorF:Performance_Enhancing_Potion_II",
            "melvorF:Performance_Enhancing_Potion_III",
            "melvorF:Performance_Enhancing_Potion_IV",
            "melvorF:Necromancer_Potion_I",
            "melvorF:Necromancer_Potion_II",
            "melvorF:Necromancer_Potion_III",
            "melvorF:Necromancer_Potion_IV",
            "melvorF:Hinder_Potion_I",
            "melvorF:Hinder_Potion_II",
            "melvorF:Hinder_Potion_III",
            "melvorF:Hinder_Potion_IV",
            "melvorF:Famished_Potion_I",
            "melvorF:Famished_Potion_II",
            "melvorF:Famished_Potion_III",
            "melvorF:Famished_Potion_IV",
            "melvorF:Lethal_Toxins_Potion_I",
            "melvorF:Lethal_Toxins_Potion_II",
            "melvorF:Lethal_Toxins_Potion_III",
            "melvorF:Lethal_Toxins_Potion_IV",
            "melvorF:Secret_Stardust_Potion_I",
            "melvorF:Secret_Stardust_Potion_II",
            "melvorF:Secret_Stardust_Potion_III",
            "melvorF:Secret_Stardust_Potion_IV",
            "melvorTotH:Area_Control_Potion_I",
            "melvorTotH:Area_Control_Potion_II",
            "melvorTotH:Area_Control_Potion_III",
            "melvorTotH:Area_Control_Potion_IV",
            "melvorTotH:Adaptive_Defence_Potion_I",
            "melvorTotH:Adaptive_Defence_Potion_II",
            "melvorTotH:Adaptive_Defence_Potion_III",
            "melvorTotH:Adaptive_Defence_Potion_IV",
            "melvorTotH:Slayer_Bounty_Potion_I",
            "melvorTotH:Slayer_Bounty_Potion_II",
            "melvorTotH:Slayer_Bounty_Potion_III",
            "melvorTotH:Slayer_Bounty_Potion_IV",
            "melvorTotH:Holy_Bulwark_Potion_I",
            "melvorTotH:Holy_Bulwark_Potion_II",
            "melvorTotH:Holy_Bulwark_Potion_III",
            "melvorTotH:Holy_Bulwark_Potion_IV",
            "melvorTotH:Adaptive_Accuracy_Potion_I",
            "melvorTotH:Adaptive_Accuracy_Potion_II",
            "melvorTotH:Adaptive_Accuracy_Potion_III",
            "melvorTotH:Adaptive_Accuracy_Potion_IV",
            "melvorTotH:Reaper_Potion_I",
            "melvorTotH:Reaper_Potion_II",
            "melvorTotH:Reaper_Potion_III",
            "melvorTotH:Reaper_Potion_IV",
            "melvorTotH:Penetration_Potion_I",
            "melvorTotH:Penetration_Potion_II",
            "melvorTotH:Penetration_Potion_III",
            "melvorTotH:Penetration_Potion_IV",
            "melvorTotH:Critical_Strike_Potion_I",
            "melvorTotH:Critical_Strike_Potion_II",
            "melvorTotH:Critical_Strike_Potion_III",
            "melvorTotH:Critical_Strike_Potion_IV",
            "melvorTotH:Alchemic_Practice_Potion_I",
            "melvorTotH:Alchemic_Practice_Potion_II",
            "melvorTotH:Alchemic_Practice_Potion_III",
            "melvorTotH:Alchemic_Practice_Potion_IV",
            "melvorTotH:Gem_Detector_Potion_I",
            "melvorTotH:Gem_Detector_Potion_II",
            "melvorTotH:Gem_Detector_Potion_III",
            "melvorTotH:Gem_Detector_Potion_IV",
            "melvorTotH:Star_Seeker_Potion_I",
            "melvorTotH:Star_Seeker_Potion_II",
            "melvorTotH:Star_Seeker_Potion_III",
            "melvorTotH:Star_Seeker_Potion_IV",
            "melvorTotH:Traps_Potion_I",
            "melvorTotH:Traps_Potion_II",
            "melvorTotH:Traps_Potion_III",
            "melvorTotH:Traps_Potion_IV",
            "melvorTotH:Blacksmith_Potion_I",
            "melvorTotH:Blacksmith_Potion_II",
            "melvorTotH:Blacksmith_Potion_III",
            "melvorTotH:Blacksmith_Potion_IV",
            "melvorTotH:Enkindled_Yields_Potion_I",
            "melvorTotH:Enkindled_Yields_Potion_II",
            "melvorTotH:Enkindled_Yields_Potion_III",
            "melvorTotH:Enkindled_Yields_Potion_IV",
            "melvorTotH:Alt_Magic_Potion_I",
            "melvorTotH:Alt_Magic_Potion_II",
            "melvorTotH:Alt_Magic_Potion_III",
            "melvorTotH:Alt_Magic_Potion_IV",
            "melvorTotH:Multicooker_Potion_I",
            "melvorTotH:Multicooker_Potion_II",
            "melvorTotH:Multicooker_Potion_III",
            "melvorTotH:Multicooker_Potion_IV",
            "melvorTotH:Deadly_Toxins_Potion",
            "melvorAoD:Harming_Potion",
            "melvorAoD:Barrier_Touch_Potion_I",
            "melvorAoD:Barrier_Touch_Potion_II",
            "melvorAoD:Barrier_Touch_Potion_III",
            "melvorAoD:Barrier_Touch_Potion_IV",
            "melvorAoD:Barrier_Igniter_Potion_I",
            "melvorAoD:Barrier_Igniter_Potion_II",
            "melvorAoD:Barrier_Igniter_Potion_III",
            "melvorAoD:Barrier_Igniter_Potion_IV",
            "melvorAoD:Unholy_Potion_I",
            "melvorAoD:Unholy_Potion_II",
            "melvorAoD:Unholy_Potion_III",
            "melvorAoD:Unholy_Potion_IV",
            "melvorAoD:Cursed_Potion_I",
            "melvorAoD:Cursed_Potion_II",
            "melvorAoD:Cursed_Potion_III",
            "melvorAoD:Cursed_Potion_IV",
            "melvorAoD:Crystallization_Potion_I",
            "melvorAoD:Crystallization_Potion_II",
            "melvorAoD:Crystallization_Potion_III",
            "melvorAoD:Crystallization_Potion_IV",
            "melvorAoD:Crystal_Sanction_Potion_I",
            "melvorAoD:Crystal_Sanction_Potion_II",
            "melvorAoD:Crystal_Sanction_Potion_III",
            "melvorAoD:Crystal_Sanction_Potion_IV",
            "melvorItA:Harvesters_Potion_I",
            "melvorItA:Harvesters_Potion_II",
            "melvorItA:Harvesters_Potion_III",
            "melvorItA:Harvesters_Potion_IV",
            "melvorItA:Piece_Finder_Potion_I",
            "melvorItA:Piece_Finder_Potion_II",
            "melvorItA:Piece_Finder_Potion_III",
            "melvorItA:Piece_Finder_Potion_IV",
            "melvorItA:Gloomgrowth_Potion_I",
            "melvorItA:Gloomgrowth_Potion_II",
            "melvorItA:Gloomgrowth_Potion_III",
            "melvorItA:Gloomgrowth_Potion_IV",
            "melvorItA:Abyssal_Miner_Potion_I",
            "melvorItA:Abyssal_Miner_Potion_II",
            "melvorItA:Abyssal_Miner_Potion_III",
            "melvorItA:Abyssal_Miner_Potion_IV",
            "melvorItA:Abyssal_Combination_Potion_I",
            "melvorItA:Abyssal_Combination_Potion_II",
            "melvorItA:Abyssal_Combination_Potion_III",
            "melvorItA:Abyssal_Combination_Potion_IV",
            "melvorItA:Abyssal_Consumable_Potion_I",
            "melvorItA:Abyssal_Consumable_Potion_II",
            "melvorItA:Abyssal_Consumable_Potion_III",
            "melvorItA:Abyssal_Consumable_Potion_IV",
            "melvorItA:Silent_Thief_Potion_I",
            "melvorItA:Silent_Thief_Potion_II",
            "melvorItA:Silent_Thief_Potion_III",
            "melvorItA:Silent_Thief_Potion_IV",
            "melvorItA:Echoing_Lure_Potion_I",
            "melvorItA:Echoing_Lure_Potion_II",
            "melvorItA:Echoing_Lure_Potion_III",
            "melvorItA:Echoing_Lure_Potion_IV",
            "melvorItA:Corrupted_Fighter_Potion_I",
            "melvorItA:Corrupted_Fighter_Potion_II",
            "melvorItA:Corrupted_Fighter_Potion_III",
            "melvorItA:Corrupted_Fighter_Potion_IV",
            "melvorItA:Laceration_Potion_I",
            "melvorItA:Laceration_Potion_II",
            "melvorItA:Laceration_Potion_III",
            "melvorItA:Laceration_Potion_IV",
            "melvorItA:Blighted_Touch_Potion_I",
            "melvorItA:Blighted_Touch_Potion_II",
            "melvorItA:Blighted_Touch_Potion_III",
            "melvorItA:Blighted_Touch_Potion_IV",
            "melvorItA:Shadeveil_Potion_I",
            "melvorItA:Shadeveil_Potion_II",
            "melvorItA:Shadeveil_Potion_III",
            "melvorItA:Shadeveil_Potion_IV",
            "melvorItA:Fear_Potion_I",
            "melvorItA:Fear_Potion_II",
            "melvorItA:Fear_Potion_III",
            "melvorItA:Fear_Potion_IV",
            "melvorItA:Withering_Potion_I",
            "melvorItA:Withering_Potion_II",
            "melvorItA:Withering_Potion_III",
            "melvorItA:Withering_Potion_IV",
            "melvorItA:Silence_Potion_I",
            "melvorItA:Silence_Potion_II",
            "melvorItA:Silence_Potion_III",
            "melvorItA:Silence_Potion_IV",
            "melvorItA:Soulsnap_Potion_I",
            "melvorItA:Soulsnap_Potion_II",
            "melvorItA:Soulsnap_Potion_III",
            "melvorItA:Soulsnap_Potion_IV",
            "melvorItA:Eldritch_Curse_Potion_I",
            "melvorItA:Eldritch_Curse_Potion_II",
            "melvorItA:Eldritch_Curse_Potion_III",
            "melvorItA:Eldritch_Curse_Potion_IV",
            "melvorItA:Voidburst_Potion_I",
            "melvorItA:Voidburst_Potion_II",
            "melvorItA:Voidburst_Potion_III",
            "melvorItA:Voidburst_Potion_IV",
            "melvorItA:Dark_Ritual_Potion_I",
            "melvorItA:Dark_Ritual_Potion_II",
            "melvorItA:Dark_Ritual_Potion_III",
            "melvorItA:Dark_Ritual_Potion_IV",
            "melvorItA:Void_Stabilisation_Potion_I",
            "melvorItA:Void_Stabilisation_Potion_II",
            "melvorItA:Void_Stabilisation_Potion_III",
            "melvorItA:Void_Stabilisation_Potion_IV"
          ]
        }
      ]
    },
    "ReadableItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Message_In_A_Bottle",
            "melvorD:Futures_Prophecy",
            "melvorF:Unknown_Evil",
            "melvorF:New_Dawn",
            "melvorF:Merchants_Permit",
            "melvorF:Beginning_Of_The_End",
            "melvorF:Impending_Darkness",
            "melvorF:Clue_Scroll_1",
            "melvorF:Clue_Scroll_2",
            "melvorF:Clue_Scroll_3",
            "melvorF:Clue_Scroll_4",
            "melvorF:Clue_Scroll_5",
            "melvorF:Clue_Scroll_6",
            "melvorAoD:Melantis_Clue_1",
            "melvorAoD:Melantis_Clue_2",
            "melvorAoD:Melantis_Clue_3",
            "melvorAoD:Melantis_Clue_4"
          ]
        }
      ]
    },
    "OpenableItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Frozen_Chest",
            "melvorD:Chest_of_Witwix",
            "melvorD:Bird_Nest",
            "melvorD:Treasure_Chest",
            "melvorD:Egg_Chest",
            "melvorD:Pirate_Booty",
            "melvorD:Elite_Chest",
            "melvorD:Spider_Chest",
            "melvorD:Standard_Chest",
            "melvorD:Bandit_Chest",
            "melvorD:Christmas_Present_Yellow",
            "melvorD:Christmas_Present_Blue",
            "melvorD:Christmas_Present_Green",
            "melvorD:Christmas_Present_White",
            "melvorD:Christmas_Present_Purple",
            "melvorD:Christmas_Present_General",
            "melvorD:Locked_Chest",
            "melvorD:Magic_Chest",
            "melvorD:Generous_Fire_Spirit",
            "melvorF:Herb_Sack",
            "melvorF:Elder_Chest",
            "melvorF:Crate_Of_Basic_Supplies",
            "melvorF:Crate_Of_Food",
            "melvorF:Stack_Of_Bones",
            "melvorF:Pile_Of_Logs",
            "melvorF:Pile_Of_Ores",
            "melvorF:Chest_Of_Gems",
            "melvorF:Air_Chest",
            "melvorF:Water_Chest",
            "melvorF:Earth_Chest",
            "melvorF:Fire_Chest",
            "melvorF:Scroll_of_Aeris",
            "melvorF:Scroll_of_Glacia",
            "melvorF:Scroll_of_Terran",
            "melvorF:Scroll_of_Ragnar",
            "melvorF:Miolite_Chest",
            "melvorF:Food_Box_I",
            "melvorF:Food_Box_II",
            "melvorF:Wood_Box_I",
            "melvorF:Wood_Box_II",
            "melvorF:Ore_Box_I",
            "melvorF:Ore_Box_II",
            "melvorF:Bar_Box_I",
            "melvorF:Bar_Box_II",
            "melvorF:Herb_Box_I",
            "melvorF:Herb_Box_II",
            "melvorF:Potion_Box_I",
            "melvorF:Potion_Box_II",
            "melvorF:Birthday_Present_Artisan",
            "melvorF:Birthday_Present_Utility",
            "melvorF:Birthday_Present_Gathering",
            "melvorF:Birthday_Present_Combat",
            "melvorF:Undead_Enhancement_Scroll",
            "melvorF:Undead_Enhancement_Scroll_Augmented",
            "melvorF:Magic_Enhancement_Scroll",
            "melvorF:Magic_Enhancement_Scroll_Augmented",
            "melvorF:Dragon_Enhancement_Scroll",
            "melvorF:Dragon_Enhancement_Scroll_Augmented",
            "melvorF:Gods_Enhancement_Scroll",
            "melvorF:Gods_Enhancement_Scroll_Augmented",
            "melvorTotH:Raven_Nest",
            "melvorTotH:Golden_Chest",
            "melvorTotH:Crate_of_Lost_Supplies",
            "melvorTotH:Ancient_Chest",
            "melvorTotH:Burning_Chest",
            "melvorTotH:Static_Chest",
            "melvorTotH:Webbed_Chest",
            "melvorTotH:Cursed_Chest",
            "melvorTotH:Bone_Chest",
            "melvorTotH:Exotic_Herb_Sack",
            "melvorTotH:Lost_Chest",
            "melvorTotH:Food_Box_III",
            "melvorTotH:Wood_Box_III",
            "melvorTotH:Ore_Box_III",
            "melvorTotH:Bar_Box_III",
            "melvorTotH:Herb_Box_III",
            "melvorTotH:Potion_Box_III",
            "melvorAoD:Golden_Crate",
            "melvorAoD:Gold_Bar_Coffer",
            "melvorAoD:Bag_of_Coal",
            "melvorAoD:Cursed_Rune_Pouch",
            "melvorAoD:Bag_of_Shards",
            "melvorAoD:Stack_Of_Big_Bones",
            "melvorAoD:Stack_Of_Small_Bones",
            "melvorAoD:Old_Carriage",
            "melvorAoD:Old_Barrel",
            "melvorAoD:Small_Lockbox",
            "melvorAoD:Trader_Crate",
            "melvorAoD:Old_Pirate_Treasure",
            "melvorAoD:Old_Pirate_Treasure_Map",
            "melvorAoD:Golden_Flute",
            "melvorAoD:Toppled_Minecart",
            "melvorAoD:Golem_Chest",
            "melvorAoD:Treacherous_Chest",
            "melvorAoD:Unholy_Trees_Chest",
            "melvorAoD:Torn_Parchment",
            "melvorAoD:Ritual_Chest",
            "melvorAoD:Trickery_Chest",
            "melvorItA:Shadow_Raven_Nest",
            "melvorItA:Shadow_Drake_Nest",
            "melvorItA:Abyssal_Vein_Pod",
            "melvorItA:Twisted_Vein_Pod",
            "melvorItA:Gloom_Vein_Pod",
            "melvorItA:Shadow_Vein_Pod",
            "melvorItA:Obsidian_Vein_Pod",
            "melvorItA:Voidfire_Vein_Pod",
            "melvorItA:Unlocked_Maze_Chest",
            "melvorItA:Old_Casket",
            "melvorItA:Soul_Stone",
            "melvorItA:Woeful_Chest",
            "melvorItA:Decaying_Chest",
            "melvorItA:Fearful_Chest",
            "melvorItA:Ruined_Chest",
            "melvorItA:Isolated_Chest",
            "melvorItA:Dissolving_Chest",
            "melvorItA:Resolute_Chest",
            "melvorItA:Blighted_Enhancement_Scroll",
            "melvorItA:Blighted_Enhancement_Scroll_Augmented",
            "melvorItA:Fear_Enhancement_Scroll",
            "melvorItA:Fear_Enhancement_Scroll_Augmented",
            "melvorItA:Nightmare_Enhancement_Scroll",
            "melvorItA:Nightmare_Enhancement_Scroll_Augmented",
            "melvorItA:Overlords_Enhancement_Scroll",
            "melvorItA:Overlords_Enhancement_Scroll_Augmented",
            "melvorItA:Abyssal_Fishing_Chest",
            "melvorItA:Harvesting_Chest",
            "melvorItA:Eternity_Nest",
            "melvorItA:Unknown_Chest"
          ]
        }
      ]
    },
    "TokenItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Bank_Slot_Token"
          ]
        }
      ]
    },
    "CompostItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Compost",
            "melvorD:Weird_Gloop",
            "melvorItA:Abyssal_Compost"
          ]
        }
      ]
    },
    "SoulItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorItA:Weak_Soul",
            "melvorItA:Lesser_Soul",
            "melvorItA:Potent_Soul",
            "melvorItA:Greater_Soul",
            "melvorItA:Ethereal_Soul"
          ]
        }
      ]
    },
    "RuneItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Air_Rune",
            "melvorD:Mind_Rune",
            "melvorD:Water_Rune",
            "melvorD:Earth_Rune",
            "melvorD:Fire_Rune",
            "melvorD:Body_Rune",
            "melvorD:Chaos_Rune",
            "melvorD:Death_Rune",
            "melvorD:Blood_Rune",
            "melvorD:Ancient_Rune",
            "melvorD:Light_Rune",
            "melvorD:Mist_Rune",
            "melvorD:Dust_Rune",
            "melvorD:Smoke_Rune",
            "melvorF:Nature_Rune",
            "melvorF:Havoc_Rune",
            "melvorF:Spirit_Rune",
            "melvorF:Mud_Rune",
            "melvorF:Steam_Rune",
            "melvorF:Lava_Rune",
            "melvorTotH:Poison_Rune",
            "melvorTotH:Decay_Rune",
            "melvorTotH:Infernal_Rune",
            "melvorTotH:Despair_Rune",
            "melvorTotH:Soul_Rune",
            "melvorTotH:Lightning_Rune",
            "melvorTotH:Archaic_Rune",
            "melvorTotH:Calamity_Rune",
            "melvorItA:Abyss_Rune",
            "melvorItA:Brume_Rune",
            "melvorItA:Gloom_Rune",
            "melvorItA:Wither_Rune",
            "melvorItA:Nether_Rune",
            "melvorItA:Eldritch_Rune",
            "melvorItA:Void_Rune",
            "melvorItA:Ire_Rune",
            "melvorItA:Fury_Rune",
            "melvorItA:Wrath_Rune",
            "melvorItA:Hollow_Rune",
            "melvorItA:Hex_Rune",
            "melvorItA:Desolate_Rune",
            "melvorItA:Cataclysm_Rune",
            "melvorItA:Shade_Rune",
            "melvorItA:Null_Rune",
            "melvorItA:Umbral_Rune",
            "melvorItA:Dread_Rune",
            "melvorItA:Scourge_Rune"
          ]
        }
      ]
    },
    "FiremakingOilItemID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorItA:Abyssal_Firemaking_Oil",
            "melvorItA:Twisted_Firemaking_Oil",
            "melvorItA:Gloom_Firemaking_Oil",
            "melvorItA:Shadow_Firemaking_Oil",
            "melvorItA:Obsidian_Firemaking_Oil",
            "melvorItA:Voidfire_Firemaking_Oil"
          ]
        }
      ]
    },
    "PageID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:ActiveSkill",
            "melvorD:TutorialIsland",
            "melvorD:Shop",
            "melvorD:Bank",
            "melvorD:Combat",
            "melvorD:Woodcutting",
            "melvorD:Fishing",
            "melvorD:Firemaking",
            "melvorD:Cooking",
            "melvorD:Mining",
            "melvorD:Smithing",
            "melvorD:Thieving",
            "melvorD:Farming",
            "melvorD:Fletching",
            "melvorD:Crafting",
            "melvorD:Runecrafting",
            "melvorD:Herblore",
            "melvorD:Agility",
            "melvorD:Summoning",
            "melvorD:Astrology",
            "melvorD:Township",
            "melvorD:AltMagic",
            "melvorD:GolbinRaid",
            "melvorD:CompletionLog",
            "melvorD:Lore",
            "melvorD:Statistics",
            "melvorD:Settings",
            "melvorAoD:Cartography",
            "melvorAoD:Archaeology",
            "melvorItA:Harvesting",
            "sailing:Sailing"
          ]
        }
      ]
    },
    "SkillID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Attack",
            "melvorD:Strength",
            "melvorD:Defence",
            "melvorD:Hitpoints",
            "melvorD:Ranged",
            "melvorD:Magic",
            "melvorD:Prayer",
            "melvorD:Slayer",
            "melvorD:Woodcutting",
            "melvorD:Fishing",
            "melvorD:Firemaking",
            "melvorD:Cooking",
            "melvorD:Mining",
            "melvorD:Smithing",
            "melvorD:Thieving",
            "melvorD:Farming",
            "melvorD:Fletching",
            "melvorD:Crafting",
            "melvorD:Runecrafting",
            "melvorD:Herblore",
            "melvorD:Agility",
            "melvorD:Summoning",
            "melvorD:Astrology",
            "melvorD:Township",
            "melvorD:Township2",
            "melvorAoD:Cartography",
            "melvorAoD:Archaeology",
            "melvorItA:Corruption",
            "melvorItA:Harvesting",
            "sailing:Sailing"
          ]
        }
      ]
    },
    "SkillWithMasteryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Woodcutting",
            "melvorD:Fishing",
            "melvorD:Firemaking",
            "melvorD:Cooking",
            "melvorD:Mining",
            "melvorD:Smithing",
            "melvorD:Thieving",
            "melvorD:Farming",
            "melvorD:Fletching",
            "melvorD:Crafting",
            "melvorD:Runecrafting",
            "melvorD:Herblore",
            "melvorD:Agility",
            "melvorD:Summoning",
            "melvorD:Astrology",
            "sailing:Sailing"
          ]
        }
      ]
    },
    "CurseID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:BlindingI",
            "melvorF:SoulSplitI",
            "melvorF:WeakeningI",
            "melvorF:AnguishI",
            "melvorF:BlindingII",
            "melvorF:SoulSplitII",
            "melvorF:WeakeningII",
            "melvorF:Confusion",
            "melvorF:AnguishII",
            "melvorF:BlindingIII",
            "melvorF:SoulSplitIII",
            "melvorF:WeakeningIII",
            "melvorF:AnguishIII",
            "melvorF:Decay",
            "melvorTotH:Madness",
            "melvorTotH:Torment",
            "melvorTotH:Despair",
            "melvorAoD:Fatigue",
            "melvorAoD:Petrified"
          ]
        }
      ]
    },
    "ShopCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:General",
            "melvorD:SkillUpgrades",
            "melvorD:Gloves",
            "melvorD:Skillcapes",
            "melvorD:Materials",
            "melvorD:GolbinRaid",
            "melvorF:Slayer",
            "melvorF:Township",
            "melvorTotH:SuperiorSkillcapes",
            "melvorAoD:AtlasOfDiscovery",
            "melvorItA:IntoTheAbyss",
            "melvorItA:AbyssalSlayer"
          ]
        }
      ]
    },
    "ShopPurchaseID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Extra_Bank_Slot",
            "melvorD:Auto_Eat_Tier_I",
            "melvorD:Auto_Eat_Tier_II",
            "melvorD:Auto_Eat_Tier_III",
            "melvorD:Extra_Equipment_Set_I",
            "melvorD:Dungeon_Equipment_Swapping",
            "melvorD:Multi_Tree",
            "melvorD:AutoEquipFood",
            "melvorD:AutoSwapFood",
            "melvorD:Iron_Axe",
            "melvorD:Steel_Axe",
            "melvorD:Black_Axe",
            "melvorD:Mithril_Axe",
            "melvorD:Adamant_Axe",
            "melvorD:Rune_Axe",
            "melvorD:Dragon_Axe",
            "melvorD:Iron_Fishing_Rod",
            "melvorD:Steel_Fishing_Rod",
            "melvorD:Black_Fishing_Rod",
            "melvorD:Mithril_Fishing_Rod",
            "melvorD:Adamant_Fishing_Rod",
            "melvorD:Rune_Fishing_Rod",
            "melvorD:Dragon_Fishing_Rod",
            "melvorD:Iron_Pickaxe",
            "melvorD:Steel_Pickaxe",
            "melvorD:Black_Pickaxe",
            "melvorD:Mithril_Pickaxe",
            "melvorD:Adamant_Pickaxe",
            "melvorD:Rune_Pickaxe",
            "melvorD:Dragon_Pickaxe",
            "melvorD:Normal_Cooking_Fire",
            "melvorD:Oak_Cooking_Fire",
            "melvorD:Willow_Cooking_Fire",
            "melvorD:Teak_Cooking_Fire",
            "melvorD:Maple_Cooking_Fire",
            "melvorD:Mahogany_Cooking_Fire",
            "melvorD:Yew_Cooking_Fire",
            "melvorD:Magic_Cooking_Fire",
            "melvorD:Redwood_Cooking_Fire",
            "melvorD:Basic_Furnace",
            "melvorD:Strong_Furnace",
            "melvorD:Magic_Furnace",
            "melvorD:Basic_Pot",
            "melvorD:Strong_Pot",
            "melvorD:Magic_Pot",
            "melvorD:Cooking",
            "melvorD:Mining",
            "melvorD:Smithing",
            "melvorD:Gem",
            "melvorD:Attack_Skillcape",
            "melvorD:Cooking_Skillcape",
            "melvorD:Defence_Skillcape",
            "melvorD:Farming_Skillcape",
            "melvorD:Firemaking_Skillcape",
            "melvorD:Fishing_Skillcape",
            "melvorD:Hitpoints_Skillcape",
            "melvorD:Mining_Skillcape",
            "melvorD:Smithing_Skillcape",
            "melvorD:Strength_Skillcape",
            "melvorD:Woodcutting_Skillcape",
            "melvorD:Bag_of_Flour",
            "melvorD:Cheese",
            "melvorD:Cream",
            "melvorD:Feathers",
            "melvorD:Compost",
            "melvorD:Weird_Gloop",
            "melvorD:Bowstring",
            "melvorD:Red_Party_Hat",
            "melvorD:SkipCostReduction",
            "melvorD:FoodBonus",
            "melvorD:AmmoBonus",
            "melvorD:RuneBonus",
            "melvorD:PrayerUnlock",
            "melvorD:PrayerLevel",
            "melvorD:WaveCompletionPrayerPoints",
            "melvorD:StartingPrayerPoints",
            "melvorD:PassiveUnlock",
            "melvorD:YellowPartyHat",
            "melvorD:Preston",
            "melvorD:Jerry",
            "melvorD:FasterSpawns",
            "melvorD:GolbinCrate",
            "melvorF:Stronghold_Equipment_Swapping",
            "melvorF:AgilityItemReduction",
            "melvorF:Extra_Equipment_Set_II",
            "melvorF:Extra_Equipment_Set_III",
            "melvorF:LootContainerStacking",
            "melvorF:Perpetual_Haste",
            "melvorF:Expanded_Knowledge",
            "melvorF:Master_of_Nature",
            "melvorF:Art_of_Control",
            "melvorF:Auto_Slayer",
            "melvorF:Map_To_The_Unhallowed_Wasteland",
            "melvorF:Basic_Resupply",
            "melvorF:Standard_Resupply",
            "melvorF:Generous_Resupply",
            "melvorF:Mirror_Shield",
            "melvorF:Magical_Ring",
            "melvorF:Blazing_Lantern",
            "melvorF:Desert_Hat",
            "melvorF:Climbing_Boots",
            "melvorF:Confetti_Crossbow",
            "melvorF:Skull_Cape",
            "melvorF:Green_Party_Hat",
            "melvorF:Necromancer_Hat",
            "melvorF:Necromancer_Boots",
            "melvorF:Necromancer_Bottoms",
            "melvorF:Necromancer_Robes",
            "melvorF:Slayer_Helmet_Basic",
            "melvorF:Slayer_Platebody_Basic",
            "melvorF:Slayer_Cowl_Basic",
            "melvorF:Slayer_Leather_Body_Basic",
            "melvorF:Slayer_Wizard_Hat_Basic",
            "melvorF:Slayer_Wizard_Robes_Basic",
            "melvorF:Slayer_Upgrade_Kit_Strong",
            "melvorF:Slayer_Upgrade_Kit_Elite",
            "melvorF:Slayer_Upgrade_Kit_Master",
            "melvorF:Thieving",
            "melvorF:Max_Skillcape",
            "melvorF:Agility_Skillcape",
            "melvorF:Astrology_Skillcape",
            "melvorF:Crafting_Skillcape",
            "melvorF:Fletching_Skillcape",
            "melvorF:Herblore_Skillcape",
            "melvorF:Magic_Skillcape",
            "melvorF:Prayer_Skillcape",
            "melvorF:Ranged_Skillcape",
            "melvorF:Runecrafting_Skillcape",
            "melvorF:Slayer_Skillcape",
            "melvorF:Summoning_Skillcape",
            "melvorF:Thieving_Skillcape",
            "melvorF:Township_Skillcape",
            "melvorF:Cape_of_Completion",
            "melvorF:Leather",
            "melvorF:Green_Dragonhide",
            "melvorF:Blue_Dragonhide",
            "melvorF:Red_Dragonhide",
            "melvorF:Summoning_Shard_Red",
            "melvorF:Summoning_Shard_Green",
            "melvorF:Summoning_Shard_Blue",
            "melvorF:Summoning_Shard_Silver",
            "melvorF:Summoning_Shard_Gold",
            "melvorF:Summoning_Shard_Black",
            "melvorF:Woodcutters_Hat",
            "melvorF:Woodcutters_Body",
            "melvorF:Woodcutters_Leggings",
            "melvorF:Woodcutters_Boots",
            "melvorF:Burning_Mans_Hat",
            "melvorF:Burning_Mans_Body",
            "melvorF:Burning_Mans_Leggings",
            "melvorF:Burning_Mans_Boots",
            "melvorF:Fishermans_Hat",
            "melvorF:Fishermans_Body",
            "melvorF:Fishermans_Leggings",
            "melvorF:Fishermans_Boots",
            "melvorF:Miners_Hat",
            "melvorF:Miners_Body",
            "melvorF:Miners_Leggings",
            "melvorF:Miners_Boots",
            "melvorF:Blacksmiths_Hat",
            "melvorF:Blacksmiths_Body",
            "melvorF:Blacksmiths_Leggings",
            "melvorF:Blacksmiths_Boots",
            "melvorF:Fletchers_Hat",
            "melvorF:Fletchers_Body",
            "melvorF:Fletchers_Leggings",
            "melvorF:Fletchers_Boots",
            "melvorF:Crafters_Hat",
            "melvorF:Crafters_Body",
            "melvorF:Crafters_Leggings",
            "melvorF:Crafters_Boots",
            "melvorF:Runecrafters_Hat",
            "melvorF:Runecrafters_Body",
            "melvorF:Runecrafters_Leggings",
            "melvorF:Runecrafters_Boots",
            "melvorF:Potion_Makers_Hat",
            "melvorF:Potion_Makers_Body",
            "melvorF:Potion_Makers_Leggings",
            "melvorF:Potion_Makers_Boots",
            "melvorF:Performance_Enhancing_Hat",
            "melvorF:Performance_Enhancing_Body",
            "melvorF:Performance_Enhancing_Leggings",
            "melvorF:Performance_Enhancing_Boots",
            "melvorF:Star_Gazing_Hat",
            "melvorF:Star_Gazing_Body",
            "melvorF:Star_Gazing_Leggings",
            "melvorF:Star_Gazing_Boots",
            "melvorF:Skilling_Outfit_Upgrade",
            "melvorF:Marcy",
            "melvorF:Roger",
            "melvorF:Ace",
            "melvorF:Layla",
            "melvorF:MisterFuzzbutt",
            "melvorF:OctaviusLepidus",
            "melvorF:Warm_Beanie",
            "melvorF:Pirate_Captain_Hat",
            "melvorF:Prats_Hat",
            "melvorF:Top_Hat",
            "melvorF:Hunters_Hat",
            "melvorF:Clown_Hat",
            "melvorF:ExtraBankTab",
            "melvorTotH:Extra_Equipment_Set_IV",
            "melvorTotH:Corundum_Axe",
            "melvorTotH:Augite_Axe",
            "melvorTotH:Meteorite_Axe",
            "melvorTotH:Divine_Axe",
            "melvorTotH:Corundum_Pickaxe",
            "melvorTotH:Augite_Pickaxe",
            "melvorTotH:Meteorite_Pickaxe",
            "melvorTotH:Divine_Pickaxe",
            "melvorTotH:Corundum_Fishing_Rod",
            "melvorTotH:Augite_Fishing_Rod",
            "melvorTotH:Meteorite_Fishing_Rod",
            "melvorTotH:Divine_Fishing_Rod",
            "melvorTotH:SpruceCookingFire",
            "melvorTotH:ElderWoodCookingFire",
            "melvorTotH:CarrionCookingFire",
            "melvorTotH:IridiumPot",
            "melvorTotH:PalladiumPot",
            "melvorTotH:DivinePot",
            "melvorTotH:CorundumFurnace",
            "melvorTotH:AugiteFurnace",
            "melvorTotH:DivineFurnace",
            "melvorTotH:SignOfTheStars",
            "melvorTotH:SummonersAltar",
            "melvorTotH:Labyrinth_Solution",
            "melvorTotH:Linden_Boat",
            "melvorTotH:Golden_Compass",
            "melvorTotH:Golden_Key",
            "melvorTotH:Slayer_Torch",
            "melvorTotH:Mystic_Lantern",
            "melvorTotH:Slayer_Upgrade_Kit_Legendary",
            "melvorTotH:Slayer_Upgrade_Kit_Mythical",
            "melvorTotH:Superior_Max_Skillcape",
            "melvorTotH:Superior_Agility_Skillcape",
            "melvorTotH:Superior_Attack_Skillcape",
            "melvorTotH:Superior_Astrology_Skillcape",
            "melvorTotH:Superior_Cooking_Skillcape",
            "melvorTotH:Superior_Crafting_Skillcape",
            "melvorTotH:Superior_Defence_Skillcape",
            "melvorTotH:Superior_Farming_Skillcape",
            "melvorTotH:Superior_Firemaking_Skillcape",
            "melvorTotH:Superior_Fishing_Skillcape",
            "melvorTotH:Superior_Fletching_Skillcape",
            "melvorTotH:Superior_Herblore_Skillcape",
            "melvorTotH:Superior_Hitpoints_Skillcape",
            "melvorTotH:Superior_Magic_Skillcape",
            "melvorTotH:Superior_Mining_Skillcape",
            "melvorTotH:Superior_Prayer_Skillcape",
            "melvorTotH:Superior_Ranged_Skillcape",
            "melvorTotH:Superior_Runecrafting_Skillcape",
            "melvorTotH:Superior_Slayer_Skillcape",
            "melvorTotH:Superior_Smithing_Skillcape",
            "melvorTotH:Superior_Strength_Skillcape",
            "melvorTotH:Superior_Summoning_Skillcape",
            "melvorTotH:Superior_Thieving_Skillcape",
            "melvorTotH:Superior_Township_Skillcape",
            "melvorTotH:Superior_Woodcutting_Skillcape",
            "melvorTotH:Superior_Cape_Of_Completion",
            "melvorTotH:ClassyRock",
            "melvorTotH:CuteRock",
            "melvorTotH:RoyalRock",
            "melvorTotH:ElfRock",
            "melvorTotH:MagicRock",
            "melvorTotH:PartyRock",
            "melvorTotH:Plentiful_Resupply",
            "melvorTotH:Bountiful_Resupply",
            "melvorTotH:Golden_Shard",
            "melvorAoD:Archaeologist_Gloves",
            "melvorAoD:Archaeologists_Whip",
            "melvorAoD:Archaeologist_Boots",
            "melvorAoD:Archaeologist_Hat",
            "melvorAoD:Archaeologist_Leggings",
            "melvorAoD:Archaeologist_Body",
            "melvorAoD:Golden_Trowel",
            "melvorAoD:Cape_of_Completion_AoD",
            "melvorAoD:Superior_Cartography_Skillcape",
            "melvorAoD:Superior_Archaeology_Skillcape",
            "melvorAoD:Archaeology_Skillcape",
            "melvorAoD:Cartography_Skillcape",
            "melvorAoD:ExtraArchaeologyMapSlot1",
            "melvorAoD:ExtraArchaeologyMapSlot2",
            "melvorAoD:ExtraArchaeologyMapSlot3",
            "melvorAoD:CartographyUpgrade1",
            "melvorAoD:CartographyUpgrade2",
            "melvorAoD:ShipUpgrade1",
            "melvorAoD:ShipUpgrade2",
            "melvorAoD:ShipUpgrade3",
            "melvorAoD:ShipUpgrade4",
            "melvorAoD:ShipUpgrade5",
            "melvorAoD:ShipUpgrade6",
            "melvorAoD:ShipUpgrade7",
            "melvorAoD:ShipUpgrade8",
            "melvorAoD:Blessed_Bone_Offering",
            "melvorAoD:Agility_Prosperity",
            "melvorAoD:Superior_Cauldron",
            "melvorAoD:Superior_Cooking_Pot",
            "melvorAoD:IronSieve",
            "melvorAoD:SteelSieve",
            "melvorAoD:MithrilSieve",
            "melvorAoD:AraniteSieve",
            "melvorAoD:AdamantSieve",
            "melvorAoD:RuneSieve",
            "melvorAoD:DragonSieve",
            "melvorAoD:AncientSieve",
            "melvorAoD:DarkSteelSieve",
            "melvorAoD:CrystalSieve",
            "melvorAoD:RelicSieve",
            "melvorAoD:IronTrowel",
            "melvorAoD:SteelTrowel",
            "melvorAoD:MithrilTrowel",
            "melvorAoD:AraniteTrowel",
            "melvorAoD:AdamantTrowel",
            "melvorAoD:RuneTrowel",
            "melvorAoD:DragonTrowel",
            "melvorAoD:AncientTrowel",
            "melvorAoD:DarkSteelTrowel",
            "melvorAoD:CrystalTrowel",
            "melvorAoD:RelicTrowel",
            "melvorAoD:IronBrush",
            "melvorAoD:SteelBrush",
            "melvorAoD:MithrilBrush",
            "melvorAoD:AraniteBrush",
            "melvorAoD:AdamantBrush",
            "melvorAoD:RuneBrush",
            "melvorAoD:DragonBrush",
            "melvorAoD:AncientBrush",
            "melvorAoD:DarkSteelBrush",
            "melvorAoD:CrystalBrush",
            "melvorAoD:RelicBrush",
            "melvorAoD:IronShovel",
            "melvorAoD:SteelShovel",
            "melvorAoD:MithrilShovel",
            "melvorAoD:AraniteShovel",
            "melvorAoD:AdamantShovel",
            "melvorAoD:RuneShovel",
            "melvorAoD:DragonShovel",
            "melvorAoD:AncientShovel",
            "melvorAoD:DarkSteelShovel",
            "melvorAoD:CrystalShovel",
            "melvorAoD:RelicShovel",
            "melvorAoD:MagicAnvil",
            "melvorAoD:Enhanced_Spyglass_Lens",
            "melvorAoD:Archaeologists_Consumable",
            "melvorAoD:Dig_Site_Token",
            "melvorAoD:Travel_Token",
            "melvorAoD:Summoners_Blessing",
            "melvorAoD:Topaz_Bolts_Enchanted",
            "melvorAoD:Sapphire_Bolts_Enchanted",
            "melvorAoD:Diamond_Bolts_Enchanted",
            "melvorAoD:Summoners_Pack_I",
            "melvorAoD:Summoners_Pack_II",
            "melvorAoD:Summoners_Pack_III",
            "melvorAoD:Combat_Supply_I",
            "melvorAoD:Combat_Supply_II",
            "melvorAoD:Combat_Supply_III",
            "melvorItA:ExtraBankTab1",
            "melvorItA:ExtraBankTab2",
            "melvorItA:ExtraBankTab3",
            "melvorItA:ExtraBankTab4",
            "melvorItA:ExtraBankTab5",
            "melvorItA:Extra_Equipment_Set_I",
            "melvorItA:Extra_Equipment_Set_II",
            "melvorItA:Extra_Equipment_Set_III",
            "melvorItA:Cape_of_Completion_ItA",
            "melvorItA:Abyssal_Firemaking_Oil",
            "melvorItA:Twisted_Firemaking_Oil",
            "melvorItA:Gloom_Firemaking_Oil",
            "melvorItA:Shadow_Firemaking_Oil",
            "melvorItA:Obsidian_Firemaking_Oil",
            "melvorItA:Voidfire_Firemaking_Oil",
            "melvorItA:Abyssal_Negation_Contract_I",
            "melvorItA:Abyssal_Coin_Contract_I",
            "melvorItA:Abyssal_Counter_Contract_I",
            "melvorItA:Abyssal_Corruption_Contract_I",
            "melvorItA:Slayer_Specialist_I",
            "melvorItA:Slayer_Specialist_II",
            "melvorItA:Slayer_Specialist_III",
            "melvorItA:AbyssalMining",
            "melvorItA:AbyssalSmithing",
            "melvorItA:AbyssalFiremaking",
            "melvorItA:AbyssalHarvesting",
            "melvorItA:AbyssalFletching",
            "melvorItA:AbyssalCrafting",
            "melvorItA:AbyssalHerblore",
            "melvorItA:AbyssalRunecrafting",
            "melvorItA:Extra_Bank_Slot",
            "melvorItA:Echoes_of_Woe",
            "melvorItA:Resilience_to_Decay",
            "melvorItA:Embracer_of_Fear",
            "melvorItA:Fortitude_Under_Rubble",
            "melvorItA:Insight_Through_Solitude",
            "melvorItA:Weight_of_Souls",
            "melvorItA:The_Unyielding_Conqueror",
            "melvorItA:Abyssal_Resupply",
            "melvorItA:Blighted_Resupply",
            "melvorItA:Withering_Resupply",
            "melvorItA:Abyssal_Compost",
            "melvorItA:Abyssium_Harvester",
            "melvorItA:Brumite_Harvester",
            "melvorItA:Gloomite_Harvester",
            "melvorItA:Witherite_Harvester",
            "melvorItA:Netherite_Harvester",
            "melvorItA:Abyssal_Slayer_Upgrade_Kit",
            "melvorItA:Abyssal_Slayer_Helmet_Woeful",
            "melvorItA:Abyssal_Slayer_Platebody_Woeful",
            "melvorItA:Abyssal_Slayer_Cowl_Woeful",
            "melvorItA:Abyssal_Slayer_Leather_Body_Woeful",
            "melvorItA:Abyssal_Slayer_Wizard_Hat_Woeful",
            "melvorItA:Abyssal_Slayer_Wizard_Robes_Woeful",
            "melvorItA:Abyssium_Axe_Coating",
            "melvorItA:Brumite_Axe_Coating",
            "melvorItA:Gloomite_Axe_Coating",
            "melvorItA:Witherite_Axe_Coating",
            "melvorItA:Netherite_Axe_Coating",
            "melvorItA:Abyssium_Fishing_Rod_Coating",
            "melvorItA:Brumite_Fishing_Rod_Coating",
            "melvorItA:Gloomite_Fishing_Rod_Coating",
            "melvorItA:Witherite_Fishing_Rod_Coating",
            "melvorItA:Netherite_Fishing_Rod_Coating",
            "melvorItA:Abyssium_Pickaxe_Coating",
            "melvorItA:Brumite_Pickaxe_Coating",
            "melvorItA:Gloomite_Pickaxe_Coating",
            "melvorItA:Witherite_Pickaxe_Coating",
            "melvorItA:Netherite_Pickaxe_Coating",
            "melvorItA:Tangled_Grove_Entry",
            "melvorItA:Blighted_Reach_Pass",
            "melvorItA:Petrified_Lair_Access",
            "melvorItA:Withering_Catacombs_Sealbreaker",
            "melvorItA:Whispering_Sea_Charter",
            "melvorItA:Tendril_Hollow_Passage",
            "melvorItA:Void_Nexus_Gateway",
            "melvorItA:Summoning_Shard_Crimson",
            "melvorItA:Summoning_Shard_Azure"
          ]
        }
      ]
    },
    "MonsterID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:BlackKnight",
            "melvorD:HillGiant",
            "melvorD:MossGiant",
            "melvorD:GiantCrab",
            "melvorD:Tentacle",
            "melvorD:Seagull",
            "melvorD:ConfusedPirate",
            "melvorD:FrozenMammoth",
            "melvorD:FrozenArcher",
            "melvorD:WetMonster",
            "melvorD:MoistMonster",
            "melvorD:SweatyMonster",
            "melvorD:Golbin",
            "melvorD:RangedGolbin",
            "melvorD:Chicken",
            "melvorD:Cow",
            "melvorD:Chick",
            "melvorD:MummaChicken",
            "melvorD:Pirate",
            "melvorD:PirateCaptain",
            "melvorD:TheKraken",
            "melvorD:Bat",
            "melvorD:BigBat",
            "melvorD:TheEye",
            "melvorD:ResurrectedEye",
            "melvorD:PratTheProtectorOfSecrets",
            "melvorD:MalcsTheGuardianOfMelvor",
            "melvorD:Spider",
            "melvorD:BrownSpider",
            "melvorD:EvilSpider",
            "melvorD:SpiderKing",
            "melvorD:IceMonster",
            "melvorD:IceTroll",
            "melvorD:Ice",
            "melvorD:ProtectorofIce",
            "melvorD:FirstMate",
            "melvorD:ZombieHand",
            "melvorD:Zombie",
            "melvorD:ZombieLeader",
            "melvorD:Ghost",
            "melvorD:GreenDragon",
            "melvorD:BlueDragon",
            "melvorD:RedDragon",
            "melvorD:BlackDragon",
            "melvorD:JuniorFarmer",
            "melvorD:AdultFarmer",
            "melvorD:MasterFarmer",
            "melvorD:Wizard",
            "melvorD:SteelKnight",
            "melvorD:MithrilKnight",
            "melvorD:AdamantKnight",
            "melvorD:RuneKnight",
            "melvorD:BanditTrainee",
            "melvorD:Bandit",
            "melvorD:BanditLeader",
            "melvorD:DarkWizard",
            "melvorD:MasterWizard",
            "melvorD:ElderWizard",
            "melvorD:Skeleton",
            "melvorD:Leech",
            "melvorD:ViciousSerpent",
            "melvorD:FireSpirit",
            "melvorD:Plant",
            "melvorD:ElerineArcher",
            "melvorD:ElerineWarrior",
            "melvorD:ElerineMage",
            "melvorF:RandomITM",
            "melvorF:Mummy",
            "melvorF:Statue",
            "melvorF:StoneSnake",
            "melvorF:UndeadWerewolf",
            "melvorF:Vampire",
            "melvorF:FierceDevil",
            "melvorF:ManyEyedMonster",
            "melvorF:StrangeEyedMonster",
            "melvorF:LotsofEyes",
            "melvorF:Eyes",
            "melvorF:Griffin",
            "melvorF:Pegasus",
            "melvorF:Fairy",
            "melvorF:Valkyrie",
            "melvorF:Angel",
            "melvorF:HolyArcher",
            "melvorF:GooMonster",
            "melvorF:GreenGooMonster",
            "melvorF:PurpleGooMonster",
            "melvorF:ScatteredGooMonster",
            "melvorF:RagingHornedElite",
            "melvorF:SeethingHornedElite",
            "melvorF:DarkHornedElite",
            "melvorF:AirGuard",
            "melvorF:AirMonster",
            "melvorF:AirGolem",
            "melvorF:Aleron",
            "melvorF:Voltaire",
            "melvorF:Aeris",
            "melvorF:WaterGuard",
            "melvorF:WaterMonster",
            "melvorF:WaterGolem",
            "melvorF:Lissia",
            "melvorF:Murtia",
            "melvorF:Glacia",
            "melvorF:EarthGuard",
            "melvorF:EarthMonster",
            "melvorF:EarthGolem",
            "melvorF:Mistral",
            "melvorF:Ophidia",
            "melvorF:Terran",
            "melvorF:FireGuard",
            "melvorF:FireMonster",
            "melvorF:FireGolem",
            "melvorF:Pyra",
            "melvorF:Ignis",
            "melvorF:Ragnar",
            "melvorF:ElderDragon",
            "melvorF:FuriousHornedElite",
            "melvorF:MioliteSprig",
            "melvorF:MioliteTrio",
            "melvorF:MioliteWarden",
            "melvorF:MioliteMonarch",
            "melvorF:Druid",
            "melvorF:Thief",
            "melvorF:Shaman",
            "melvorF:Necromancer",
            "melvorF:Elementalist",
            "melvorF:TurkulRiders",
            "melvorF:TurkulArchers",
            "melvorF:TurkulThrowers",
            "melvorF:TurkulGiant",
            "melvorF:TurkulGeneral",
            "melvorF:SandBeast",
            "melvorF:RancoraSpider",
            "melvorF:ElderVampire",
            "melvorF:CursedMaiden",
            "melvorF:BountyHunter",
            "melvorF:ChaoticGreaterDragon",
            "melvorF:HuntingGreaterDragon",
            "melvorF:WickedGreaterDragon",
            "melvorF:Umbora",
            "melvorF:Rokken",
            "melvorF:Kutul",
            "melvorF:Paladin",
            "melvorF:Priest",
            "melvorF:WanderingBard",
            "melvorF:Cerberus",
            "melvorF:FearfulEye",
            "melvorF:RedDevil",
            "melvorF:Phoenix",
            "melvorF:Incendius",
            "melvorF:PratTheGuardianOfSecrets",
            "melvorF:MalcsTheLeaderOfDragons",
            "melvorF:MysteriousFigurePhase1",
            "melvorF:MysteriousFigurePhase2",
            "melvorF:Ahrenia",
            "melvorF:SuperiorEyedMonster",
            "melvorF:EyeOfFear",
            "melvorF:Bane",
            "melvorF:NoxiousSerpent",
            "melvorF:VenomousSnake",
            "melvorF:GiantMoth",
            "melvorF:LegaranWurm",
            "melvorF:CursedLich",
            "melvorF:SpikedRedClaw",
            "melvorF:GreaterSkeletalDragon",
            "melvorF:BaneInstrumentOfFear",
            "melvorF:FierceDevilBoss",
            "melvorF:ElementalistBoss",
            "melvorF:PratTheGuardianOfSecretsBoss",
            "melvorF:MalcsTheGuardianOfStrongholds",
            "melvorF:MysteriousFigurePhase1Stronghold",
            "melvorF:MysteriousFigurePhase2Stronghold",
            "melvorF:AhreniaStronghold",
            "melvorTotH:RandomSpiderLair",
            "melvorTotH:HungryPlant",
            "melvorTotH:PoisonToad",
            "melvorTotH:Kongamato",
            "melvorTotH:Conda",
            "melvorTotH:Alraune",
            "melvorTotH:Morellia",
            "melvorTotH:BurningSnake",
            "melvorTotH:InfernalGolem",
            "melvorTotH:MagicFireDemon",
            "melvorTotH:Manticore",
            "melvorTotH:GretYun",
            "melvorTotH:Trogark",
            "melvorTotH:LargeIceTroll",
            "melvorTotH:FrostGolem",
            "melvorTotH:PolarBear",
            "melvorTotH:SpectralIceWolf",
            "melvorTotH:IceHydra",
            "melvorTotH:LightningSpirit",
            "melvorTotH:LightningMonkey",
            "melvorTotH:LightningGolem",
            "melvorTotH:RaZu",
            "melvorTotH:Siren",
            "melvorTotH:MonsterCroc",
            "melvorTotH:Leviathan",
            "melvorTotH:TwinSeaDragonSerpent",
            "melvorTotH:ScouterSpider",
            "melvorTotH:TrapperSpider",
            "melvorTotH:WickedSpider",
            "melvorTotH:BasherSpider",
            "melvorTotH:EnforcerSpider",
            "melvorTotH:GuardianSpider",
            "melvorTotH:SpiderQueen",
            "melvorTotH:ShadowBeast",
            "melvorTotH:PlagueDoctor",
            "melvorTotH:Cockatrice",
            "melvorTotH:GoliathWerewolf",
            "melvorTotH:TreeGiant",
            "melvorTotH:TreeSpirit",
            "melvorTotH:CursedSpirit",
            "melvorTotH:LadyDarkheart",
            "melvorTotH:Phantom",
            "melvorTotH:Banshee",
            "melvorTotH:Spectre",
            "melvorTotH:CursedSkeletonWarrior",
            "melvorTotH:Beholder",
            "melvorTotH:DarkKnight",
            "melvorTotH:Fiozor",
            "melvorTotH:Torvair",
            "melvorTotH:Arctair",
            "melvorTotH:Harkair",
            "melvorTotH:VorloranDevastator",
            "melvorTotH:VorloranWatcher",
            "melvorTotH:VorloranProtector",
            "melvorTotH:GuardianoftheHerald",
            "melvorTotH:TheHeraldPhase1",
            "melvorTotH:TheHeraldPhase2",
            "melvorTotH:TheHeraldPhase3",
            "melvorAoD:BlindWarrior",
            "melvorAoD:BlindArcher",
            "melvorAoD:BlindMage",
            "melvorAoD:BlindGhost",
            "melvorAoD:GreenSlime",
            "melvorAoD:VampiricBat",
            "melvorAoD:SlimeShooter",
            "melvorAoD:GraniteGolem",
            "melvorAoD:RangedGolem",
            "melvorAoD:EarthGolem",
            "melvorAoD:MagicGolem",
            "melvorAoD:LavaGolem",
            "melvorAoD:CultMember",
            "melvorAoD:CultImp",
            "melvorAoD:Lich",
            "melvorAoD:CultMonster",
            "melvorAoD:SoulTakerWitch",
            "melvorAoD:PoisonLeecher",
            "melvorAoD:PoisonRoamer",
            "melvorAoD:PoisonSlime",
            "melvorAoD:PoisonBloater",
            "melvorAoD:MagicMirror",
            "melvorAoD:PossessedBarrel",
            "melvorAoD:FakeDoor",
            "melvorAoD:IllusiveRoots",
            "melvorAoD:PuppetMaster",
            "melvorAoD:GhostSailor",
            "melvorAoD:GhostMercenary",
            "melvorAoD:ShipwreckBeast",
            "melvorAoD:CursedPirateCaptain",
            "melvorAoD:Merman",
            "melvorAoD:MermaidArcher",
            "melvorAoD:MermanGuard",
            "melvorAoD:TreacherousJellyfish",
            "melvorAoD:Nagaia",
            "melvorAoD:EvilOak",
            "melvorAoD:GrumpyWillow",
            "melvorAoD:AngryTeak",
            "melvorAoD:RagingMaple",
            "melvorAoD:FuriousMahogany",
            "melvorAoD:CrystalBarrager",
            "melvorAoD:CrystalSmasher",
            "melvorAoD:CrystalProwler",
            "melvorAoD:CrystalManipulator",
            "melvorAoD:CrystalShatterer",
            "melvorAoD:CrystalBehemoth",
            "melvorItA:MutatingPlant",
            "melvorItA:MutatingChicken",
            "melvorItA:MutatingCow",
            "melvorItA:MutatingScarecrow",
            "melvorItA:AbyssalPlant",
            "melvorItA:AbyssalChicken",
            "melvorItA:AbyssalCow",
            "melvorItA:AbyssalScarecrow",
            "melvorItA:AbyssalBat",
            "melvorItA:AbyssalWallclimber",
            "melvorItA:AbyssalSwooper",
            "melvorItA:CrimsonLeech",
            "melvorItA:CrimsonViper",
            "melvorItA:CrimsonHound",
            "melvorItA:TangledThorns",
            "melvorItA:TangledSerpent",
            "melvorItA:TangledThornbeast",
            "melvorItA:TangledWeaver",
            "melvorItA:Abyssara",
            "melvorItA:SmogSlime",
            "melvorItA:SmogVirefang",
            "melvorItA:SmogGolem",
            "melvorItA:SmogFiend",
            "melvorItA:ToxicSwarm",
            "melvorItA:ToxicSerpent",
            "melvorItA:ToxicBloom",
            "melvorItA:BlightedMantis",
            "melvorItA:BlightedMoth",
            "melvorItA:BlightedSprayer",
            "melvorItA:BlightedShadewing",
            "melvorItA:BlightedMaw",
            "melvorItA:BlightedWisp",
            "melvorItA:ShadowIllusion",
            "melvorItA:ShadowTrickster",
            "melvorItA:ShadowTormentor",
            "melvorItA:DreadwalkerWight",
            "melvorItA:DreadwalkerGhoul",
            "melvorItA:DreadwalkerRevenant",
            "melvorItA:WailingAmbusher",
            "melvorItA:WailingShade",
            "melvorItA:WailingPoltergeist",
            "melvorItA:PetrifyingBehemoth",
            "melvorItA:PetrifyingDrake",
            "melvorItA:PetrifyingBasilisk",
            "melvorItA:FracturedBeast",
            "melvorItA:FracturedManticore",
            "melvorItA:FracturedWyvern",
            "melvorItA:RavenousRazortalon",
            "melvorItA:RavenousShadowfang",
            "melvorItA:RavenousDreadwing",
            "melvorItA:WitheringBonearcher",
            "melvorItA:WitheringBonemage",
            "melvorItA:WitheringBoneguard",
            "melvorItA:CatacombSporeslinger",
            "melvorItA:CatacombTerror",
            "melvorItA:CatacombWraith",
            "melvorItA:CatacombWurm",
            "melvorItA:MurmuringTrapper",
            "melvorItA:MurmuringTreant",
            "melvorItA:MurmuringWollotails",
            "melvorItA:EchoSpecter",
            "melvorItA:EchoWalker",
            "melvorItA:EchoDrifter",
            "melvorItA:EchoHorror",
            "melvorItA:SilentsnapGiantcrab",
            "melvorItA:SilentsnapTortoise",
            "melvorItA:SilentsnapSiren",
            "melvorItA:WhisperingManta",
            "melvorItA:WhisperingOctopus",
            "melvorItA:WhisperingDrifter",
            "melvorItA:EldritchGhoul",
            "melvorItA:EldritchPhantom",
            "melvorItA:EldritchAbberation",
            "melvorItA:EldritchSeeker",
            "melvorItA:EldritchStalker",
            "melvorItA:EldritchSoulbinder",
            "melvorItA:EldritchMindeater",
            "melvorItA:HollowReaper",
            "melvorItA:HollowNightmare",
            "melvorItA:HollowHarbinger",
            "melvorItA:VoidDoppelganger",
            "melvorItA:VoidApostle",
            "melvorItA:VoidHarbinger",
            "melvorItA:VoidDweller",
            "melvorItA:VoidNightstalker",
            "melvorItA:VoidGargantuan",
            "melvorItA:GreaterVoidEntity",
            "melvorItA:GreaterVoidVagrant",
            "melvorItA:GreaterVoidArtificer",
            "melvorItA:Felth",
            "melvorItA:Karn",
            "melvorItA:Vruul",
            "melvorItA:Anketh",
            "melvorItA:ZaKul",
            "melvorItA:Nhilus",
            "melvorItA:Xon1",
            "melvorItA:Xon2",
            "melvorItA:Xon3",
            "melvorItA:Starfang",
            "melvorItA:Voidmaw",
            "melvorItA:Celesterror"
          ]
        }
      ]
    },
    "AltMagicSpellID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:JustLearning",
            "melvorF:SuperheatI",
            "melvorF:ItemAlchemyI",
            "melvorF:BoneOffering",
            "melvorF:SuperheatII",
            "melvorF:ItemAlchemyII",
            "melvorF:RagstoRichesI",
            "melvorF:BlessedOffering",
            "melvorF:SuperheatIII",
            "melvorF:RagstoRichesII",
            "melvorF:ItemAlchemyIII",
            "melvorF:SuperheatIV",
            "melvorF:HolyInvocationI",
            "melvorF:HolyInvocationII",
            "melvorTotH:Nullification",
            "melvorTotH:Transmutation",
            "melvorTotH:Purification",
            "melvorTotH:Fragmentation",
            "melvorTotH:SuperheatV",
            "melvorTotH:HolyInvocationIII",
            "melvorTotH:Embellish",
            "melvorTotH:RagstoRichesIII",
            "melvorTotH:ItemAlchemyIV",
            "melvorAoD:BarrierDust",
            "melvorAoD:UnholyOffering",
            "melvorAoD:CursedOffering"
          ]
        }
      ]
    },
    "AstrologyActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Deedree",
            "melvorF:Iridan",
            "melvorF:Ameria",
            "melvorF:Terra",
            "melvorF:Vale",
            "melvorF:Syllia",
            "melvorF:Arachi",
            "melvorF:Ko",
            "melvorF:Tellus",
            "melvorF:Hyden",
            "melvorF:Qimican",
            "melvorTotH:Variel",
            "melvorTotH:Haemir",
            "melvorTotH:Rosaniya",
            "melvorTotH:Ashtar",
            "melvorAoD:Nysa",
            "melvorItA:Harvesting",
            "melvorItA:CorruptedDeedree",
            "melvorItA:CorruptedIridan",
            "melvorItA:CorruptedAmeria",
            "melvorItA:CorruptedTerra",
            "melvorItA:CorruptedVale",
            "melvorItA:CorruptedSyllia",
            "melvorItA:CorruptedArachi",
            "melvorItA:CorruptedKo",
            "melvorItA:CorruptedTellus",
            "melvorItA:CorruptedHyden",
            "melvorItA:CorruptedQimican",
            "melvorItA:Celestis"
          ]
        }
      ]
    },
    "SummoningCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Marks",
            "melvorD:TabletsFamiliars",
            "melvorD:Synergies",
            "melvorItA:AbyssalMarks",
            "melvorItA:AbyssalTabletsFamiliars"
          ]
        }
      ]
    },
    "SummoningActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:GolbinThief",
            "melvorF:Occultist",
            "melvorF:Wolf",
            "melvorF:Ent",
            "melvorF:Mole",
            "melvorF:Octopus",
            "melvorF:Minotaur",
            "melvorF:Centaur",
            "melvorF:Witch",
            "melvorF:Pig",
            "melvorF:Crow",
            "melvorF:Leprechaun",
            "melvorF:Cyclops",
            "melvorF:Yak",
            "melvorF:Unicorn",
            "melvorF:Dragon",
            "melvorF:Monkey",
            "melvorF:Salamander",
            "melvorF:Bear",
            "melvorF:Devil",
            "melvorTotH:Eagle",
            "melvorTotH:Owl",
            "melvorTotH:Beaver",
            "melvorTotH:Fox",
            "melvorTotH:LightningSpirit",
            "melvorTotH:Siren",
            "melvorTotH:Spider",
            "melvorTotH:Spectre",
            "melvorAoD:Barrier",
            "melvorItA:Imp",
            "melvorItA:Golem",
            "melvorItA:Abyssal_Golbin_Thief",
            "melvorItA:Abyssal_Ent",
            "melvorItA:Abyssal_Occultist",
            "melvorItA:Abyssal_Mole",
            "melvorItA:Abyssal_Wolf",
            "melvorItA:Abyssal_Octopus",
            "melvorItA:Abyssal_Minotaur",
            "melvorItA:Abyssal_Pig",
            "melvorItA:Abyssal_Centaur",
            "melvorItA:Abyssal_Crow",
            "melvorItA:Abyssal_Witch",
            "melvorItA:Abyssal_Leprechaun",
            "melvorItA:Abyssal_Cyclops",
            "melvorItA:Abyssal_Monkey",
            "melvorItA:Abyssal_Yak",
            "melvorItA:Abyssal_Salamander",
            "melvorItA:Abyssal_Unicorn",
            "melvorItA:Abyssal_Bear",
            "melvorItA:Abyssal_Dragon",
            "melvorItA:Abyssal_Devil",
            "melvorItA:Eldritch_Eyeball",
            "melvorItA:Void_Wisp"
          ]
        }
      ]
    },
    "AgilityObstacleID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:CargoNet",
            "melvorF:RopeSwing",
            "melvorF:RopeClimb",
            "melvorF:RopeJump",
            "melvorF:MonkeyBars",
            "melvorF:BalanceBeam",
            "melvorF:BalanceSeesaw",
            "melvorF:PipeClimb",
            "melvorF:PipeBalance",
            "melvorF:PitJump",
            "melvorF:SteppingStones",
            "melvorF:CoalStones",
            "melvorF:MudCrawl",
            "melvorF:MudDive",
            "melvorF:CaveClimb",
            "melvorF:GapJump",
            "melvorF:RockClimb",
            "melvorF:CliffClimb",
            "melvorF:CliffBalance",
            "melvorF:MountainClimb",
            "melvorF:TreeClimb",
            "melvorF:TreeHop",
            "melvorF:TreeBalance",
            "melvorF:RockyWaters",
            "melvorF:LakeSwim",
            "melvorF:RaftDrifting",
            "melvorF:SpikeTrap",
            "melvorF:HeatTrap",
            "melvorF:BoulderTrap",
            "melvorF:WaterTrap",
            "melvorF:FreezingTrap",
            "melvorF:PipeCrawl",
            "melvorF:RaftBuilding",
            "melvorF:SpikeJump",
            "melvorF:TreeHang",
            "melvorF:ALovelyJog",
            "melvorF:LavaJump",
            "melvorF:WaterJump",
            "melvorF:IceJump",
            "melvorF:CaveMaze",
            "melvorF:FrozenLakeCrossing",
            "melvorF:Waterfall",
            "melvorF:LavaWaterfallDodge",
            "melvorF:BoulderMove",
            "melvorF:DragonFight",
            "melvorF:OceanRafting",
            "melvorF:ForestTrail",
            "melvorF:RunicTrail",
            "melvorF:BurningCoals",
            "melvorF:SwelteringPools",
            "melvorF:RooftopRun",
            "melvorTotH:PitMaze",
            "melvorTotH:FrozenMaze",
            "melvorTotH:WaterMaze",
            "melvorTotH:ForestMaze",
            "melvorTotH:PipeMaze",
            "melvorTotH:BoulderBalance",
            "melvorTotH:CaveWaters",
            "melvorTotH:RuneCrawl",
            "melvorTotH:MonkeyTrail",
            "melvorTotH:ForestJog",
            "melvorTotH:RopeTrap",
            "melvorTotH:IceTrap",
            "melvorTotH:BurningTrap",
            "melvorTotH:CaveTrap",
            "melvorTotH:BalanceTrap",
            "melvorTotH:RooftopClimb",
            "melvorTotH:ForestClimb",
            "melvorTotH:FreezingClimb",
            "melvorTotH:GapClimb",
            "melvorTotH:WaterfallClimb",
            "melvorTotH:FreezingRafting",
            "melvorTotH:WaterDive",
            "melvorTotH:WaterfallCrossing",
            "melvorTotH:MountainTrail",
            "melvorTotH:LavaTrail",
            "melvorAoD:RiverCrossing",
            "melvorAoD:CaveTrail",
            "melvorAoD:OceanDrifting",
            "melvorItA:Tier_1_1",
            "melvorItA:Tier_1_2",
            "melvorItA:Tier_1_3",
            "melvorItA:Tier_2_1",
            "melvorItA:Tier_2_2",
            "melvorItA:Tier_2_3",
            "melvorItA:Tier_3_1",
            "melvorItA:Tier_3_2",
            "melvorItA:Tier_3_3",
            "melvorItA:Tier_4_1",
            "melvorItA:Tier_4_2",
            "melvorItA:Tier_4_3",
            "melvorItA:Tier_5_1",
            "melvorItA:Tier_5_2",
            "melvorItA:Tier_5_3",
            "melvorItA:Tier_6_1",
            "melvorItA:Tier_6_2",
            "melvorItA:Tier_6_3",
            "melvorItA:Tier_7_1",
            "melvorItA:Tier_7_2",
            "melvorItA:Tier_7_3",
            "melvorItA:Tier_8_1",
            "melvorItA:Tier_8_2",
            "melvorItA:Tier_8_3",
            "melvorItA:Tier_9_1",
            "melvorItA:Tier_9_2",
            "melvorItA:Tier_9_3",
            "melvorItA:Tier_10_1",
            "melvorItA:Tier_10_2",
            "melvorItA:Tier_10_3",
            "melvorItA:Tier_11_1",
            "melvorItA:Tier_11_2",
            "melvorItA:Tier_11_3",
            "melvorItA:Tier_12_1",
            "melvorItA:Tier_12_2",
            "melvorItA:Tier_12_3"
          ]
        }
      ]
    },
    "HerbloreCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:CombatPotions",
            "melvorF:SkillPotions",
            "melvorItA:AbyssalCombatPotions",
            "melvorItA:AbyssalSkillPotions"
          ]
        }
      ]
    },
    "HerbloreActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Melee_Accuracy_Potion",
            "melvorF:Melee_Strength_Potion",
            "melvorF:Melee_Evasion_Potion",
            "melvorF:Ranged_Assistance_Potion",
            "melvorF:Magic_Assistance_Potion",
            "melvorF:Regeneration_Potion",
            "melvorF:Damage_Reduction_Potion",
            "melvorF:Bird_Nest_Potion",
            "melvorF:Fishermans_Potion",
            "melvorF:Controlled_Heat_Potion",
            "melvorF:Generous_Cook_Potion",
            "melvorF:Perfect_Swing_Potion",
            "melvorF:Seeing_Gold_Potion",
            "melvorF:Gentle_Hands_Potion",
            "melvorF:Farming_Potion",
            "melvorF:Fletching_Potion",
            "melvorF:Crafting_Potion",
            "melvorF:Elemental_Potion",
            "melvorF:Herblore_Potion",
            "melvorF:Magic_Damage_Potion",
            "melvorF:Ranged_Strength_Potion",
            "melvorF:Diamond_Luck_Potion",
            "melvorF:Divine_Potion",
            "melvorF:Lucky_Herb_Potion",
            "melvorF:Performance_Enhancing_Potion",
            "melvorF:Necromancer_Potion",
            "melvorF:Hinder_Potion",
            "melvorF:Famished_Potion",
            "melvorF:Lethal_Toxins_Potion",
            "melvorF:Secret_Stardust_Potion",
            "melvorTotH:Area_Control_Potion",
            "melvorTotH:Adaptive_Defence_Potion",
            "melvorTotH:Slayer_Bounty_Potion",
            "melvorTotH:Holy_Bulwark_Potion",
            "melvorTotH:Adaptive_Accuracy_Potion",
            "melvorTotH:Reaper_Potion",
            "melvorTotH:Penetration_Potion",
            "melvorTotH:Critical_Strike_Potion",
            "melvorTotH:Alchemic_Practice_Potion",
            "melvorTotH:Gem_Detector_Potion",
            "melvorTotH:Multicooker_Potion",
            "melvorTotH:Star_Seeker_Potion",
            "melvorTotH:Traps_Potion",
            "melvorTotH:Blacksmith_Potion",
            "melvorTotH:Enkindled_Yields_Potion",
            "melvorTotH:Alt_Magic_Potion",
            "melvorAoD:Barrier_Touch_Potion",
            "melvorAoD:Barrier_Igniter_Potion",
            "melvorAoD:Unholy_Potion",
            "melvorAoD:Cursed_Potion",
            "melvorAoD:Crystallization_Potion",
            "melvorAoD:Crystal_Sanction_Potion",
            "melvorItA:Harvesters_Potion",
            "melvorItA:Corrupted_Fighter_Potion",
            "melvorItA:Piece_Finder_Potion",
            "melvorItA:Laceration_Potion",
            "melvorItA:Gloomgrowth_Potion",
            "melvorItA:Blighted_Touch_Potion",
            "melvorItA:Abyssal_Miner_Potion",
            "melvorItA:Shadeveil_Potion",
            "melvorItA:Abyssal_Combination_Potion",
            "melvorItA:Fear_Potion",
            "melvorItA:Abyssal_Consumable_Potion",
            "melvorItA:Withering_Potion",
            "melvorItA:Silent_Thief_Potion",
            "melvorItA:Echoing_Lure_Potion",
            "melvorItA:Silence_Potion",
            "melvorItA:Soulsnap_Potion",
            "melvorItA:Dark_Ritual_Potion",
            "melvorItA:Eldritch_Curse_Potion",
            "melvorItA:Void_Stabilisation_Potion",
            "melvorItA:Voidburst_Potion"
          ]
        }
      ]
    },
    "RunecraftingCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:StandardRunes",
            "melvorF:CombinationRunes",
            "melvorF:StavesWands",
            "melvorF:AirMagicGear",
            "melvorF:WaterMagicGear",
            "melvorF:EarthMagicGear",
            "melvorF:FireMagicGear",
            "melvorTotH:PoisonMagicGear",
            "melvorTotH:InfernalMagicGear",
            "melvorTotH:LightningMagicGear",
            "melvorAoD:SpecialItems",
            "melvorItA:AbyssalRunes",
            "melvorItA:AbyssalComboRunes",
            "melvorItA:AbyssalStaffsWands",
            "melvorItA:EliteWizardGear",
            "melvorItA:MasterWizardGear",
            "melvorItA:MysticWizardGear",
            "melvorItA:LegendaryWizardGear",
            "melvorItA:MythicalWizardGear",
            "melvorItA:EternalGear"
          ]
        }
      ]
    },
    "RunecraftingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Air_Rune",
            "melvorF:Mind_Rune",
            "melvorF:Water_Rune",
            "melvorF:Earth_Rune",
            "melvorF:Fire_Rune",
            "melvorF:Body_Rune",
            "melvorF:Chaos_Rune",
            "melvorF:Death_Rune",
            "melvorF:Blood_Rune",
            "melvorF:Ancient_Rune",
            "melvorF:Light_Rune",
            "melvorF:Nature_Rune",
            "melvorF:Havoc_Rune",
            "melvorF:Spirit_Rune",
            "melvorF:Mist_Rune",
            "melvorF:Dust_Rune",
            "melvorF:Mud_Rune",
            "melvorF:Smoke_Rune",
            "melvorF:Steam_Rune",
            "melvorF:Lava_Rune",
            "melvorF:Staff_of_Air",
            "melvorF:Staff_of_Water",
            "melvorF:Staff_of_Earth",
            "melvorF:Staff_of_Fire",
            "melvorF:Air_Battlestaff",
            "melvorF:Water_Battlestaff",
            "melvorF:Earth_Battlestaff",
            "melvorF:Fire_Battlestaff",
            "melvorF:Mystic_Air_Staff",
            "melvorF:Mystic_Water_Staff",
            "melvorF:Mystic_Earth_Staff",
            "melvorF:Mystic_Fire_Staff",
            "melvorF:Air_Acolyte_Wizard_Hat",
            "melvorF:Air_Acolyte_Wizard_Robes",
            "melvorF:Air_Acolyte_Wizard_Bottoms",
            "melvorF:Air_Acolyte_Wizard_Boots",
            "melvorF:Water_Acolyte_Wizard_Hat",
            "melvorF:Water_Acolyte_Wizard_Robes",
            "melvorF:Water_Acolyte_Wizard_Bottoms",
            "melvorF:Water_Acolyte_Wizard_Boots",
            "melvorF:Earth_Acolyte_Wizard_Hat",
            "melvorF:Earth_Acolyte_Wizard_Robes",
            "melvorF:Earth_Acolyte_Wizard_Bottoms",
            "melvorF:Earth_Acolyte_Wizard_Boots",
            "melvorF:Fire_Acolyte_Wizard_Hat",
            "melvorF:Fire_Acolyte_Wizard_Robes",
            "melvorF:Fire_Acolyte_Wizard_Bottoms",
            "melvorF:Fire_Acolyte_Wizard_Boots",
            "melvorF:Air_Adept_Wizard_Hat",
            "melvorF:Air_Adept_Wizard_Robes",
            "melvorF:Air_Adept_Wizard_Bottoms",
            "melvorF:Air_Adept_Wizard_Boots",
            "melvorF:Water_Adept_Wizard_Hat",
            "melvorF:Water_Adept_Wizard_Robes",
            "melvorF:Water_Adept_Wizard_Bottoms",
            "melvorF:Water_Adept_Wizard_Boots",
            "melvorF:Earth_Adept_Wizard_Hat",
            "melvorF:Earth_Adept_Wizard_Robes",
            "melvorF:Earth_Adept_Wizard_Bottoms",
            "melvorF:Earth_Adept_Wizard_Boots",
            "melvorF:Fire_Adept_Wizard_Hat",
            "melvorF:Fire_Adept_Wizard_Robes",
            "melvorF:Fire_Adept_Wizard_Bottoms",
            "melvorF:Fire_Adept_Wizard_Boots",
            "melvorF:Air_Expert_Wizard_Hat",
            "melvorF:Air_Expert_Wizard_Robes",
            "melvorF:Air_Expert_Wizard_Bottoms",
            "melvorF:Air_Expert_Wizard_Boots",
            "melvorF:Water_Expert_Wizard_Hat",
            "melvorF:Water_Expert_Wizard_Robes",
            "melvorF:Water_Expert_Wizard_Bottoms",
            "melvorF:Water_Expert_Wizard_Boots",
            "melvorF:Earth_Expert_Wizard_Hat",
            "melvorF:Earth_Expert_Wizard_Robes",
            "melvorF:Earth_Expert_Wizard_Bottoms",
            "melvorF:Earth_Expert_Wizard_Boots",
            "melvorF:Fire_Expert_Wizard_Hat",
            "melvorF:Fire_Expert_Wizard_Robes",
            "melvorF:Fire_Expert_Wizard_Bottoms",
            "melvorF:Fire_Expert_Wizard_Boots",
            "melvorF:Air_Imbued_Wand",
            "melvorF:Water_Imbued_Wand",
            "melvorF:Earth_Imbued_Wand",
            "melvorF:Fire_Imbued_Wand",
            "melvorTotH:Poison_Rune",
            "melvorTotH:Decay_Rune",
            "melvorTotH:Infernal_Rune",
            "melvorTotH:Despair_Rune",
            "melvorTotH:Soul_Rune",
            "melvorTotH:Lightning_Rune",
            "melvorTotH:Archaic_Rune",
            "melvorTotH:Calamity_Rune",
            "melvorTotH:Poison_Master_Wizard_Hat",
            "melvorTotH:Poison_Master_Wizard_Robes",
            "melvorTotH:Poison_Master_Wizard_Bottoms",
            "melvorTotH:Poison_Master_Wizard_Boots",
            "melvorTotH:Infernal_Master_Wizard_Hat",
            "melvorTotH:Infernal_Master_Wizard_Robes",
            "melvorTotH:Infernal_Master_Wizard_Bottoms",
            "melvorTotH:Infernal_Master_Wizard_Boots",
            "melvorTotH:Lightning_Master_Wizard_Hat",
            "melvorTotH:Lightning_Master_Wizard_Robes",
            "melvorTotH:Lightning_Master_Wizard_Bottoms",
            "melvorTotH:Lightning_Master_Wizard_Boots",
            "melvorTotH:Poison_Legendary_Wizard_Hat",
            "melvorTotH:Poison_Legendary_Wizard_Robes",
            "melvorTotH:Poison_Legendary_Wizard_Bottoms",
            "melvorTotH:Poison_Legendary_Wizard_Boots",
            "melvorTotH:Infernal_Legendary_Wizard_Hat",
            "melvorTotH:Infernal_Legendary_Wizard_Robes",
            "melvorTotH:Infernal_Legendary_Wizard_Bottoms",
            "melvorTotH:Infernal_Legendary_Wizard_Boots",
            "melvorTotH:Lightning_Legendary_Wizard_Hat",
            "melvorTotH:Lightning_Legendary_Wizard_Robes",
            "melvorTotH:Lightning_Legendary_Wizard_Bottoms",
            "melvorTotH:Lightning_Legendary_Wizard_Boots",
            "melvorTotH:Poison_Mythical_Wizard_Hat",
            "melvorTotH:Poison_Mythical_Wizard_Robes",
            "melvorTotH:Poison_Mythical_Wizard_Bottoms",
            "melvorTotH:Poison_Mythical_Wizard_Boots",
            "melvorTotH:Infernal_Mythical_Wizard_Hat",
            "melvorTotH:Infernal_Mythical_Wizard_Robes",
            "melvorTotH:Infernal_Mythical_Wizard_Bottoms",
            "melvorTotH:Infernal_Mythical_Wizard_Boots",
            "melvorTotH:Lightning_Mythical_Wizard_Hat",
            "melvorTotH:Lightning_Mythical_Wizard_Robes",
            "melvorTotH:Lightning_Mythical_Wizard_Bottoms",
            "melvorTotH:Lightning_Mythical_Wizard_Boots",
            "melvorTotH:Poison_Staff",
            "melvorTotH:Infernal_Staff",
            "melvorTotH:Lightning_Staff",
            "melvorTotH:Meteorite_Staff",
            "melvorTotH:Despair_Wand",
            "melvorTotH:Archaic_Wand",
            "melvorTotH:Calamity_Wand",
            "melvorAoD:Unholy_Wizard_Robes",
            "melvorAoD:Unholy_Staff",
            "melvorAoD:Crystal_Battlestaff",
            "melvorAoD:Mystic_Pure_Crystal_Staff",
            "melvorItA:Abyss_Rune",
            "melvorItA:Abyssal_Staff",
            "melvorItA:Ire_Rune",
            "melvorItA:Abyssal_Elite_Wizard_Hat",
            "melvorItA:Abyssal_Elite_Wizard_Boots",
            "melvorItA:Abyssal_Elite_Wizard_Legs",
            "melvorItA:Abyssal_Elite_Wizard_Robes",
            "melvorItA:Abyssal_Wand",
            "melvorItA:Brume_Rune",
            "melvorItA:Fury_Rune",
            "melvorItA:Brume_Staff",
            "melvorItA:Abyssal_Master_Wizard_Hat",
            "melvorItA:Brume_Master_Wizard_Hat",
            "melvorItA:Abyssal_Master_Wizard_Boots",
            "melvorItA:Brume_Master_Wizard_Boots",
            "melvorItA:Abyssal_Master_Wizard_Legs",
            "melvorItA:Umbral_Rune",
            "melvorItA:Brume_Master_Wizard_Legs",
            "melvorItA:Abyssal_Master_Wizard_Robes",
            "melvorItA:Brume_Master_Wizard_Robes",
            "melvorItA:Brume_Wand",
            "melvorItA:Gloom_Rune",
            "melvorItA:Wrath_Rune",
            "melvorItA:Gloom_Staff",
            "melvorItA:Abyssal_Mystic_Wizard_Hat",
            "melvorItA:Brume_Mystic_Wizard_Hat",
            "melvorItA:Abyssal_Mystic_Wizard_Boots",
            "melvorItA:Gloom_Mystic_Wizard_Hat",
            "melvorItA:Brume_Mystic_Wizard_Boots",
            "melvorItA:Abyssal_Mystic_Wizard_Legs",
            "melvorItA:Gloom_Mystic_Wizard_Boots",
            "melvorItA:Shade_Rune",
            "melvorItA:Brume_Mystic_Wizard_Legs",
            "melvorItA:Abyssal_Mystic_Wizard_Robes",
            "melvorItA:Gloom_Mystic_Wizard_Legs",
            "melvorItA:Brume_Mystic_Wizard_Robes",
            "melvorItA:Gloom_Wand",
            "melvorItA:Gloom_Mystic_Wizard_Robes",
            "melvorItA:Wither_Rune",
            "melvorItA:Hollow_Rune",
            "melvorItA:Abyssal_Legendary_Wizard_Hat",
            "melvorItA:Wither_Staff",
            "melvorItA:Brume_Legendary_Wizard_Hat",
            "melvorItA:Abyssal_Legendary_Wizard_Boots",
            "melvorItA:Gloom_Legendary_Wizard_Hat",
            "melvorItA:Brume_Legendary_Wizard_Boots",
            "melvorItA:Wither_Legendary_Wizard_Hat",
            "melvorItA:Abyssal_Legendary_Wizard_Legs",
            "melvorItA:Gloom_Legendary_Wizard_Boots",
            "melvorItA:Dread_Rune",
            "melvorItA:Brume_Legendary_Wizard_Legs",
            "melvorItA:Wither_Legendary_Wizard_Boots",
            "melvorItA:Abyssal_Legendary_Wizard_Robes",
            "melvorItA:Gloom_Legendary_Wizard_Legs",
            "melvorItA:Brume_Legendary_Wizard_Robes",
            "melvorItA:Wither_Legendary_Wizard_Legs",
            "melvorItA:Wither_Wand",
            "melvorItA:Gloom_Legendary_Wizard_Robes",
            "melvorItA:Wither_Legendary_Wizard_Robes",
            "melvorItA:Nether_Rune",
            "melvorItA:Hex_Rune",
            "melvorItA:Abyssal_Mythical_Wizard_Hat",
            "melvorItA:Brume_Mythical_Wizard_Hat",
            "melvorItA:Nether_Staff",
            "melvorItA:Desolate_Rune",
            "melvorItA:Abyssal_Mythical_Wizard_Boots",
            "melvorItA:Gloom_Mythical_Wizard_Hat",
            "melvorItA:Scourge_Rune",
            "melvorItA:Brume_Mythical_Wizard_Boots",
            "melvorItA:Nether_Mythical_Wizard_Hat",
            "melvorItA:Nether_Wand",
            "melvorItA:Abyssal_Mythical_Wizard_Legs",
            "melvorItA:Gloom_Mythical_Wizard_Boots",
            "melvorItA:Wither_Mythical_Wizard_Hat",
            "melvorItA:Brume_Mythical_Wizard_Legs",
            "melvorItA:Wither_Mythical_Wizard_Boots",
            "melvorItA:Nether_Mythical_Wizard_Boots",
            "melvorItA:Desolation_Wand",
            "melvorItA:Cataclysm_Rune",
            "melvorItA:Abyssal_Mythical_Wizard_Robes",
            "melvorItA:Gloom_Mythical_Wizard_Legs",
            "melvorItA:Brume_Mythical_Wizard_Robes",
            "melvorItA:Wither_Mythical_Wizard_Legs",
            "melvorItA:Nether_Mythical_Wizard_Legs",
            "melvorItA:Gloom_Mythical_Wizard_Robes",
            "melvorItA:Cataclysm_Wand",
            "melvorItA:Wither_Mythical_Wizard_Robes",
            "melvorItA:Nether_Mythical_Wizard_Robes",
            "melvorItA:Eternal_Rune",
            "melvorItA:Eternity_Staff_Uncharged"
          ]
        }
      ]
    },
    "CraftingCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:LeatherArmour",
            "melvorF:Dragonhide",
            "melvorF:Rings",
            "melvorF:Necklaces",
            "melvorF:Bags",
            "melvorF:Urns",
            "melvorTotH:HardwoodArmour",
            "melvorAoD:SpecialItems",
            "melvorAoD:ImbuedMaterials",
            "melvorItA:AbyssalArmour",
            "melvorItA:AbyssalRings",
            "melvorItA:AbyssalAmulets",
            "melvorItA:AbyssalConsumables"
          ]
        }
      ]
    },
    "CraftingSubcategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Jewelry",
            "melvorF:Consumables",
            "melvorItA:AbyssalJewelry"
          ]
        }
      ]
    },
    "CraftingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Leather_Gloves",
            "melvorF:Leather_Boots",
            "melvorF:Leather_Cowl",
            "melvorF:Leather_Vambraces",
            "melvorF:Leather_Body",
            "melvorF:Leather_Chaps",
            "melvorF:Green_Dhide_Vambraces",
            "melvorF:Green_Dhide_Chaps",
            "melvorF:Green_Dhide_Body",
            "melvorF:Blue_Dhide_Vambraces",
            "melvorF:Blue_Dhide_Chaps",
            "melvorF:Blue_Dhide_Body",
            "melvorF:Red_Dhide_Vambraces",
            "melvorF:Red_Dhide_Chaps",
            "melvorF:Red_Dhide_Body",
            "melvorF:Black_Dhide_Vambraces",
            "melvorF:Black_Dhide_Chaps",
            "melvorF:Black_Dhide_Body",
            "melvorF:Silver_Topaz_Ring",
            "melvorF:Silver_Sapphire_Ring",
            "melvorF:Silver_Ruby_Ring",
            "melvorF:Silver_Emerald_Ring",
            "melvorF:Silver_Diamond_Ring",
            "melvorF:Gold_Topaz_Ring",
            "melvorF:Gold_Sapphire_Ring",
            "melvorF:Gold_Ruby_Ring",
            "melvorF:Gold_Emerald_Ring",
            "melvorF:Gold_Diamond_Ring",
            "melvorF:Silver_Topaz_Necklace",
            "melvorF:Silver_Sapphire_Necklace",
            "melvorF:Silver_Ruby_Necklace",
            "melvorF:Silver_Emerald_Necklace",
            "melvorF:Silver_Diamond_Necklace",
            "melvorF:Gold_Topaz_Necklace",
            "melvorF:Gold_Sapphire_Necklace",
            "melvorF:Gold_Ruby_Necklace",
            "melvorF:Gold_Emerald_Necklace",
            "melvorF:Gold_Diamond_Necklace",
            "melvorF:Hard_Leather_Gloves",
            "melvorF:Hard_Leather_Boots",
            "melvorF:Hard_Leather_Cowl",
            "melvorF:Hard_Leather_Vambraces",
            "melvorF:Hard_Leather_Body",
            "melvorF:Hard_Leather_Chaps",
            "melvorF:Green_Dhide_Shield",
            "melvorF:Blue_Dhide_Shield",
            "melvorF:Red_Dhide_Shield",
            "melvorF:Black_Dhide_Shield",
            "melvorF:Thiefs_Moneysack",
            "melvorF:Seed_Pouch",
            "melvorF:Runecrafting_Pouch",
            "melvorF:Alchemists_Bag",
            "melvorF:Ring_Of_Blade_Echoes",
            "melvorF:Ring_Of_Barrage",
            "melvorF:Ring_Of_Spirit_Power",
            "melvorF:Small_Urn",
            "melvorF:Medium_Urn",
            "melvorTotH:Elderwood_Vambraces",
            "melvorTotH:Elderwood_Chaps",
            "melvorTotH:Elderwood_Shield",
            "melvorTotH:Elderwood_Body",
            "melvorTotH:Revenant_Vambraces",
            "melvorTotH:Revenant_Chaps",
            "melvorTotH:Revenant_Shield",
            "melvorTotH:Revenant_Body",
            "melvorTotH:Carrion_Vambraces",
            "melvorTotH:Carrion_Chaps",
            "melvorTotH:Carrion_Shield",
            "melvorTotH:Carrion_Body",
            "melvorTotH:Iridium_Onyx_Ring",
            "melvorTotH:Palladium_Onyx_Ring",
            "melvorTotH:Iridium_Oricha_Ring",
            "melvorTotH:Palladium_Oricha_Ring",
            "melvorTotH:Iridium_Cerulean_Ring",
            "melvorTotH:Palladium_Cerulean_Ring",
            "melvorTotH:Iridium_Runestone_Ring",
            "melvorTotH:Palladium_Runestone_Ring",
            "melvorTotH:Iridium_Zephyte_Ring",
            "melvorTotH:Palladium_Zephyte_Ring",
            "melvorTotH:Meteorite_Warrior_Ring",
            "melvorTotH:Meteorite_Marksman_Ring",
            "melvorTotH:Meteorite_Spellcaster_Ring",
            "melvorTotH:Iridium_Onyx_Necklace",
            "melvorTotH:Palladium_Onyx_Necklace",
            "melvorTotH:Iridium_Oricha_Necklace",
            "melvorTotH:Palladium_Oricha_Necklace",
            "melvorTotH:Iridium_Cerulean_Necklace",
            "melvorTotH:Palladium_Cerulean_Necklace",
            "melvorTotH:Iridium_Runestone_Necklace",
            "melvorTotH:Palladium_Runestone_Necklace",
            "melvorTotH:Iridium_Zephyte_Necklace",
            "melvorTotH:Palladium_Zephyte_Necklace",
            "melvorTotH:Artisan_Pouch",
            "melvorTotH:Kindling_Pouch",
            "melvorTotH:Stamina_Pouch",
            "melvorTotH:Spirit_Bag",
            "melvorTotH:Chefs_Bag",
            "melvorTotH:Summoners_Bag",
            "melvorTotH:Large_Urn",
            "melvorAoD:Basic_Bag",
            "melvorAoD:Barrier_Dust",
            "melvorAoD:Imbued_Leather",
            "melvorAoD:Imbued_Green_Dragonhide",
            "melvorAoD:Imbued_Blue_Dragonhide",
            "melvorAoD:Imbued_Red_Dragonhide",
            "melvorAoD:Imbued_Black_Dragonhide",
            "melvorAoD:Imbued_Elder_Dragonhide",
            "melvorAoD:Unholy_Body",
            "melvorAoD:Unholy_Amulet",
            "melvorAoD:Unholy_Ring",
            "melvorAoD:Refined_Crystal",
            "melvorAoD:Refined_Pure_Crystal",
            "melvorAoD:Ring_of_Barrier_Touch",
            "melvorAoD:Amulet_of_Barrier_Touch",
            "melvorItA:Abyssal_Leather_Boots",
            "melvorItA:Azurian_Nightopal_Ring_I",
            "melvorItA:Abyssal_Leather_Legs",
            "melvorItA:Azurian_Shadowpearl_Ring_I",
            "melvorItA:Azurian_Nightopal_Amulet_I",
            "melvorItA:Abyssal_Leather_Body",
            "melvorItA:Azurian_Moonstone_Ring_I",
            "melvorItA:Azurian_Shadowpearl_Amulet_I",
            "melvorItA:Azurian_Voidheart_Ring_I",
            "melvorItA:Azurian_Moonstone_Amulet_I",
            "melvorItA:Harvesting_Consumable_I",
            "melvorItA:Abyssia_Coif",
            "melvorItA:Azurian_Voidheart_Amulet_I",
            "melvorItA:Corrupted_Light_Consumable_I",
            "melvorItA:Abyssia_Legs",
            "melvorItA:Abyssia_Body",
            "melvorItA:Azurian_Nightopal_Ring_II",
            "melvorItA:Dark_Summon_Consumable_I",
            "melvorItA:Azurian_Shadowpearl_Ring_II",
            "melvorItA:Azurian_Nightopal_Amulet_II",
            "melvorItA:Azurian_Moonstone_Ring_II",
            "melvorItA:Azurian_Shadowpearl_Amulet_II",
            "melvorItA:Azurian_Voidheart_Ring_II",
            "melvorItA:Azurian_Moonstone_Amulet_II",
            "melvorItA:Azurian_Voidheart_Amulet_II",
            "melvorItA:Toxicity_Consumable_I",
            "melvorItA:Brumia_Coif",
            "melvorItA:Abyssal_Essence_Consumable_I",
            "melvorItA:Brumia_Legs",
            "melvorItA:Brumia_Body",
            "melvorItA:Obsidian_Nightopal_Ring_I",
            "melvorItA:Shade_Consumable_I",
            "melvorItA:Obsidian_Shadowpearl_Ring_I",
            "melvorItA:Obsidian_Nightopal_Amulet_I",
            "melvorItA:Obsidian_Moonstone_Ring_I",
            "melvorItA:Obsidian_Shadowpearl_Amulet_I",
            "melvorItA:Obsidian_Voidheart_Ring_I",
            "melvorItA:Obsidian_Moonstone_Amulet_I",
            "melvorItA:Obsidian_Voidheart_Amulet_I",
            "melvorItA:Fear_Consumable_I",
            "melvorItA:Gloomia_Coif",
            "melvorItA:Abyssal_Resist_Consumable_I",
            "melvorItA:Gloomia_Legs",
            "melvorItA:Deep_Wounds_Consumable_I",
            "melvorItA:Gloomia_Body",
            "melvorItA:Obsidian_Nightopal_Ring_II",
            "melvorItA:Withering_Consumable_I",
            "melvorItA:Obsidian_Shadowpearl_Ring_II",
            "melvorItA:Obsidian_Nightopal_Amulet_II",
            "melvorItA:Obsidian_Moonstone_Ring_II",
            "melvorItA:Obsidian_Shadowpearl_Amulet_II",
            "melvorItA:Obsidian_Voidheart_Ring_II",
            "melvorItA:Obsidian_Moonstone_Amulet_II",
            "melvorItA:Obsidian_Voidheart_Amulet_II",
            "melvorItA:Silence_Consumable_I",
            "melvorItA:Withia_Coif",
            "melvorItA:Soul_Harvesting_Consumable_I",
            "melvorItA:Withia_Legs",
            "melvorItA:Withia_Body",
            "melvorItA:Obzurian_Melee_Breaker_Ring",
            "melvorItA:Item_Cost_Consumable_I",
            "melvorItA:Obzurian_Ranged_Impactor_Ring",
            "melvorItA:Obzurian_Critical_Strike_Amulet",
            "melvorItA:Obzurian_Magic_Debilitator_Ring",
            "melvorItA:Obzurian_Versatile_Hunter_Amulet",
            "melvorItA:Obzurian_Unnatural_Vitality_Ring",
            "melvorItA:Obzurian_Rampant_Power_Amulet",
            "melvorItA:Obzurian_Unbreakable_Defender_Amulet",
            "melvorItA:Eldritch_Curse_Consumable_I",
            "melvorItA:Nethia_Coif",
            "melvorItA:Voidburst_Consumable_I",
            "melvorItA:Nethia_Legs",
            "melvorItA:Nethia_Body"
          ]
        }
      ]
    },
    "FletchingCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Arrows",
            "melvorF:Shortbows",
            "melvorF:Longbows",
            "melvorF:Bolts",
            "melvorF:Crossbows",
            "melvorF:Javelins",
            "melvorAoD:SpecialItems",
            "melvorItA:AbyssalArrows",
            "melvorItA:AbyssalBows",
            "melvorItA:AbyssalBolts",
            "melvorItA:AbyssalJavelins",
            "melvorItA:AbyssalCrossbows",
            "melvorItA:EternalBows"
          ]
        }
      ]
    },
    "FletchingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Arrow_Shafts",
            "melvorF:Headless_Arrows",
            "melvorF:Bronze_Arrows",
            "melvorF:Iron_Arrows",
            "melvorF:Steel_Arrows",
            "melvorF:Mithril_Arrows",
            "melvorF:Adamant_Arrows",
            "melvorF:Rune_Arrows",
            "melvorF:Dragon_Arrows",
            "melvorF:Normal_Shortbow_U",
            "melvorF:Oak_Shortbow_U",
            "melvorF:Willow_Shortbow_U",
            "melvorF:Maple_Shortbow_U",
            "melvorF:Yew_Shortbow_U",
            "melvorF:Magic_Shortbow_U",
            "melvorF:Normal_Shortbow",
            "melvorF:Oak_Shortbow",
            "melvorF:Willow_Shortbow",
            "melvorF:Maple_Shortbow",
            "melvorF:Yew_Shortbow",
            "melvorF:Magic_Shortbow",
            "melvorF:Normal_Longbow_U",
            "melvorF:Oak_Longbow_U",
            "melvorF:Willow_Longbow_U",
            "melvorF:Maple_Longbow_U",
            "melvorF:Yew_Longbow_U",
            "melvorF:Magic_Longbow_U",
            "melvorF:Normal_Longbow",
            "melvorF:Oak_Longbow",
            "melvorF:Willow_Longbow",
            "melvorF:Maple_Longbow",
            "melvorF:Yew_Longbow",
            "melvorF:Magic_Longbow",
            "melvorF:Redwood_Shortbow_U",
            "melvorF:Redwood_Shortbow",
            "melvorF:Redwood_Longbow_U",
            "melvorF:Redwood_Longbow",
            "melvorF:Topaz_Bolts",
            "melvorF:Sapphire_Bolts",
            "melvorF:Ruby_Bolts",
            "melvorF:Emerald_Bolts",
            "melvorF:Diamond_Bolts",
            "melvorF:Bronze_Crossbow",
            "melvorF:Iron_Crossbow",
            "melvorF:Steel_Crossbow",
            "melvorF:Mithril_Crossbow",
            "melvorF:Adamant_Crossbow",
            "melvorF:Rune_Crossbow",
            "melvorF:Dragon_Crossbow",
            "melvorF:Bronze_Javelin",
            "melvorF:Iron_Javelin",
            "melvorF:Steel_Javelin",
            "melvorF:Mithril_Javelin",
            "melvorF:Adamant_Javelin",
            "melvorF:Rune_Javelin",
            "melvorF:Dragon_Javelin",
            "melvorF:Jadestone_Bolts",
            "melvorTotH:Elderwood_Shortbow_U",
            "melvorTotH:Elderwood_Shortbow",
            "melvorTotH:Elderwood_Longbow_U",
            "melvorTotH:Elderwood_Longbow",
            "melvorTotH:Revenant_Shortbow_U",
            "melvorTotH:Revenant_Shortbow",
            "melvorTotH:Revenant_Longbow_U",
            "melvorTotH:Revenant_Longbow",
            "melvorTotH:Carrion_Shortbow_U",
            "melvorTotH:Carrion_Shortbow",
            "melvorTotH:Carrion_Longbow_U",
            "melvorTotH:Carrion_Longbow",
            "melvorTotH:Corundum_Arrows",
            "melvorTotH:Augite_Arrows",
            "melvorTotH:Divine_Arrows",
            "melvorTotH:Ethereal_Arrows",
            "melvorTotH:Onyx_Bolts",
            "melvorTotH:Meteorite_Bolts",
            "melvorTotH:Decay_Bolts",
            "melvorTotH:Zephyte_Bolts",
            "melvorTotH:Corundum_Crossbow",
            "melvorTotH:Augite_Crossbow",
            "melvorTotH:Divine_Crossbow",
            "melvorTotH:Meteorite_Crossbow",
            "melvorTotH:Corundum_Javelin",
            "melvorTotH:Augite_Javelin",
            "melvorTotH:Divine_Javelin",
            "melvorTotH:Meteorite_Javelin",
            "melvorAoD:Unholy_Longbow_U",
            "melvorAoD:Unholy_Longbow",
            "melvorAoD:Darksteel_Arrows",
            "melvorAoD:Aranite_Arrows",
            "melvorAoD:Crystal_Arrows",
            "melvorAoD:Pure_Crystal_Arrows",
            "melvorAoD:Crystal_Shortbow",
            "melvorAoD:Crystal_Longbow",
            "melvorAoD:Pure_Crystal_Shortbow",
            "melvorAoD:Pure_Crystal_Longbow",
            "melvorAoD:Crystal_Javelin",
            "melvorAoD:Pure_Crystal_Javelin",
            "melvorAoD:Crystal_Crossbow",
            "melvorAoD:Pure_Crystal_Crossbow",
            "melvorItA:Abyssium_Arrows",
            "melvorItA:Twisted_Shortbow",
            "melvorItA:Twisted_Longbow",
            "melvorItA:Abyssium_Javelin",
            "melvorItA:Nightopal_Bolts",
            "melvorItA:Abyssium_Crossbow",
            "melvorItA:Brumite_Arrows",
            "melvorItA:Plagueroot_Shortbow",
            "melvorItA:Plagueroot_Longbow",
            "melvorItA:Brumite_Javelin",
            "melvorItA:Shadowpearl_Bolts",
            "melvorItA:Brumite_Crossbow",
            "melvorItA:Gloomite_Arrows",
            "melvorItA:Shadebark_Shortbow",
            "melvorItA:Shadebark_Longbow",
            "melvorItA:Gloomite_Javelin",
            "melvorItA:Moonstone_Bolts",
            "melvorItA:Gloomite_Crossbow",
            "melvorItA:Witherite_Arrows",
            "melvorItA:Crumbletain_Shortbow",
            "melvorItA:Crumbletain_Longbow",
            "melvorItA:Witherite_Javelin",
            "melvorItA:Voidheart_Bolts",
            "melvorItA:Witherite_Crossbow",
            "melvorItA:Netherite_Arrows",
            "melvorItA:Whisperwillow_Shortbow",
            "melvorItA:Whisperwillow_Longbow",
            "melvorItA:Netherite_Javelin",
            "melvorItA:Voidburst_Bolts",
            "melvorItA:Netherite_Crossbow",
            "melvorItA:Riftwood_Bow_U",
            "melvorItA:Starwood_Bow_U",
            "melvorItA:Eternity_Bow_Uncharged"
          ]
        }
      ]
    },
    "FarmingCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Allotment",
            "melvorD:Herb",
            "melvorD:Tree",
            "melvorItA:Special"
          ]
        }
      ]
    },
    "FarmingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Potatoes",
            "melvorD:Onions",
            "melvorD:Cabbage",
            "melvorD:Tomatoes",
            "melvorD:Sweetcorn",
            "melvorD:Strawberries",
            "melvorD:Watermelon",
            "melvorD:Snape_Grass",
            "melvorD:Oak_Logs",
            "melvorD:Willow_Logs",
            "melvorD:Maple_Logs",
            "melvorD:Yew_Logs",
            "melvorD:Magic_Logs",
            "melvorD:Carrot",
            "melvorD:Garum_Herb",
            "melvorD:Sourweed_Herb",
            "melvorD:Mantalyme_Herb",
            "melvorD:Lemontyle_Herb",
            "melvorD:Oxilyme_Herb",
            "melvorD:Cherry",
            "melvorF:Poraxx_Herb",
            "melvorF:Pigtayle_Herb",
            "melvorF:Barrentoe_Herb",
            "melvorF:Apple",
            "melvorTotH:Pumpkin",
            "melvorTotH:Chilli",
            "melvorTotH:Mushrooms",
            "melvorTotH:Starfruit",
            "melvorTotH:Snowcress_Herb",
            "melvorTotH:Bitterlyme_Herb",
            "melvorTotH:Moonwort_Herb",
            "melvorTotH:Wurmtayle_Herb",
            "melvorTotH:Bananas",
            "melvorTotH:Grove_Logs",
            "melvorTotH:Elderwood_Logs",
            "melvorTotH:Carrion_Logs",
            "melvorAoD:Ancient_Wildberry",
            "melvorAoD:Ancient_Corn",
            "melvorAoD:Ancient_Carrot",
            "melvorItA:Abyssal_Potato",
            "melvorItA:Gloomsprout_Herb",
            "melvorItA:Abyssia_Tree",
            "melvorItA:Abyssal_Vein",
            "melvorItA:Nightgleam_Herb",
            "melvorItA:Abyssal_Pumpkin",
            "melvorItA:Blightblossom_Herb",
            "melvorItA:Brumia_Tree",
            "melvorItA:Twisted_Vein",
            "melvorItA:Gloompepper",
            "melvorItA:Blighted_Roots",
            "melvorItA:Shadefrond_Herb",
            "melvorItA:Gloomia_Tree",
            "melvorItA:Gloom_Vein",
            "melvorItA:Fearmallow_Herb",
            "melvorItA:Shadenut",
            "melvorItA:Essence",
            "melvorItA:Withia_Tree",
            "melvorItA:Witherlyme_Herb",
            "melvorItA:Shadow_Vein",
            "melvorItA:Withermelon",
            "melvorItA:Whispertallow_Herb",
            "melvorItA:Nethia_Tree",
            "melvorItA:Obsidian_Vein",
            "melvorItA:Whisperradish",
            "melvorItA:Echosnap_Herb",
            "melvorItA:Eldraroot_Herb",
            "melvorItA:Eldraberry",
            "melvorItA:Eldria_Tree",
            "melvorItA:Voidbloom_Herb",
            "melvorItA:Voidfire_Vein",
            "melvorItA:Eternity_Tree"
          ]
        }
      ]
    },
    "ThievingAreaID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:LOW_TOWN",
            "melvorF:GOLBIN_VILLAGE",
            "melvorF:BANDIT_HIDEOUT",
            "melvorF:FARMERS_MARKET",
            "melvorF:BANQUET",
            "melvorF:PORT_OF_LEMVOR",
            "melvorF:CAVE_OF_GIANTS",
            "melvorF:OUTSKIRTS",
            "melvorF:FORT",
            "melvorF:WIZARD_TOWER",
            "melvorF:ROYAL_CASTLE",
            "melvorTotH:LOST_RUINS",
            "melvorTotH:UNDEAD_PALACE",
            "melvorTotH:DESERT",
            "melvorTotH:MUSHROOM_FOREST",
            "melvorTotH:TWILIGHT",
            "melvorItA:CrimsonVillage",
            "melvorItA:BlightedReach",
            "melvorItA:ShadeveilMaze",
            "melvorItA:WitheringRuins",
            "melvorItA:SilentCrypt",
            "melvorItA:VoidVaults"
          ]
        }
      ]
    },
    "ThievingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:MAN",
            "melvorF:GOLBIN",
            "melvorF:LUMBERJACK",
            "melvorF:BOB_THE_FARMER",
            "melvorF:FISHERMAN",
            "melvorF:CHEF",
            "melvorF:MINER",
            "melvorF:KNIGHT",
            "melvorF:WOMAN",
            "melvorF:GOLBIN_CHIEF",
            "melvorF:BANDIT_THUG",
            "melvorF:MARAUDER",
            "melvorF:MERCHANT",
            "melvorF:ASSISTANT_COOK",
            "melvorF:DOCK_HAND",
            "melvorF:TROLL",
            "melvorF:CYCLOPS",
            "melvorF:SQUIRE",
            "melvorF:WIZARD",
            "melvorF:ACOLYTE",
            "melvorF:COURT_JESTER",
            "melvorF:KING",
            "melvorF:PRINCESS",
            "melvorTotH:EXPLORER",
            "melvorTotH:NECROMANCER",
            "melvorTotH:PILGRIM",
            "melvorTotH:ADVENTURER",
            "melvorTotH:DARK_KNIGHT",
            "melvorTotH:SAGE",
            "melvorTotH:TREASURE_HUNTER",
            "melvorTotH:TRAVELLING_MERCHANT",
            "melvorTotH:VAMPIRE",
            "melvorTotH:MADREMONTE",
            "melvorTotH:VAMPIRE_LORD",
            "melvorItA:TurnedMan",
            "melvorItA:TurnedWoman",
            "melvorItA:BlightedDryad",
            "melvorItA:TurnedFarmer",
            "melvorItA:DarkShade",
            "melvorItA:BlightedTreant",
            "melvorItA:DarkWraithlurker",
            "melvorItA:WitheringGargoyle",
            "melvorItA:DarkShadowmancer",
            "melvorItA:WitheringGolem",
            "melvorItA:SilentPoltergeist",
            "melvorItA:SilentWanderer",
            "melvorItA:VoidEnvoy",
            "melvorItA:SilentKeeper",
            "melvorItA:VoidShambler",
            "melvorItA:VoidGazer"
          ]
        }
      ]
    },
    "SmithingCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Bars",
            "melvorD:BronzeGear",
            "melvorD:IronGear",
            "melvorD:SteelGear",
            "melvorD:MithrilGear",
            "melvorD:AdamantGear",
            "melvorD:RuneGear",
            "melvorD:DragonGear",
            "melvorTotH:CorundumGear",
            "melvorTotH:AugiteGear",
            "melvorTotH:MeteoriteGear",
            "melvorTotH:DivineGear",
            "melvorAoD:ImbuedBars",
            "melvorAoD:CrystalGear",
            "melvorAoD:SpecialItems",
            "melvorItA:AbyssalBars",
            "melvorItA:AbyssiumGear",
            "melvorItA:BrumiteGear",
            "melvorItA:GloomiteGear",
            "melvorItA:WitheriteGear",
            "melvorItA:NetheriteGear",
            "melvorItA:EternalGear"
          ]
        }
      ]
    },
    "SmithingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Bronze_Bar",
            "melvorD:Iron_Bar",
            "melvorD:Steel_Bar",
            "melvorD:Gold_Bar",
            "melvorD:Mithril_Bar",
            "melvorD:Adamantite_Bar",
            "melvorD:Runite_Bar",
            "melvorD:Dragonite_Bar",
            "melvorD:Silver_Bar",
            "melvorD:Bronze_Dagger",
            "melvorD:Bronze_Sword",
            "melvorD:Bronze_Battleaxe",
            "melvorD:Bronze_2H_Sword",
            "melvorD:Bronze_Helmet",
            "melvorD:Bronze_Boots",
            "melvorD:Bronze_Platelegs",
            "melvorD:Bronze_Platebody",
            "melvorD:Iron_Dagger",
            "melvorD:Iron_Sword",
            "melvorD:Iron_Battleaxe",
            "melvorD:Iron_2H_Sword",
            "melvorD:Iron_Helmet",
            "melvorD:Iron_Boots",
            "melvorD:Iron_Platelegs",
            "melvorD:Iron_Platebody",
            "melvorD:Steel_Dagger",
            "melvorD:Steel_Sword",
            "melvorD:Steel_Battleaxe",
            "melvorD:Steel_2H_Sword",
            "melvorD:Steel_Helmet",
            "melvorD:Steel_Boots",
            "melvorD:Steel_Platelegs",
            "melvorD:Steel_Platebody",
            "melvorD:Mithril_Dagger",
            "melvorD:Mithril_Sword",
            "melvorD:Mithril_Battleaxe",
            "melvorD:Mithril_2H_Sword",
            "melvorD:Mithril_Helmet",
            "melvorD:Mithril_Boots",
            "melvorD:Mithril_Platelegs",
            "melvorD:Mithril_Platebody",
            "melvorD:Adamant_Dagger",
            "melvorD:Adamant_Sword",
            "melvorD:Adamant_Battleaxe",
            "melvorD:Adamant_2H_Sword",
            "melvorD:Adamant_Helmet",
            "melvorD:Adamant_Boots",
            "melvorD:Adamant_Platelegs",
            "melvorD:Adamant_Platebody",
            "melvorD:Rune_Dagger",
            "melvorD:Rune_Sword",
            "melvorD:Rune_Battleaxe",
            "melvorD:Rune_2H_Sword",
            "melvorD:Rune_Helmet",
            "melvorD:Rune_Boots",
            "melvorD:Rune_Platelegs",
            "melvorD:Rune_Platebody",
            "melvorD:Dragon_Dagger",
            "melvorD:Dragon_Sword",
            "melvorD:Dragon_Battleaxe",
            "melvorD:Dragon_2H_Sword",
            "melvorD:Dragon_Helmet",
            "melvorD:Dragon_Boots",
            "melvorD:Dragon_Platelegs",
            "melvorD:Dragon_Platebody",
            "melvorD:Bronze_Shield",
            "melvorD:Iron_Shield",
            "melvorD:Steel_Shield",
            "melvorD:Mithril_Shield",
            "melvorD:Adamant_Shield",
            "melvorD:Rune_Shield",
            "melvorD:Dragon_Shield",
            "melvorD:Bronze_Arrowtips",
            "melvorD:Iron_Arrowtips",
            "melvorD:Steel_Arrowtips",
            "melvorD:Mithril_Arrowtips",
            "melvorD:Adamant_Arrowtips",
            "melvorD:Rune_Arrowtips",
            "melvorD:Dragon_Arrowtips",
            "melvorD:Bronze_Scimitar",
            "melvorD:Iron_Scimitar",
            "melvorD:Steel_Scimitar",
            "melvorD:Mithril_Scimitar",
            "melvorD:Adamant_Scimitar",
            "melvorD:Rune_Scimitar",
            "melvorD:Dragon_Scimitar",
            "melvorD:Bronze_Gloves",
            "melvorD:Iron_Gloves",
            "melvorD:Steel_Gloves",
            "melvorD:Mithril_Gloves",
            "melvorD:Adamant_Gloves",
            "melvorD:Rune_Gloves",
            "melvorD:Dragon_Gloves",
            "melvorD:Bronze_Crossbow_Head",
            "melvorD:Iron_Crossbow_Head",
            "melvorD:Steel_Crossbow_Head",
            "melvorD:Mithril_Crossbow_Head",
            "melvorD:Adamant_Crossbow_Head",
            "melvorD:Rune_Crossbow_Head",
            "melvorD:Dragon_Crossbow_Head",
            "melvorD:Bronze_Javelin_Heads",
            "melvorD:Iron_Javelin_Heads",
            "melvorD:Steel_Javelin_Heads",
            "melvorD:Mithril_Javelin_Heads",
            "melvorD:Adamant_Javelin_Heads",
            "melvorD:Rune_Javelin_Heads",
            "melvorD:Dragon_Javelin_Heads",
            "melvorD:Bronze_Throwing_Knife",
            "melvorD:Iron_Throwing_Knife",
            "melvorD:Steel_Throwing_Knife",
            "melvorD:Mithril_Throwing_Knife",
            "melvorD:Adamant_Throwing_Knife",
            "melvorD:Rune_Throwing_Knife",
            "melvorD:Dragon_Throwing_Knife",
            "melvorD:Headless_Bolts",
            "melvorTotH:Corundumite_Bar",
            "melvorTotH:Iridium_Bar",
            "melvorTotH:Palladium_Bar",
            "melvorTotH:Augite_Bar",
            "melvorTotH:Meteorite_Bar",
            "melvorTotH:Divinite_Bar",
            "melvorTotH:Corundum_Dagger",
            "melvorTotH:Corundum_Sword",
            "melvorTotH:Corundum_Battleaxe",
            "melvorTotH:Corundum_2H_Sword",
            "melvorTotH:Corundum_Scimitar",
            "melvorTotH:Corundum_Helmet",
            "melvorTotH:Corundum_Boots",
            "melvorTotH:Corundum_Platelegs",
            "melvorTotH:Corundum_Platebody",
            "melvorTotH:Corundum_Shield",
            "melvorTotH:Corundum_Arrowtips",
            "melvorTotH:Corundum_Gloves",
            "melvorTotH:Corundum_Crossbow_Head",
            "melvorTotH:Corundum_Javelin_Heads",
            "melvorTotH:Corundum_Throwing_Knife",
            "melvorTotH:Augite_Dagger",
            "melvorTotH:Augite_Sword",
            "melvorTotH:Augite_Battleaxe",
            "melvorTotH:Augite_2H_Sword",
            "melvorTotH:Augite_Scimitar",
            "melvorTotH:Augite_Helmet",
            "melvorTotH:Augite_Boots",
            "melvorTotH:Augite_Platelegs",
            "melvorTotH:Augite_Platebody",
            "melvorTotH:Augite_Shield",
            "melvorTotH:Augite_Arrowtips",
            "melvorTotH:Augite_Gloves",
            "melvorTotH:Augite_Crossbow_Head",
            "melvorTotH:Augite_Javelin_Heads",
            "melvorTotH:Augite_Throwing_Knife",
            "melvorTotH:Meteorite_2H_Sword",
            "melvorTotH:Meteorite_Helmet",
            "melvorTotH:Meteorite_Platelegs",
            "melvorTotH:Meteorite_Platebody",
            "melvorTotH:Meteorite_Crossbow_Head",
            "melvorTotH:Meteorite_Javelin_Heads",
            "melvorTotH:Divine_Dagger",
            "melvorTotH:Divine_Sword",
            "melvorTotH:Divine_Battleaxe",
            "melvorTotH:Divine_2H_Sword",
            "melvorTotH:Divine_Scimitar",
            "melvorTotH:Divine_Helmet",
            "melvorTotH:Divine_Boots",
            "melvorTotH:Divine_Platelegs",
            "melvorTotH:Divine_Platebody",
            "melvorTotH:Divine_Shield",
            "melvorTotH:Divine_Arrowtips",
            "melvorTotH:Divine_Gloves",
            "melvorTotH:Divine_Crossbow_Head",
            "melvorTotH:Divine_Javelin_Heads",
            "melvorTotH:Divine_Throwing_Knife",
            "melvorAoD:Imbued_Bronze_Bar",
            "melvorAoD:Imbued_Iron_Bar",
            "melvorAoD:Imbued_Steel_Bar",
            "melvorAoD:Imbued_Mithril_Bar",
            "melvorAoD:Imbued_Adamantite_Bar",
            "melvorAoD:Imbued_Runite_Bar",
            "melvorAoD:Imbued_Dragonite_Bar",
            "melvorAoD:Darksteel_Bar",
            "melvorAoD:Aranite_Bar",
            "melvorAoD:Darksteel_Shield",
            "melvorAoD:Aranite_Shield",
            "melvorAoD:Relic_Shield",
            "melvorAoD:Crystal_Helmet",
            "melvorAoD:Crystal_Boots",
            "melvorAoD:Crystal_Platelegs",
            "melvorAoD:Crystal_Platebody",
            "melvorAoD:Crystal_Shield",
            "melvorAoD:Crystal_Arrowtips",
            "melvorAoD:Crystal_Gloves",
            "melvorAoD:Crystal_Crossbow_Head",
            "melvorAoD:Crystal_Javelin_Heads",
            "melvorAoD:Crystal_Throwing_Knife",
            "melvorAoD:Crystal_Defender",
            "melvorAoD:Crystal_Twin_Blades",
            "melvorAoD:Crystal_2H_Hammer",
            "melvorAoD:Pure_Crystal_Helmet",
            "melvorAoD:Pure_Crystal_Boots",
            "melvorAoD:Pure_Crystal_Platelegs",
            "melvorAoD:Pure_Crystal_Platebody",
            "melvorAoD:Pure_Crystal_Shield",
            "melvorAoD:Pure_Crystal_Arrowtips",
            "melvorAoD:Pure_Crystal_Gloves",
            "melvorAoD:Pure_Crystal_Crossbow_Head",
            "melvorAoD:Pure_Crystal_Javelin_Heads",
            "melvorAoD:Pure_Crystal_Throwing_Knife",
            "melvorAoD:Pure_Crystal_Defender",
            "melvorAoD:Pure_Crystal_2H_Spear",
            "melvorAoD:Pure_Crystal_2H_Axe",
            "melvorAoD:Unholy_2H_Sword",
            "melvorAoD:Unholy_Platebody",
            "melvorItA:Abyssium_Bar",
            "melvorItA:Abyssium_Dagger",
            "melvorItA:Abyssium_Throwing_Knife",
            "melvorItA:Abyssium_Arrowtips",
            "melvorItA:Abyssium_Sword",
            "melvorItA:Abyssium_Helmet",
            "melvorItA:Abyssium_Boots",
            "melvorItA:Abyssium_Javelin_Heads",
            "melvorItA:Abyssium_2H_Sword",
            "melvorItA:Abyssium_Crossbow_Head",
            "melvorItA:Abyssal_Headless_Bolts",
            "melvorItA:Abyssium_Platelegs",
            "melvorItA:Abyssium_Platebody",
            "melvorItA:Brumite_Bar",
            "melvorItA:Brumite_Dagger",
            "melvorItA:Brumite_Throwing_Knife",
            "melvorItA:Brumite_Arrowtips",
            "melvorItA:Brumite_Sword",
            "melvorItA:Brumite_Helmet",
            "melvorItA:Brumite_Boots",
            "melvorItA:Brumite_Javelin_Heads",
            "melvorItA:Brumite_2H_Sword",
            "melvorItA:Brumite_Crossbow_Head",
            "melvorItA:Brumite_Platelegs",
            "melvorItA:Brumite_Platebody",
            "melvorItA:Gloomite_Bar",
            "melvorItA:Gloomite_Dagger",
            "melvorItA:Gloomite_Throwing_Knife",
            "melvorItA:Gloomite_Arrowtips",
            "melvorItA:Gloomite_Sword",
            "melvorItA:Gloomite_Helmet",
            "melvorItA:Gloomite_Boots",
            "melvorItA:Gloomite_Javelin_Heads",
            "melvorItA:Gloomite_2H_Sword",
            "melvorItA:Gloomite_Crossbow_Head",
            "melvorItA:Gloomite_Platelegs",
            "melvorItA:Gloomite_Platebody",
            "melvorItA:Witherite_Bar",
            "melvorItA:Witherite_Dagger",
            "melvorItA:Witherite_Throwing_Knife",
            "melvorItA:Witherite_Arrowtips",
            "melvorItA:Witherite_Sword",
            "melvorItA:Witherite_Helmet",
            "melvorItA:Witherite_Boots",
            "melvorItA:Witherite_Javelin_Heads",
            "melvorItA:Witherite_2H_Sword",
            "melvorItA:Witherite_Crossbow_Head",
            "melvorItA:Witherite_Platelegs",
            "melvorItA:Witherite_Platebody",
            "melvorItA:Netherite_Bar",
            "melvorItA:Netherite_Dagger",
            "melvorItA:Netherite_Throwing_Knife",
            "melvorItA:Netherite_Arrowtips",
            "melvorItA:Netherite_Sword",
            "melvorItA:Netherite_Helmet",
            "melvorItA:Netherite_Boots",
            "melvorItA:Netherite_Javelin_Heads",
            "melvorItA:Netherite_2H_Sword",
            "melvorItA:Netherite_Crossbow_Head",
            "melvorItA:Netherite_Platelegs",
            "melvorItA:Netherite_Platebody",
            "melvorItA:Azurian_Bar",
            "melvorItA:Obsidian_Bar",
            "melvorItA:Obzurian_Bar",
            "melvorItA:Eventide_Bar",
            "melvorItA:Stellarite_Bar",
            "melvorItA:Eternity_Sword_Uncharged"
          ]
        }
      ]
    },
    "MiningActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Rune_Essence",
            "melvorD:Copper_Ore",
            "melvorD:Tin_Ore",
            "melvorD:Iron_Ore",
            "melvorD:Coal_Ore",
            "melvorD:Silver_Ore",
            "melvorD:Gold_Ore",
            "melvorD:Mithril_Ore",
            "melvorD:Adamantite_Ore",
            "melvorD:Runite_Ore",
            "melvorD:Dragonite_Ore",
            "melvorTotH:Corundumite_Ore",
            "melvorTotH:Pure_Essence",
            "melvorTotH:Onyx",
            "melvorTotH:Iridium_Ore",
            "melvorTotH:Palladium_Ore",
            "melvorTotH:Augite_Ore",
            "melvorTotH:Oricha",
            "melvorTotH:Meteorite_Ore",
            "melvorTotH:Divinite_Ore",
            "melvorTotH:Cerulean",
            "melvorAoD:Crystal",
            "melvorAoD:Pure_Crystal",
            "melvorItA:Abyssal_Essence",
            "melvorItA:Abyssium_Ore",
            "melvorItA:Nightopal",
            "melvorItA:Abycite",
            "melvorItA:Azurian_Outcrop",
            "melvorItA:Brumite_Ore",
            "melvorItA:Shadowpearl",
            "melvorItA:Mysticite",
            "melvorItA:Gloomite_Ore",
            "melvorItA:Obsidian_Outcrop",
            "melvorItA:Witherite_Ore",
            "melvorItA:Moonstone",
            "melvorItA:Echocite",
            "melvorItA:Netherite_Ore",
            "melvorItA:Voidheart",
            "melvorItA:Eventide_Ore",
            "melvorItA:Stellarite"
          ]
        }
      ]
    },
    "HarvestingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorItA:Abyssal_Vein",
            "melvorItA:Twisted_Vein",
            "melvorItA:Gloom_Vein",
            "melvorItA:Shadow_Vein",
            "melvorItA:Obsidian_Vein",
            "melvorItA:Voidfire_Vein",
            "melvorItA:Rift_Vein"
          ]
        }
      ]
    },
    "CookingCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Fire",
            "melvorD:Furnace",
            "melvorD:Pot"
          ]
        }
      ]
    },
    "CookingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Shrimp",
            "melvorD:Sardine",
            "melvorD:Herring",
            "melvorD:Trout",
            "melvorD:Salmon",
            "melvorD:Lobster",
            "melvorD:Swordfish",
            "melvorD:Crab",
            "melvorD:Shark",
            "melvorD:Cave_Fish",
            "melvorD:Manta_Ray",
            "melvorD:Whale",
            "melvorD:Anglerfish",
            "melvorD:Fanfish",
            "melvorD:Seahorse",
            "melvorD:Carp",
            "melvorD:Bread",
            "melvorD:Beef",
            "melvorD:Chicken",
            "melvorD:Plain_Pizza_Slice",
            "melvorD:Beef_Pie",
            "melvorD:Meat_Pizza_Slice",
            "melvorD:Basic_Soup",
            "melvorD:Strawberry_Cupcake",
            "melvorD:Hearty_Soup",
            "melvorD:Cherry_Cupcake",
            "melvorD:Cream_Corn_Soup",
            "melvorD:Chicken_Soup",
            "melvorD:Strawberry_Cake",
            "melvorD:Carrot_Cake",
            "melvorF:Apple_Pie",
            "melvorF:Lemon_Cake",
            "melvorTotH:Lava_Fish",
            "melvorTotH:Blue_Crab",
            "melvorTotH:Magma_Fish",
            "melvorTotH:Static_Jellyfish",
            "melvorTotH:Frost_Crab",
            "melvorTotH:Magma_Eel",
            "melvorTotH:Frozen_Manta_Ray",
            "melvorTotH:Terrorfish",
            "melvorTotH:Mystic_Shark",
            "melvorTotH:Banana_Bread",
            "melvorTotH:Mushroom_Soup",
            "melvorTotH:Spicy_Chicken_Pizza",
            "melvorTotH:Beef_Mushroom_Stew",
            "melvorTotH:Sandwich",
            "melvorTotH:Pumpkin_Soup",
            "melvorTotH:Spicy_Shrimp_Soup",
            "melvorTotH:Fancy_Meat_Pizza",
            "melvorTotH:Chicken_Cream_Mushroom_Soup",
            "melvorTotH:Chilli_Frost_Crab",
            "melvorTotH:Starfruit_Cake",
            "melvorAoD:Mackerel",
            "melvorAoD:Halibut",
            "melvorAoD:Tilapia",
            "melvorItA:Crimson_Biter",
            "melvorItA:Baked_Biter_Pie",
            "melvorItA:Crimson_Bream",
            "melvorItA:Crimson_Bream_Soup",
            "melvorItA:Veilhunter",
            "melvorItA:Abyssal_Pumpkin_Pie",
            "melvorItA:Steamswimmer",
            "melvorItA:Steamswimmer_Soup",
            "melvorItA:Toxic_Crab",
            "melvorItA:Toxic_Crab_Cream_Soup",
            "melvorItA:Stoneskin_Pike",
            "melvorItA:Stoneskin_Pepper",
            "melvorItA:Toxic_Octopus",
            "melvorItA:Toxic_Octopus_Stew",
            "melvorItA:Shadenut_Cookie",
            "melvorItA:Whisperfish",
            "melvorItA:Whisperfish_Pizza",
            "melvorItA:Murmurclaw",
            "melvorItA:Murmurclaw_Cream_Soup",
            "melvorItA:Depthlurker",
            "melvorItA:Withermelon_Tart",
            "melvorItA:Hushscale",
            "melvorItA:Hushscale_Pepper",
            "melvorItA:Deep_Squid",
            "melvorItA:Whisperradish_Soup",
            "melvorItA:Voidfish",
            "melvorItA:Voidfish_Soup",
            "melvorItA:Eldraberry_Pie",
            "melvorItA:Void_Ray",
            "melvorItA:Void_Ray_Cream_Stew",
            "melvorItA:Celestial_Ray"
          ]
        }
      ]
    },
    "FiremakingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Normal_Logs",
            "melvorD:Oak_Logs",
            "melvorD:Willow_Logs",
            "melvorD:Teak_Logs",
            "melvorD:Maple_Logs",
            "melvorD:Mahogany_Logs",
            "melvorD:Yew_Logs",
            "melvorD:Magic_Logs",
            "melvorD:Redwood_Logs",
            "melvorTotH:Spruce_Logs",
            "melvorTotH:Hornbeam_Logs",
            "melvorTotH:Grove_Logs",
            "melvorTotH:Linden_Logs",
            "melvorTotH:Elderwood_Logs",
            "melvorTotH:Red_Oak_Logs",
            "melvorTotH:Revenant_Logs",
            "melvorTotH:Mystic_Logs",
            "melvorTotH:Carrion_Logs",
            "melvorAoD:Unholy_Logs",
            "melvorAoD:Cursed_Logs",
            "melvorItA:Abyssia_Logs",
            "melvorItA:Twisted_Logs",
            "melvorItA:Brumia_Logs",
            "melvorItA:Plagueroot",
            "melvorItA:Gloomia",
            "melvorItA:Shadebark",
            "melvorItA:Withia",
            "melvorItA:Crumbletain",
            "melvorItA:Nethia",
            "melvorItA:Whisperwillow",
            "melvorItA:Eldria",
            "melvorItA:Voidia",
            "melvorItA:Riftwood_Logs"
          ]
        }
      ]
    },
    "FishingAreaID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:ShallowShores",
            "melvorD:ShrapnelRiver",
            "melvorD:TrenchOfDespair",
            "melvorD:LemvorPier",
            "melvorD:OpenWaters",
            "melvorD:BarrenOcean",
            "melvorD:BarbarianFishing",
            "melvorD:SecretArea",
            "melvorTotH:MagmaLake",
            "melvorTotH:JungleWaters",
            "melvorTotH:StaticValley",
            "melvorTotH:FrozenSea",
            "melvorTotH:MidnightLagoon",
            "melvorTotH:MysticPond",
            "melvorAoD:FishermansEnclave",
            "melvorItA:CrimsonRiver",
            "melvorItA:MistveilSwamp",
            "melvorItA:ToxicPools",
            "melvorItA:PetrifiedChannel",
            "melvorItA:WhisperCove",
            "melvorItA:TendrilDepths",
            "melvorItA:VoidLagoon",
            "melvorItA:CelestialPond"
          ]
        }
      ]
    },
    "FishingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Raw_Shrimp",
            "melvorD:Raw_Sardine",
            "melvorD:Raw_Herring",
            "melvorD:Raw_Trout",
            "melvorD:Raw_Salmon",
            "melvorD:Raw_Lobster",
            "melvorD:Raw_Swordfish",
            "melvorD:Raw_Crab",
            "melvorD:Raw_Shark",
            "melvorD:Raw_Cave_Fish",
            "melvorD:Raw_Manta_Ray",
            "melvorD:Raw_Whale",
            "melvorD:Raw_Blowfish",
            "melvorD:Raw_Poison_Fish",
            "melvorD:Leaping_Trout",
            "melvorD:Leaping_Salmon",
            "melvorD:Leaping_Broad_Fish",
            "melvorD:Raw_Magic_Fish",
            "melvorD:Raw_Anglerfish",
            "melvorD:Raw_Fanfish",
            "melvorD:Raw_Seahorse",
            "melvorD:Raw_Carp",
            "melvorD:Raw_Skeleton_Fish",
            "melvorTotH:Raw_Lava_Fish",
            "melvorTotH:Raw_Spike_Fish",
            "melvorTotH:Raw_Rockfish",
            "melvorTotH:Raw_Blue_Crab",
            "melvorTotH:Raw_Magma_Fish",
            "melvorTotH:Raw_Large_Blowfish",
            "melvorTotH:Raw_Static_Jellyfish",
            "melvorTotH:Raw_Frost_Crab",
            "melvorTotH:Raw_Magma_Eel",
            "melvorTotH:Raw_Frozen_Manta_Ray",
            "melvorTotH:Raw_Ghost_Fish",
            "melvorTotH:Raw_Mystic_Seahorse",
            "melvorTotH:Raw_Terrorfish",
            "melvorTotH:Raw_Mystic_Shark",
            "melvorAoD:Raw_Mackerel",
            "melvorAoD:Raw_Halibut",
            "melvorAoD:Raw_Tilapia",
            "melvorItA:Raw_Crimson_Biter",
            "melvorItA:Raw_Crimson_Bream",
            "melvorItA:Raw_Veilhunter",
            "melvorItA:Raw_Mistjaw",
            "melvorItA:Raw_Steamswimmer",
            "melvorItA:Raw_Toxic_Pufferfish",
            "melvorItA:Raw_Toxic_Crab",
            "melvorItA:Raw_Stoneskin_Pike",
            "melvorItA:Raw_Toxic_Octopus",
            "melvorItA:Raw_Stoneskin_Garfish",
            "melvorItA:Raw_Whisperfish",
            "melvorItA:Raw_Murmurclaw",
            "melvorItA:Raw_Depthlurker",
            "melvorItA:Raw_Hushscale",
            "melvorItA:Raw_Deep_Squid",
            "melvorItA:Raw_Voidfish",
            "melvorItA:Raw_Void_Jelly",
            "melvorItA:Raw_Void_Ray",
            "melvorItA:Raw_Celestial_Ray"
          ]
        }
      ]
    },
    "WoodcuttingActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Normal",
            "melvorD:Oak",
            "melvorD:Willow",
            "melvorD:Teak",
            "melvorD:Maple",
            "melvorD:Mahogany",
            "melvorD:Yew",
            "melvorD:Magic",
            "melvorD:Redwood",
            "melvorTotH:Spruce",
            "melvorTotH:Hornbeam",
            "melvorTotH:Grove",
            "melvorTotH:Linden",
            "melvorTotH:Elderwood",
            "melvorTotH:Red_Oak",
            "melvorTotH:Revenant",
            "melvorTotH:Mystic",
            "melvorTotH:Carrion",
            "melvorAoD:Unholy",
            "melvorAoD:Cursed",
            "melvorItA:Abyssia",
            "melvorItA:Twisted",
            "melvorItA:Brumia",
            "melvorItA:Plagueroot",
            "melvorItA:Gloomia",
            "melvorItA:Shadebark",
            "melvorItA:Withia",
            "melvorItA:Crumbletain",
            "melvorItA:Nethia",
            "melvorItA:Whisperwillow",
            "melvorItA:Eldria",
            "melvorItA:Voidia",
            "melvorItA:Riftwood",
            "melvorItA:Starwood"
          ]
        }
      ]
    },
    "SpecialAttackID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Normal",
            "melvorD:BruteForce",
            "melvorD:LifeLeech",
            "melvorD:FrozenWind",
            "melvorD:SunsetStab",
            "melvorD:PiercingArrow",
            "melvorD:Volley",
            "melvorD:RazorSharpClaws",
            "melvorD:Dragonbreath",
            "melvorD:FrozenShot",
            "melvorD:XmasDeath",
            "melvorD:XmasKill",
            "melvorD:Frostburn",
            "melvorD:LesserDragonbreath",
            "melvorD:Venom",
            "melvorD:RapidFire",
            "melvorD:Fleetness",
            "melvorD:PebbleShot",
            "melvorD:OnTheHunt",
            "melvorD:Onslaught",
            "melvorD:TopazShots",
            "melvorD:SapphireShots",
            "melvorD:RubyShots",
            "melvorD:EmeraldShots",
            "melvorD:DiamondShots",
            "melvorD:JadestoneShots",
            "melvorD:PoisonMelee",
            "melvorD:BurnMelee",
            "melvorD:FrostburnMelee",
            "melvorD:PoisonRanged",
            "melvorD:BurnRanged",
            "melvorD:FrostburnRanged",
            "melvorD:Burn",
            "melvorD:FrostburnPlayer",
            "melvorD:TripleDamage",
            "melvorD:NoDamage",
            "melvorD:TiltedShot",
            "melvorD:UnlimitedSlappingPower",
            "melvorD:Firebreathing",
            "melvorD:StoneBarrier",
            "melvorD:ImpossibleShot",
            "melvorD:Heal",
            "melvorF:DoubleSwipe",
            "melvorF:TripleSwipe",
            "melvorF:Flurry",
            "melvorF:IcePrison",
            "melvorF:Infernum",
            "melvorF:CrushingBlow",
            "melvorF:Stormsnap",
            "melvorF:DualAttack",
            "melvorF:FreezeRay",
            "melvorF:SlicingWinds",
            "melvorF:IcicleVolley",
            "melvorF:Ignite",
            "melvorF:Gust",
            "melvorF:Frostbite",
            "melvorF:Quake",
            "melvorF:Incinerate",
            "melvorF:ImpairingShot",
            "melvorF:DrowsySpores",
            "melvorF:Quicksand",
            "melvorF:Sandblast",
            "melvorF:Sandstorm",
            "melvorF:DeadlyCut",
            "melvorF:Rend",
            "melvorF:QuadSwipe",
            "melvorF:TidalWave",
            "melvorF:OceanSong",
            "melvorF:Shockwave",
            "melvorF:Barrage",
            "melvorF:WindBlade",
            "melvorF:Whirlwind",
            "melvorF:Tornado",
            "melvorF:Cyclone",
            "melvorF:IcyChill",
            "melvorF:FrozenSpears",
            "melvorF:IceBreak",
            "melvorF:FlashFreeze",
            "melvorF:Winterland",
            "melvorF:FrigidWaves",
            "melvorF:StoneWall",
            "melvorF:Charge",
            "melvorF:Boulder",
            "melvorF:GraspingRoots",
            "melvorF:SeismicSlam",
            "melvorF:Fireball",
            "melvorF:BurningClaws",
            "melvorF:ScorchingRay",
            "melvorF:MeteorShower",
            "melvorF:Cataclysm",
            "melvorF:Spores",
            "melvorF:DrowsySporesEnemy",
            "melvorF:GreaterSandstorm",
            "melvorF:Webshot",
            "melvorF:Drain",
            "melvorF:CurseofFear",
            "melvorF:HunterExpertise",
            "melvorF:GreaterDragonbreath",
            "melvorF:ChaoticSlam",
            "melvorF:Agility",
            "melvorF:Confusion",
            "melvorF:Elusiveness",
            "melvorF:RapidOnslaught",
            "melvorF:ShockwaveEnemy",
            "melvorF:CurseoftheDeep",
            "melvorF:BurningTrail",
            "melvorF:InfernalVolley",
            "melvorF:TailWhip",
            "melvorF:PenetratingClaws",
            "melvorF:Inferno",
            "melvorF:Sealing",
            "melvorF:MarkofDeath",
            "melvorF:CursedEdge",
            "melvorF:ReapandReturn",
            "melvorF:ConcealedDanger",
            "melvorF:Shadowstep",
            "melvorF:ShadowBurst",
            "melvorF:IntotheMist",
            "melvorF:FallenLight",
            "melvorF:InfinityDragonbreath",
            "melvorF:LesserSandstorm",
            "melvorF:ElementalImpactBurn",
            "melvorF:ElementalImpactStun",
            "melvorF:ElementalImpactFreeze",
            "melvorF:ElementalImpactFrostburn",
            "melvorF:BurningFireball",
            "melvorF:FragileMind",
            "melvorF:UnknownThreat",
            "melvorF:MistWalk",
            "melvorF:Suffocate",
            "melvorF:PoisonBreath",
            "melvorF:ToxicBite",
            "melvorF:NoxiousPowder",
            "melvorF:PenetratingSpikeShot",
            "melvorF:ToxicNeedles",
            "melvorF:Burrow",
            "melvorF:CursedFlames",
            "melvorF:CursedFrostShards",
            "melvorF:CursedTether",
            "melvorF:CrushingClaws",
            "melvorF:Cleave",
            "melvorF:SavageSpike",
            "melvorF:BoneCrush",
            "melvorF:SpikedTailWhip",
            "melvorF:Desecration",
            "melvorF:DoubleEdged",
            "melvorF:SwiftAttack",
            "melvorF:PoisonedHit",
            "melvorF:BladeEchoes",
            "melvorF:BarragePlayer",
            "melvorF:SpiritPower",
            "melvorF:CrushingDoubleSlash",
            "melvorF:NaturesCall",
            "melvorF:NaturesWrath",
            "melvorF:Ram",
            "melvorF:HornShots",
            "melvorF:OverwhelmingPower",
            "melvorF:Split",
            "melvorTotH:MeteorShot",
            "melvorTotH:Bind",
            "melvorTotH:LureTrap",
            "melvorTotH:SharpWing",
            "melvorTotH:FerociousBite",
            "melvorTotH:DeadlyWrap",
            "melvorTotH:Efflorescence",
            "melvorTotH:ThornedRoots",
            "melvorTotH:RazorWind",
            "melvorTotH:PoisonBulbs",
            "melvorTotH:SeekingRoots",
            "melvorTotH:FullBloom",
            "melvorTotH:PoisonBite",
            "melvorTotH:Smother",
            "melvorTotH:FlameBarrage",
            "melvorTotH:SmolderingBlow",
            "melvorTotH:LavaWave",
            "melvorTotH:Explosion",
            "melvorTotH:FlameRush",
            "melvorTotH:FatalSpike",
            "melvorTotH:GreaterFireball",
            "melvorTotH:Headbutt",
            "melvorTotH:MasterOfHeat",
            "melvorTotH:MegaFireball",
            "melvorTotH:BurningFury",
            "melvorTotH:WardOfFlame",
            "melvorTotH:UnleashedPower",
            "melvorTotH:FrozenClub",
            "melvorTotH:RollingSnowball",
            "melvorTotH:ChillingWinds",
            "melvorTotH:IceShards",
            "melvorTotH:FreezingRoar",
            "melvorTotH:SpectralClones",
            "melvorTotH:IceBlast",
            "melvorTotH:FreezingBreath",
            "melvorTotH:IceReanimation",
            "melvorTotH:ElectricBall",
            "melvorTotH:RapidStaticStrikes",
            "melvorTotH:FocusedStaticPunch",
            "melvorTotH:ShockBlast",
            "melvorTotH:ElectricCharge",
            "melvorTotH:LightningBreath",
            "melvorTotH:Thunderbolt",
            "melvorTotH:Allure",
            "melvorTotH:Drown",
            "melvorTotH:Predator",
            "melvorTotH:CrushingJaws",
            "melvorTotH:SpikesFromBelow",
            "melvorTotH:SpikedSlam",
            "melvorTotH:WaterDance",
            "melvorTotH:TorrentialDragonbreath",
            "melvorTotH:GiantBubble",
            "melvorTotH:Tsunami",
            "melvorTotH:WebTrap",
            "melvorTotH:DeadlyBite",
            "melvorTotH:SharpSlice",
            "melvorTotH:FatalBite",
            "melvorTotH:CaughtInTheWeb",
            "melvorTotH:Surrounded",
            "melvorTotH:ShadowBite",
            "melvorTotH:HarmfulConcoction",
            "melvorTotH:DiseaseSwarm",
            "melvorTotH:Lifedrain",
            "melvorTotH:DecayingShots",
            "melvorTotH:CrushingSmash",
            "melvorTotH:Entangle",
            "melvorTotH:TreeSlam",
            "melvorTotH:CurseOfMadness",
            "melvorTotH:SilenceOfTheForest",
            "melvorTotH:CurseOfTorment",
            "melvorTotH:Soulburn",
            "melvorTotH:CurseOfDespair",
            "melvorTotH:DevourerOfTheCursed",
            "melvorTotH:EtheralShots",
            "melvorTotH:WeakeningShot",
            "melvorTotH:GhostlyTerror",
            "melvorTotH:BlindingFear",
            "melvorTotH:SpinningAxe",
            "melvorTotH:ConfusedTouch",
            "melvorTotH:BlindingBeams",
            "melvorTotH:PetrifyingGlare",
            "melvorTotH:ShadeSummon",
            "melvorTotH:GreaterShadeSummon",
            "melvorTotH:GreaterShadeSummonEnemy",
            "melvorTotH:BladeShadow",
            "melvorTotH:Darkblade",
            "melvorTotH:PhantomSummon",
            "melvorTotH:CurseTotemSummon",
            "melvorTotH:CurseTotemSummonPlayer",
            "melvorTotH:FeatherStorm",
            "melvorTotH:FeatherBarrier",
            "melvorTotH:FeatherLance",
            "melvorTotH:AgileWings",
            "melvorTotH:RapidParry",
            "melvorTotH:FullCharge",
            "melvorTotH:WindBarrier",
            "melvorTotH:FeatherTornado",
            "melvorTotH:AggressiveOnslaught",
            "melvorTotH:Battlecry",
            "melvorTotH:UnstoppableForce",
            "melvorTotH:Sunder",
            "melvorTotH:ChronoCurse",
            "melvorTotH:Alacrity",
            "melvorTotH:DejaVu",
            "melvorTotH:TouchOfAffliction",
            "melvorTotH:ShardsOfMillennia",
            "melvorTotH:PowerOfTheMist",
            "melvorTotH:UnisonOfFireAndEarth",
            "melvorTotH:UnisonOfAirAndWater",
            "melvorTotH:SealedFate",
            "melvorTotH:SlicingMaelstrom",
            "melvorTotH:PoisonPods",
            "melvorTotH:GiantFireball",
            "melvorTotH:ThunderStrike",
            "melvorTotH:MeteorShowerArchaic",
            "melvorTotH:TsunamiArchaic",
            "melvorTotH:NaturesBloom",
            "melvorTotH:InfernalPower",
            "melvorTotH:Soulash",
            "melvorTotH:DragonStormCall",
            "melvorTotH:SlicingMaelstromArchaic",
            "melvorTotH:BurningEmbers",
            "melvorTotH:MeteorSwing",
            "melvorTotH:Reduction",
            "melvorTotH:DarkBladePlayer",
            "melvorTotH:BadThrow",
            "melvorTotH:GoodThrow",
            "melvorTotH:ThornedPower",
            "melvorTotH:HeatedFury",
            "melvorTotH:SpectralIceBlades",
            "melvorTotH:LargeLightningStrike",
            "melvorTotH:LargeThunderStrike",
            "melvorTotH:TorrentialBlast",
            "melvorTotH:PiercingToxicStrike",
            "melvorTotH:EtheralArrows",
            "melvorTotH:SpinningAxePlayer",
            "melvorTotH:CorundumWounds",
            "melvorTotH:AugiteCrystallization",
            "melvorTotH:DivineBreaker",
            "melvorTotH:ElderwoodPoison",
            "melvorTotH:RevenantHunter",
            "melvorTotH:CarrionMarker",
            "melvorTotH:PoisonSplit",
            "melvorTotH:AgileWingsPlayer",
            "melvorTotH:LightningStrikeEnemy",
            "melvorTotH:ShadeSummonEnemy",
            "melvorTotH:PhantomSummonPlayer",
            "melvorTotH:FeatherStormPlayer",
            "melvorTotH:FrostbiteEnemy",
            "melvorTotH:QuakeEnemy",
            "melvorTotH:MagicRayEnemy",
            "melvorTotH:OceanSongEnemy",
            "melvorTotH:PoisonedHitEnemy",
            "melvorTotH:PiercingArrowEnemy",
            "melvorTotH:ImpairingShotEnemy",
            "melvorTotH:DeadlyCutEnemy",
            "melvorTotH:FlurryEnemy",
            "melvorTotH:InfernumEnemy",
            "melvorTotH:TidalWaveEnemy",
            "melvorAoD:DeadlyCutRanged",
            "melvorAoD:Crystalline",
            "melvorAoD:TwinCrystals",
            "melvorAoD:CrystalCrash",
            "melvorAoD:CrystalFlurry",
            "melvorAoD:CrystalCleave",
            "melvorAoD:CrystalShot",
            "melvorAoD:CrystalBoom",
            "melvorAoD:CrystalBlast",
            "melvorAoD:CrystalTomb",
            "melvorAoD:ShatterArrow",
            "melvorAoD:Warhorn",
            "melvorAoD:Flight",
            "melvorAoD:Killshot",
            "melvorAoD:HunterPrecision",
            "melvorAoD:LullabyOfTheEnchanter",
            "melvorAoD:RestorationOfTheMind",
            "melvorAoD:DanceOfTheMage",
            "melvorAoD:MysticRegen",
            "melvorAoD:AcidicBlast",
            "melvorAoD:Leech",
            "melvorAoD:Crystallization",
            "melvorAoD:CrystalSanction",
            "melvorAoD:DarksteelStab",
            "melvorAoD:LesserFamiliarAura",
            "melvorAoD:Crush",
            "melvorAoD:CrushPlayer",
            "melvorAoD:HeavyShot",
            "melvorAoD:HeavyShotPlayer",
            "melvorAoD:EarthWall",
            "melvorAoD:EarthWallPlayer",
            "melvorAoD:Mudball",
            "melvorAoD:MudballPlayer",
            "melvorAoD:LavaSwipe",
            "melvorAoD:LavaSwipePlayer",
            "melvorAoD:Radiate",
            "melvorAoD:PlagueBolt",
            "melvorAoD:PlagueBoltPlayer",
            "melvorAoD:BloodLink",
            "melvorAoD:BloodLinkPlayer",
            "melvorAoD:SoulTaker",
            "melvorAoD:SoulTakerPlayer",
            "melvorAoD:SpiritBurn",
            "melvorAoD:PoisonLeech",
            "melvorAoD:BloatingShot",
            "melvorAoD:PoisonShotPlayer",
            "melvorAoD:Reflection",
            "melvorAoD:ReflectionPlayer",
            "melvorAoD:Telekinesis",
            "melvorAoD:TelekinesisPlayer",
            "melvorAoD:MindBarrier",
            "melvorAoD:TrapDoor",
            "melvorAoD:Illusion",
            "melvorAoD:IllusionPlayer",
            "melvorAoD:Puppets",
            "melvorAoD:Manipulate",
            "melvorAoD:GhostlyScimitar",
            "melvorAoD:GhostlyScimitarPlayer",
            "melvorAoD:Blunderbuss",
            "melvorAoD:BlunderbussPlayer",
            "melvorAoD:CursedBlunderbuss",
            "melvorAoD:GhostlySword",
            "melvorAoD:Foresight",
            "melvorAoD:ForesightPlayer",
            "melvorAoD:GhostlyCannonball",
            "melvorAoD:WaterPulse",
            "melvorAoD:WaterPulsePlayer",
            "melvorAoD:WaterBarrier",
            "melvorAoD:WaterBarrierPlayer",
            "melvorAoD:EngulfingVortex",
            "melvorAoD:EngulfingVortexPlayer",
            "melvorAoD:HastyAssault",
            "melvorAoD:HastyAssaultPlayer",
            "melvorAoD:SleepingEntanglement",
            "melvorAoD:StunningBarrage",
            "melvorAoD:EradicatingBlast",
            "melvorAoD:NullAndCleanse",
            "melvorAoD:CrystalShard",
            "melvorAoD:ShatteredCrystals",
            "melvorAoD:CrystalLeash",
            "melvorAoD:CrystalLure",
            "melvorAoD:CrystalPierce",
            "melvorAoD:CrystalForce",
            "melvorAoD:SharedToxins",
            "melvorAoD:BleedingBite",
            "melvorAoD:NastyBitePlayer",
            "melvorAoD:NastyBite",
            "melvorAoD:PoisonHuntsman",
            "melvorAoD:PoisonSpikeSkin",
            "melvorAoD:AgileHunter",
            "melvorAoD:BurningRoots",
            "melvorAoD:BurningRootsPlayer",
            "melvorAoD:RingOfFire",
            "melvorAoD:Marionette",
            "melvorAoD:EvilMalice",
            "melvorAoD:CrushingRoots",
            "melvorAoD:AngryGrudge",
            "melvorAoD:ConsumingRage",
            "melvorAoD:CrushingWaves",
            "melvorAoD:Whirlpool",
            "melvorAoD:ShellBuff",
            "melvorItA:PhantomTouch",
            "melvorItA:AberrationBite",
            "melvorItA:NetherSlumberStrikes",
            "melvorItA:NetherDrowsingBolt",
            "melvorItA:NetherDreamOrb",
            "melvorItA:WitheringDoubleCut",
            "melvorItA:WitheringBarrage",
            "melvorItA:WitheringBeam",
            "melvorItA:DualLashes",
            "melvorItA:SwiftBlightSlashes",
            "melvorItA:SmogRetreat",
            "melvorItA:SmogRush",
            "melvorItA:SmogVanish",
            "melvorItA:GloomShadowstrike",
            "melvorItA:GloomDoubleshot",
            "melvorItA:GloomCascade",
            "melvorItA:BrumeTaintedBlade",
            "melvorItA:BrumeInfusedTips",
            "melvorItA:BrumeExplosiveBlasts",
            "melvorItA:AbyssalDoubleStrike",
            "melvorItA:AbyssalDoubleShot",
            "melvorItA:AbyssalIncantation",
            "melvorItA:LaceratingSwipe",
            "melvorItA:LaceratingBite",
            "melvorItA:TangledRoots",
            "melvorItA:TangledTrap",
            "melvorItA:LaceratingSlices",
            "melvorItA:AbyssalCrash",
            "melvorItA:AbyssalParry",
            "melvorItA:WardensGaze",
            "melvorItA:FeatheredFrenzy",
            "melvorItA:WingGust",
            "melvorItA:DarkRoost",
            "melvorItA:Lacerate",
            "melvorItA:SmogLurker",
            "melvorItA:SmogHunter",
            "melvorItA:BlightedSlashes",
            "melvorItA:BlightPowder",
            "melvorItA:BlightSpray",
            "melvorItA:ToxicSwarm",
            "melvorItA:ToxicBlast",
            "melvorItA:ToxicFumes",
            "melvorItA:BlightedFeathers",
            "melvorItA:BlightedPull",
            "melvorItA:BlightBurst",
            "melvorItA:BlightVolley",
            "melvorItA:BlightedTendrilGrasp",
            "melvorItA:PestilentEmbrace",
            "melvorItA:BlightBarrier",
            "melvorItA:ShadowAmbush",
            "melvorItA:ShadowTrick",
            "melvorItA:ShadowAttack",
            "melvorItA:DreadPursuit",
            "melvorItA:TerrorGrasp",
            "melvorItA:HauntingWail",
            "melvorItA:StoneBreath",
            "melvorItA:TailSlam",
            "melvorItA:PetrifyingGaze",
            "melvorItA:ConfusionWave",
            "melvorItA:ExplosivePulse",
            "melvorItA:DreadfulGaze",
            "melvorItA:Fearmonger",
            "melvorItA:SeismicRoar",
            "melvorItA:SeismicWave",
            "melvorItA:SeismicToss",
            "melvorItA:WitherCurse",
            "melvorItA:BoneMultishot",
            "melvorItA:DecayingBlasts",
            "melvorItA:BoneBreaker",
            "melvorItA:SwoopingAssault",
            "melvorItA:TalonSlash",
            "melvorItA:ShadowDive",
            "melvorItA:PiercingDreadwing",
            "melvorItA:WitherSpores",
            "melvorItA:HallucinationMist",
            "melvorItA:WitherStabs",
            "melvorItA:TerrorBite",
            "melvorItA:WitherBinding",
            "melvorItA:BlindingBurst",
            "melvorItA:WitheringEngulf",
            "melvorItA:CatacombTunneler",
            "melvorItA:BoneToss",
            "melvorItA:SkeletalGrasp",
            "melvorItA:NecroticBeam",
            "melvorItA:BoneWall",
            "melvorItA:MurmuringAmbush",
            "melvorItA:RootGrasp",
            "melvorItA:ShadowBlend",
            "melvorItA:SilentScuttle",
            "melvorItA:SilentSlashes",
            "melvorItA:SilentCharge",
            "melvorItA:TortoiseShell",
            "melvorItA:Whisperwind",
            "melvorItA:ShatteringScreech",
            "melvorItA:MireMirage",
            "melvorItA:DisappearingAttacks",
            "melvorItA:Echolocation",
            "melvorItA:LeechingGrab",
            "melvorItA:SonicBlast",
            "melvorItA:FloatingTarget",
            "melvorItA:GhastlyGaze",
            "melvorItA:BlindingPupil",
            "melvorItA:MutedMaelstrom",
            "melvorItA:SilentSurge",
            "melvorItA:SilentTangle",
            "melvorItA:DampenField",
            "melvorItA:StingingSilence",
            "melvorItA:SeaOfWhispers",
            "melvorItA:EchoingAssault",
            "melvorItA:SilentSlice",
            "melvorItA:DisorientingWhispers",
            "melvorItA:SilentAgony",
            "melvorItA:RavenousHunger",
            "melvorItA:PhantomShift",
            "melvorItA:TendrilBind",
            "melvorItA:PsionicPulse",
            "melvorItA:EldritchMarker",
            "melvorItA:EldritchStalker",
            "melvorItA:EldritchHunter",
            "melvorItA:SoulbindChain",
            "melvorItA:EldritchBeam",
            "melvorItA:Mindmeld",
            "melvorItA:Possession",
            "melvorItA:EldritchCurse",
            "melvorItA:HollowReap",
            "melvorItA:HollowNightmare",
            "melvorItA:HollowDoom",
            "melvorItA:TendrilGrasp",
            "melvorItA:NightmareVision",
            "melvorItA:MindMaze",
            "melvorItA:TendrilNightmare",
            "melvorItA:DoppelgangerStrikes",
            "melvorItA:MarkOfTheVoid",
            "melvorItA:NullWave",
            "melvorItA:PhaseShiftingProjectiles",
            "melvorItA:CreepingDarkness",
            "melvorItA:VoidTraveler",
            "melvorItA:VoidTremor",
            "melvorItA:VoidVitality",
            "melvorItA:VoidVortex",
            "melvorItA:VoidsEmbrace",
            "melvorItA:VoidfireCascade",
            "melvorItA:VoidburstBarrage",
            "melvorItA:VoidblazeBurst",
            "melvorItA:PullOfTheVoid",
            "melvorItA:DevouringVoid",
            "melvorItA:GazeIntoTheVoid",
            "melvorItA:AbyssalWhirlwind",
            "melvorItA:TouchOfBlight",
            "melvorItA:WrathOfTheRealm",
            "melvorItA:ManifestationOfTheAbyss",
            "melvorItA:ManifestationOfTheAbyss2",
            "melvorItA:AbyssalBarrage",
            "melvorItA:AbyssalToss",
            "melvorItA:SilenceOfTheVoid",
            "melvorItA:SilenceOfTheVoid2",
            "melvorItA:VoidburstBeam",
            "melvorItA:KingsRage",
            "melvorItA:CommandOfTheKing",
            "melvorItA:CommandOfTheKing2",
            "melvorItA:SmogHunterPlayer",
            "melvorItA:BlightedSlashesPlayer",
            "melvorItA:ToxicBlastPlayer",
            "melvorItA:ToxicFumesPlayer",
            "melvorItA:BlightedFeathersPlayer",
            "melvorItA:BlightedPullPlayer",
            "melvorItA:BlightBurstPlayer",
            "melvorItA:ShadowAmbushPlayer",
            "melvorItA:ShadowTrickPlayer",
            "melvorItA:ShadowAttackPlayer",
            "melvorItA:SeismicWavePlayer",
            "melvorItA:SeismicTossPlayer",
            "melvorItA:WitherSporesPlayer",
            "melvorItA:WitherStabsPlayer",
            "melvorItA:WitherBindingPlayer",
            "melvorItA:SilentSlashesPlayer",
            "melvorItA:SilentSurgePlayer",
            "melvorItA:SilentTanglePlayer",
            "melvorItA:StingingSilencePlayer",
            "melvorItA:RavenousHungerPlayer",
            "melvorItA:PhantomShiftPlayer",
            "melvorItA:TendrilBindPlayer",
            "melvorItA:EldritchMarkerPlayer",
            "melvorItA:EldritchCursePlayer",
            "melvorItA:HollowReapPlayer",
            "melvorItA:HollowNightmarePlayer",
            "melvorItA:HollowDoomPlayer",
            "melvorItA:VoidVortexPlayer",
            "melvorItA:MarkOfTheVoidPlayer",
            "melvorItA:VoidfireCascadePlayer",
            "melvorItA:VoidburstBarragePlayer",
            "melvorItA:BlazingShadowPlayer",
            "melvorItA:OpenWoundsPlayer",
            "melvorItA:MalevolentBlightPlayer",
            "melvorItA:TendrilSlam",
            "melvorItA:Madness",
            "melvorItA:ConsumingGrasp",
            "melvorItA:Pandemonium",
            "melvorItA:VoidfireVolley",
            "melvorItA:BlackHole",
            "melvorItA:NullSphere",
            "melvorItA:InfiniteVoid",
            "melvorItA:TerrorBeam",
            "melvorItA:ChargeRay"
          ]
        }
      ]
    },
    "CombatAreaCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:CombatAreas",
            "melvorD:Dungeons",
            "melvorF:SlayerAreas",
            "melvorF:Strongholds",
            "melvorItA:AbyssalCombatAreas",
            "melvorItA:AbyssalSlayerAreas",
            "melvorItA:AbyssalStrongholds",
            "melvorItA:TheAbyss"
          ]
        }
      ]
    },
    "CombatAreaID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Farmlands",
            "melvorD:Dragon_Valley",
            "melvorD:Wet_Forest",
            "melvorD:Wizard_Tower",
            "melvorD:Castle_of_Kings",
            "melvorD:Bandit_Hideout",
            "melvorD:Giant_Dungeon",
            "melvorD:Sandy_Shores",
            "melvorD:Icy_Hills",
            "melvorD:Goblin_Village",
            "melvorD:Graveyard",
            "melvorD:ElerineBattlegrounds",
            "melvorAoD:EyeConicCave",
            "melvorAoD:MuckyCave",
            "melvorAoD:RitualSite",
            "melvorAoD:CollapsedCity",
            "melvorAoD:LostTemple",
            "melvorAoD:ShipwreckCove",
            "melvorAoD:UnderwaterRuins",
            "melvorAoD:TreeOvergrowth",
            "melvorItA:AbyssalFarmlands",
            "melvorItA:DarkDescent",
            "melvorItA:SmoggyPlain",
            "melvorItA:BlightedMarsh",
            "melvorItA:LightlessCave",
            "melvorItA:DreadedCrossing",
            "melvorItA:FracturedPlains",
            "melvorItA:WitheringBastion",
            "melvorItA:MurmuringForest",
            "melvorItA:WhisperwindCove",
            "melvorItA:EldritchDomain",
            "melvorItA:VoidConflux"
          ]
        },
        {
          "$ref": "#/$defs/SlayerAreaID"
        },
        {
          "$ref": "#/$defs/DungeonID"
        },
        {
          "$ref": "#/$defs/StrongholdID"
        },
        {
          "$ref": "#/$defs/AbyssDepthID"
        }
      ]
    },
    "SlayerAreaID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Penumbra",
            "melvorF:Strange_Cave",
            "melvorF:High_Lands",
            "melvorF:Holy_Isles",
            "melvorF:Forest_of_Goo",
            "melvorF:Desolate_Plains",
            "melvorF:Runic_Ruins",
            "melvorF:Arid_Plains",
            "melvorF:Shrouded_Badlands",
            "melvorF:Perilous_Peaks",
            "melvorF:Dark_Waters",
            "melvorF:ToxicSwamps",
            "melvorF:UnhallowedWasteland",
            "melvorTotH:JungleLabyrinth",
            "melvorTotH:LavaLake",
            "melvorTotH:ForsakenTundra",
            "melvorTotH:FoggyLake",
            "melvorTotH:AfflictedCity",
            "melvorTotH:MidnightValley",
            "melvorTotH:GoldenCloudMountains",
            "melvorTotH:MillenniumGate",
            "melvorAoD:CrystalCaves",
            "melvorAoD:CrystalDepths",
            "melvorAoD:DarkQuarry",
            "melvorItA:CrimsonForest",
            "melvorItA:TangledGrove",
            "melvorItA:ToxicWastes",
            "melvorItA:BlightedReach",
            "melvorItA:ParanoiaPit",
            "melvorItA:PetrifiedLair",
            "melvorItA:FracturedSpires",
            "melvorItA:WitheringCatacombs",
            "melvorItA:EchoMire",
            "melvorItA:WhisperingSea",
            "melvorItA:EldritchChasm",
            "melvorItA:TendrilHollow",
            "melvorItA:VoidEnclave",
            "melvorItA:VoidNexus"
          ]
        }
      ]
    },
    "DungeonID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Chicken_Coop",
            "melvorD:Undead_Graveyard",
            "melvorD:Spider_Forest",
            "melvorD:Frozen_Cove",
            "melvorD:Deep_Sea_Ship",
            "melvorD:Volcanic_Cave",
            "melvorD:Bandit_Base",
            "melvorD:Hall_of_Wizards",
            "melvorF:Air_God_Dungeon",
            "melvorF:Water_God_Dungeon",
            "melvorF:Earth_God_Dungeon",
            "melvorF:Fire_God_Dungeon",
            "melvorF:Dragons_Den",
            "melvorF:Miolite_Caves",
            "melvorF:Infernal_Stronghold",
            "melvorF:Into_the_Mist",
            "melvorF:Impending_Darkness",
            "melvorTotH:Ancient_Sanctuary",
            "melvorTotH:Underground_Lava_Lake",
            "melvorTotH:Lightning_Region",
            "melvorTotH:Lair_of_the_Spider_Queen",
            "melvorTotH:Cursed_Forest",
            "melvorTotH:Necromancers_Palace",
            "melvorTotH:Throne_of_the_Herald",
            "melvorAoD:Golem_Territory",
            "melvorAoD:Unholy_Forest",
            "melvorAoD:Trickery_Temple",
            "melvorAoD:Cult_Grounds",
            "melvorAoD:Underwater_City",
            "melvorItA:The_Abyssal_Approach",
            "melvorItA:Into_The_Abyss"
          ]
        }
      ]
    },
    "StrongholdID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:StrongholdOfTheUndead",
            "melvorF:StrongholdOfMagic",
            "melvorF:StrongholdOfDragons",
            "melvorF:StrongholdOfTheGods",
            "melvorItA:StrongholdOfBlight",
            "melvorItA:StrongholdOfFear",
            "melvorItA:StrongholdOfNightmares",
            "melvorItA:StrongholdOfTheOverlords"
          ]
        }
      ]
    },
    "AbyssDepthID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorItA:Depth1",
            "melvorItA:Depth2",
            "melvorItA:Depth3",
            "melvorItA:Depth4",
            "melvorItA:Depth5",
            "melvorItA:Depth6",
            "melvorItA:Depth7",
            "melvorItA:Depth8",
            "melvorItA:Depth9"
          ]
        }
      ]
    },
    "TownshipBuildingID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Blacksmiths_Smithy",
            "melvorF:Magic_Emporium",
            "melvorF:Hunters_Cabin",
            "melvorF:Fishermans_Dock",
            "melvorF:Herbalist",
            "melvorF:Miners_Pit",
            "melvorF:Town_Hall",
            "melvorF:Storehouse",
            "melvorF:Woodcutters_Camp",
            "melvorF:Carpenters_Workshop",
            "melvorF:Farmland",
            "melvorF:Farmers_Market",
            "melvorF:Gatherers_Hut",
            "melvorF:School",
            "melvorF:Large_School",
            "melvorF:Academy",
            "melvorF:Gardens",
            "melvorF:Tavern",
            "melvorF:Cemetery",
            "melvorF:Blacksmiths_Workshop",
            "melvorF:Hunters_Lodge",
            "melvorF:Fishermans_Pier",
            "melvorF:Infirmary",
            "melvorF:Miners_Field",
            "melvorF:Logging_Camp",
            "melvorF:Carpenters_Factory",
            "melvorF:Plantation",
            "melvorF:Gatherers_Lodge",
            "melvorF:Blacksmiths_Forge",
            "melvorF:Hunters_Villa",
            "melvorF:Fishermans_Port",
            "melvorF:Healing_Centre",
            "melvorF:Miners_Quarry",
            "melvorF:Forestry_Camp",
            "melvorF:Carpenters_Foundry",
            "melvorF:Mill",
            "melvorF:Gatherers_Villa",
            "melvorF:Warehouse",
            "melvorF:Repository",
            "melvorF:Tailor",
            "melvorF:Clothier",
            "melvorF:Outfitter",
            "melvorF:Prats_Hats",
            "melvorF:Malcs_Cats",
            "melvorF:Statues",
            "melvorF:Chapel",
            "melvorF:Library",
            "melvorF:Trading_Post",
            "melvorF:Orchard",
            "melvorF:Basic_Shelter",
            "melvorF:Wooden_Hut",
            "melvorF:House",
            "melvorF:Cottage",
            "melvorF:Large_Cottage",
            "melvorTotH:Lemvor_Lemon_Stall",
            "melvorTotH:Blacksmiths_Estate",
            "melvorTotH:Hunters_Estate",
            "melvorTotH:Fishermans_Estate",
            "melvorTotH:Hospital",
            "melvorTotH:Miners_Estate",
            "melvorTotH:Forestry_Estate",
            "melvorTotH:Carpenters_Estate",
            "melvorTotH:Farming_Estate",
            "melvorTotH:Gatherers_Estate",
            "melvorTotH:Clothier_Estate",
            "melvorTotH:Large_Repository",
            "melvorTotH:Large_Academy",
            "melvorTotH:Cool_Rocks",
            "melvorTotH:Manor",
            "melvorTotH:Estate",
            "melvorItA:Abyssal_Gateway",
            "melvorItA:Weaponsmith_I",
            "melvorItA:Weaponsmith_II",
            "melvorItA:Weaponsmith_III",
            "melvorItA:Weaponsmith_IV",
            "melvorItA:Armourer_I",
            "melvorItA:Armourer_II",
            "melvorItA:Armourer_III",
            "melvorItA:Armourer_IV",
            "melvorItA:Abyssal_Harvester_I",
            "melvorItA:Abyssal_Harvester_II",
            "melvorItA:Abyssal_Harvester_III",
            "melvorItA:Reinforced_Carpenter_I",
            "melvorItA:Reinforced_Carpenter_II",
            "melvorItA:Reinforced_Carpenter_III",
            "melvorItA:Obsidian_Mines",
            "melvorItA:Obsidian_Quarry",
            "melvorItA:Obsidian_Blaster",
            "melvorItA:Runestone_Crafter",
            "melvorItA:Runestone_Combiner",
            "melvorItA:Runestone_Merger",
            "melvorItA:Fire_Pit",
            "melvorItA:Bonfire",
            "melvorItA:Voidfire_Beacon",
            "melvorItA:Empowered_Altar",
            "melvorItA:Arcane_Altar",
            "melvorItA:Ethereal_Altar",
            "melvorItA:Enchanted_Tower",
            "melvorItA:Sanctuary",
            "melvorItA:Divine_Sanctuary",
            "melvorItA:Ethereal_Sanctuary",
            "melvorItA:Void_Sanctuary",
            "melvorItA:Abyssal_Research_Lab",
            "melvorItA:Abyssal_Combat_Lab",
            "melvorItA:Slayer_Research_Lab",
            "melvorItA:Abyssal_Enhancer",
            "melvorItA:Wooden_Walls",
            "melvorItA:Stone_Walls",
            "melvorItA:Obsidian_Walls"
          ]
        }
      ]
    },
    "PetID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Beavis",
            "melvorD:PuddingDuckie",
            "melvorD:Pyro",
            "melvorD:Cris",
            "melvorD:CoolRock",
            "melvorD:PuffTheBabyDragon",
            "melvorD:LarryTheLonelyLizard",
            "melvorD:Bruce",
            "melvorD:LilRon",
            "melvorD:Leonardo",
            "melvorD:FinnTheCat",
            "melvorD:GoldenGolbin",
            "melvorD:Ty",
            "melvorD:RipperTheReindeer",
            "melvorD:Chick",
            "melvorD:Zarrah",
            "melvorD:Chio",
            "melvorD:BouncingBob",
            "melvorD:Rosey",
            "melvorD:Ayyden",
            "melvorD:ArcticYeti",
            "melvorD:Mac",
            "melvorD:JerryTheGiraffe",
            "melvorD:PrestonThePlatypus",
            "melvorD:FestiveCoolRock",
            "melvorD:FestiveChio",
            "melvorF:Snek",
            "melvorF:Quill",
            "melvorF:Caaarrrlll",
            "melvorF:Gunter",
            "melvorF:Gronk",
            "melvorF:Marahute",
            "melvorF:Salem",
            "melvorF:Monkey",
            "melvorF:Asura",
            "melvorF:Peri",
            "melvorF:Otto",
            "melvorF:JellyJim",
            "melvorF:Harley",
            "melvorF:Singe",
            "melvorF:Aquarias",
            "melvorF:Norman",
            "melvorF:Erran",
            "melvorF:Ren",
            "melvorF:Pablo",
            "melvorF:Sam",
            "melvorF:TimTheWolf",
            "melvorF:Mark",
            "melvorF:Bone",
            "melvorF:Astro",
            "melvorF:B",
            "melvorF:Marcy",
            "melvorF:Roger",
            "melvorF:Ace",
            "melvorF:Layla",
            "melvorF:MisterFuzzbutt",
            "melvorF:OctaviusLepidus",
            "melvorF:Saki",
            "melvorF:UndeadStronghold",
            "melvorF:MagicStronghold",
            "melvorF:DragonStronghold",
            "melvorF:GodStronghold",
            "melvorTotH:Penelope",
            "melvorTotH:Harry",
            "melvorTotH:Azuzu",
            "melvorTotH:Webbie",
            "melvorTotH:BillAndWendy",
            "melvorTotH:Phantom",
            "melvorTotH:Patchy",
            "melvorTotH:Harold",
            "melvorTotH:ClassyRock",
            "melvorTotH:CuteRock",
            "melvorTotH:RoyalRock",
            "melvorTotH:ElfRock",
            "melvorTotH:MagicRock",
            "melvorTotH:PartyRock",
            "melvorTotH:WarmSnowflake",
            "melvorAoD:Crag",
            "melvorAoD:Aggi",
            "melvorAoD:Sprout",
            "melvorAoD:Kiko",
            "melvorAoD:Lumi",
            "melvorAoD:Warren",
            "melvorAoD:Skye",
            "melvorAoD:Hex",
            "melvorAoD:MapMasteryPet",
            "melvorItA:AbyssaraPet",
            "melvorItA:FelthPet",
            "melvorItA:KarnPet",
            "melvorItA:VruulPet",
            "melvorItA:AnkethPet",
            "melvorItA:ZakulPet",
            "melvorItA:NhilusPet",
            "melvorItA:BlightStronghold",
            "melvorItA:FearStronghold",
            "melvorItA:NightmareStronghold",
            "melvorItA:OverlordStronghold",
            "melvorItA:Esme",
            "melvorItA:Harvesting",
            "melvorItA:Corruption",
            "melvorItA:Zon"
          ]
        }
      ]
    },
    "AttackSpellID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:WindStrike",
            "melvorD:WaterStrike",
            "melvorD:EarthStrike",
            "melvorD:FireStrike",
            "melvorD:WindBolt",
            "melvorD:WaterBolt",
            "melvorD:EarthBolt",
            "melvorD:FireBolt",
            "melvorD:WindBlast",
            "melvorD:WaterBlast",
            "melvorD:EarthBlast",
            "melvorD:FireBlast",
            "melvorD:WindWave",
            "melvorD:WaterWave",
            "melvorD:EarthWave",
            "melvorD:FireWave",
            "melvorD:WindSurge",
            "melvorD:WaterSurge",
            "melvorD:EarthSurge",
            "melvorD:FireSurge",
            "melvorF:NaturesCall",
            "melvorF:NaturesWrath",
            "melvorF:SlicingWinds",
            "melvorF:IcicleVolley",
            "melvorF:Ignite",
            "melvorF:Gust",
            "melvorF:Frostbite",
            "melvorF:Quake",
            "melvorF:Incinerate",
            "melvorTotH:PoisonPods",
            "melvorTotH:GiantFireball",
            "melvorTotH:ThunderStrike",
            "melvorTotH:MeteorShower",
            "melvorTotH:Tsunami",
            "melvorTotH:NaturesBloom",
            "melvorTotH:InfernalPower",
            "melvorTotH:Soulash",
            "melvorTotH:DragonStormCall",
            "melvorTotH:SlicingMaelstrom",
            "melvorAoD:CrushingWaves",
            "melvorAoD:Whirlpool",
            "melvorItA:AbyssalBlast",
            "melvorItA:AbyssalWave",
            "melvorItA:AbyssalSurge",
            "melvorItA:AbyssalEruption",
            "melvorItA:BrumeBlast",
            "melvorItA:BrumeWave",
            "melvorItA:BrumeSurge",
            "melvorItA:BrumeEruption",
            "melvorItA:GloomBlast",
            "melvorItA:GloomWave",
            "melvorItA:GloomSurge",
            "melvorItA:GloomEruption",
            "melvorItA:WitherBlast",
            "melvorItA:WitherWave",
            "melvorItA:WitherSurge",
            "melvorItA:WitherEruption",
            "melvorItA:NetherBlast",
            "melvorItA:NetherWave",
            "melvorItA:NetherSurge",
            "melvorItA:NetherEruption",
            "melvorItA:TendrilSlam",
            "melvorItA:Madness",
            "melvorItA:ConsumingGrasp",
            "melvorItA:Pandemonium",
            "melvorItA:VoidfireVolley",
            "melvorItA:BlackHole",
            "melvorItA:NullSphere",
            "melvorItA:InfiniteVoid"
          ]
        }
      ]
    },
    "CombatPassiveID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:ControlledAffliction",
            "melvorD:SwingFirst",
            "melvorD:DontHurtMe",
            "melvorD:JustAScratch",
            "melvorD:BigBoi",
            "melvorD:CantTouchThis",
            "melvorD:Stronk",
            "melvorD:JustDontMiss",
            "melvorD:CheatsEnabled",
            "melvorD:SomethingWillHit",
            "melvorD:Yoink",
            "melvorD:NothingPersonalKid",
            "melvorD:Humungus",
            "melvorD:NerfThisGuy",
            "melvorD:No1Mixtape",
            "melvorD:AbsoluteThickness",
            "melvorD:OhNoooo",
            "melvorD:Rank1Ninja",
            "melvorD:ProGamer",
            "melvorD:AllOnRed",
            "melvorD:ImAlreadyToxic",
            "melvorF:Purity",
            "melvorF:Purity2",
            "melvorF:Rebirth",
            "melvorF:MeleeProficiency",
            "melvorF:RangedProficiency",
            "melvorF:MagicProficiency",
            "melvorF:AfflictedMight",
            "melvorF:Afflicted",
            "melvorF:MistBoss",
            "melvorF:ToxicGlands",
            "melvorF:PoisonousHide",
            "melvorF:CursedRobes",
            "melvorF:SpikedArmour",
            "melvorF:BonePlate",
            "melvorF:FleetingDefence",
            "melvorF:EventPassive1",
            "melvorF:EventPassive2",
            "melvorF:EventPassive3",
            "melvorF:EventPassive4",
            "melvorF:EventPassive5",
            "melvorF:EventPassive6",
            "melvorF:EventPassive7",
            "melvorF:EventPassive8",
            "melvorF:EventPassive9",
            "melvorF:EventPassive10",
            "melvorF:EventPassive11",
            "melvorF:EventPassive12",
            "melvorF:Slimed",
            "melvorF:StandardStrongholdBuff",
            "melvorF:AugmentedStrongholdBuff",
            "melvorF:SuperiorStrongholdBuff",
            "melvorF:StrongholdBossBuff",
            "melvorF:StrongholdDamageModifier40",
            "melvorF:StrongholdDamageModifier35",
            "melvorF:StrongholdDamageModifier25",
            "melvorF:StrongholdDamageModifier72",
            "melvorF:StrongholdDamageModifier71",
            "melvorF:StrongholdDamageModifier70",
            "melvorF:StrongholdDamageModifier85",
            "melvorF:StrongholdDamageModifier84",
            "melvorF:StrongholdDamageModifier30",
            "melvorF:StrongholdDamageModifier20",
            "melvorF:StrongholdDamageModifier15",
            "melvorF:StrongholdDamageModifier52",
            "melvorF:StrongholdDamageModifier50",
            "melvorF:StrongholdDamageModifier47",
            "melvorF:StrongholdDamageModifier80",
            "melvorF:StrongholdDamageModifier79",
            "melvorF:StrongholdDamageModifier78",
            "melvorF:StrongholdDamageModifier83",
            "melvorF:StrongholdDamageModifier82",
            "melvorF:StrongholdDamageModifier81",
            "melvorF:UndeadI",
            "melvorF:UndeadII",
            "melvorF:ElementalistI",
            "melvorF:ElementalistII",
            "melvorF:BurningI",
            "melvorF:BurningII",
            "melvorF:StrongholdAfflictionI",
            "melvorF:StrongholdAfflictionII",
            "melvorTotH:Intimidation3",
            "melvorTotH:Intimidation7",
            "melvorTotH:Intimidation8",
            "melvorTotH:Intimidation9",
            "melvorTotH:Intimidation10",
            "melvorTotH:Intimidation11",
            "melvorTotH:Intimidation13",
            "melvorTotH:Intimidation15",
            "melvorTotH:Intimidation16",
            "melvorTotH:Intimidation18",
            "melvorTotH:Intimidation19",
            "melvorTotH:Intimidation20",
            "melvorTotH:Intimidation21",
            "melvorTotH:Intimidation23",
            "melvorTotH:Intimidation24",
            "melvorTotH:Intimidation25",
            "melvorTotH:Intimidation29",
            "melvorTotH:Intimidation30",
            "melvorTotH:Intimidation36",
            "melvorTotH:ToxicSkin",
            "melvorTotH:AfflictedVitality",
            "melvorTotH:Ablaze",
            "melvorTotH:FrozenBuild",
            "melvorTotH:Shocked",
            "melvorTotH:AbsorbingSkin",
            "melvorTotH:Duality",
            "melvorTotH:StickyWebs",
            "melvorTotH:Decay",
            "melvorTotH:Rage",
            "melvorTotH:IngrainedRoots",
            "melvorTotH:CursedLifesteal",
            "melvorTotH:UndeadGrasp",
            "melvorTotH:DarkBlade",
            "melvorTotH:WeaknessFinder",
            "melvorTotH:ElementalMaster",
            "melvorTotH:Assassin",
            "melvorTotH:Warrior",
            "melvorTotH:PoisonLifesteal",
            "melvorTotH:PoisonImmunity",
            "melvorTotH:BurnImmunity",
            "melvorTotH:ProtectionOfTheForest",
            "melvorTotH:SlowImmunity",
            "melvorTotH:StunImmunity",
            "melvorTotH:BleedImmunity",
            "melvorTotH:Intimidation38",
            "melvorTotH:Intimidation39",
            "melvorTotH:Intimidation40",
            "melvorTotH:Intimidation42",
            "melvorTotH:Intimidation43",
            "melvorTotH:Intimidation44",
            "melvorTotH:Intimidation27",
            "melvorTotH:Intimidation35",
            "melvorTotH:BleedLifesteal500",
            "melvorTotH:Intimidation4",
            "melvorTotH:AfflictedResilience",
            "melvorTotH:GrowingMadness",
            "melvorTotH:MomentInTime",
            "melvorTotH:ReignOverTime",
            "melvorTotH:EndOfTurnHealing3_15",
            "melvorTotH:BurnLifesteal1000",
            "melvorTotH:Lifesteal100",
            "melvorTotH:CurseOfTheUndead",
            "melvorAoD:BarrierRegen",
            "melvorAoD:EndofTurnHealing2",
            "melvorAoD:EndofTurnHealing8",
            "melvorAoD:EndofTurnHealing4",
            "melvorAoD:MajorReflection",
            "melvorAoD:WeakeningTouch",
            "melvorAoD:PoisonMaster",
            "melvorAoD:Ghostly",
            "melvorAoD:Underwater",
            "melvorAoD:Crystallization",
            "melvorAoD:CrystalSanction",
            "melvorAoD:Lifesteal10",
            "melvorAoD:Reflect",
            "melvorAoD:BasicImmunity",
            "melvorAoD:PuppetMaster",
            "melvorAoD:UnholyAura",
            "melvorItA:Ablaze50",
            "melvorItA:StandardAbyssalStrongholdBuff",
            "melvorItA:AugmentedAbyssalStrongholdBuff",
            "melvorItA:SuperiorAbyssalStrongholdBuff",
            "melvorItA:AbyssalStrongholdBossBuff",
            "melvorItA:AbyssalIntimidation10",
            "melvorItA:AbyssalIntimidation20",
            "melvorItA:AbyssalIntimidation30",
            "melvorItA:AbyssalIntimidation40",
            "melvorItA:AbyssalIntimidation50",
            "melvorItA:AbyssalIntimidation55",
            "melvorItA:AbyssalIntimidation59",
            "melvorItA:AbyssalIntimidation60",
            "melvorItA:AbyssalIntimidation63",
            "melvorItA:PermanentCorruption",
            "melvorItA:SmogSlimes",
            "melvorItA:MinorFear",
            "melvorItA:ThornyVines",
            "melvorItA:LacerationMaster",
            "melvorItA:LaceratingBlade",
            "melvorItA:HeavyBlighter",
            "melvorItA:AbyssalMalevolence",
            "melvorItA:VoidHivemind",
            "melvorItA:TerrifyingPresence",
            "melvorItA:UnnaturalForm",
            "melvorItA:SilentSurroundings",
            "melvorItA:ToxicSpawn",
            "melvorItA:BlightedTouch",
            "melvorItA:ToxicMartyr",
            "melvorItA:ShadowAmbusher",
            "melvorItA:MajorFear",
            "melvorItA:FearBringer",
            "melvorItA:WitheredGuard",
            "melvorItA:WitheredFlesh",
            "melvorItA:WitheredVitality",
            "melvorItA:WitheringDevourer",
            "melvorItA:SilencingStrikes",
            "melvorItA:SilentHarbinger",
            "melvorItA:EldritchTouch",
            "melvorItA:TendrilNightmare",
            "melvorItA:Voidtouch",
            "melvorItA:VoidGazer",
            "melvorItA:AbyssalMight",
            "melvorItA:AbyssalMight2",
            "melvorItA:VoidBody",
            "melvorItA:Sovereignty",
            "melvorItA:TaintedI",
            "melvorItA:TaintedII",
            "melvorItA:FearingI",
            "melvorItA:FearingII",
            "melvorItA:HypnosisI",
            "melvorItA:HypnosisII",
            "melvorItA:ManifestationI",
            "melvorItA:ManifestationII"
          ]
        }
      ]
    },
    "CombatEventID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:ImpendingDarkness"
          ]
        }
      ]
    },
    "GamemodeID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Unset",
            "melvorD:Standard",
            "melvorF:Hardcore",
            "melvorF:Adventure",
            "melvorF:Chaos",
            "melvorF:HardcoreAdventureSpeedrun",
            "melvorF:InternalSuffering",
            "melvorF:HCCOSpeedrun",
            "melvorAoD:AncientRelics",
            "melvorAoD:HardcoreAncientRelicsSpeedrun",
            "melvorAoD:HCCOARSpeedrun"
          ]
        }
      ]
    },
    "DamageTypeID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Normal",
            "melvorF:Pure",
            "melvorItA:Abyssal",
            "melvorItA:Eternal"
          ]
        }
      ]
    },
    "ActionID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Combat",
            "melvorD:GolbinRaid",
            "melvorD:Magic",
            "melvorD:Woodcutting",
            "melvorD:Fishing",
            "melvorD:Firemaking",
            "melvorD:Cooking",
            "melvorD:Mining",
            "melvorD:Smithing",
            "melvorD:Thieving",
            "melvorD:Farming",
            "melvorD:Fletching",
            "melvorD:Crafting",
            "melvorD:Runecrafting",
            "melvorD:Herblore",
            "melvorD:Agility",
            "melvorD:Summoning",
            "melvorD:Astrology",
            "sailing:Sailing"
          ]
        }
      ]
    },
    "TownshipResourceID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:GP",
            "melvorF:Food",
            "melvorF:Wood",
            "melvorF:Stone",
            "melvorF:Ore",
            "melvorF:Coal",
            "melvorF:Bar",
            "melvorF:Herbs",
            "melvorF:Rune_Essence",
            "melvorF:Leather",
            "melvorF:Potions",
            "melvorF:Planks",
            "melvorF:Clothing",
            "melvorItA:Obsidian",
            "melvorItA:Runestone",
            "melvorItA:Voidfire_Ash",
            "melvorItA:Reinforced_Planks",
            "melvorItA:ArmourWeaponry",
            "melvorItA:Abyssal_Stone",
            "melvorItA:AP"
          ]
        }
      ]
    },
    "TownshipBiomeID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Grasslands",
            "melvorF:Forest",
            "melvorF:Mountains",
            "melvorF:Water",
            "melvorF:Swamp",
            "melvorF:Valley",
            "melvorF:Arid_Plains",
            "melvorF:Jungle",
            "melvorF:Desert",
            "melvorF:Snowlands",
            "melvorItA:Abyssal_Plains",
            "melvorItA:Sulfuric_Wastelands",
            "melvorItA:Obsidian_Cliffs",
            "melvorItA:Ethereal_Voids"
          ]
        }
      ]
    },
    "TownshipSeasonID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Spring",
            "melvorF:Summer",
            "melvorF:Fall",
            "melvorF:Winter",
            "melvorF:Nightfall",
            "melvorF:SolarEclipse",
            "melvorAoD:Lemon",
            "melvorItA:EternalDarkness"
          ]
        }
      ]
    },
    "WorldMapID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorAoD:Melvor",
            "melvorAoD:Lemvor"
          ]
        }
      ]
    },
    "PointsOfInterestID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorAoD:AncientMarket",
            "melvorAoD:OldVillage",
            "melvorAoD:RitualSite",
            "melvorAoD:Monuments",
            "melvorAoD:CoralWreckage",
            "melvorAoD:Cathedral",
            "melvorAoD:ShipwreckCove",
            "melvorAoD:Watchtower",
            "melvorAoD:SacrificialSite",
            "melvorAoD:Bazaar",
            "melvorAoD:CastleRuins",
            "melvorAoD:AncientForge",
            "melvorAoD:Quarry",
            "melvorAoD:Mines",
            "melvorAoD:LostTemple",
            "melvorAoD:Stoneworkers",
            "melvorAoD:Melantis",
            "melvorAoD:RagnarDungeonRuins",
            "melvorAoD:TerranDungeonRuins",
            "melvorAoD:GlaciaDungeonRuins",
            "melvorAoD:AerisDungeonRuins",
            "melvorAoD:CreviceOfRiches",
            "melvorAoD:Willowshire",
            "melvorAoD:CapitalCityLighthouse",
            "melvorAoD:PortOfNations",
            "melvorAoD:Rosedale",
            "melvorAoD:RootsOfRiches",
            "melvorAoD:FriendlyPort",
            "melvorAoD:BustlingPassage",
            "melvorAoD:VibrantPort",
            "melvorAoD:OuterRegions",
            "melvorAoD:EdgeOfDarkness",
            "melvorAoD:SandCoveredTreasure",
            "melvorAoD:MulticulturalPort",
            "melvorAoD:WesternLighthouse",
            "melvorAoD:OminousPort",
            "melvorAoD:BeaconPort",
            "melvorAoD:SwirlingAbyss",
            "melvorAoD:CalmBeforeTheStorm",
            "melvorAoD:HuntForTheGildedGolbins",
            "melvorAoD:AbandonedTemple",
            "melvorAoD:TreacherousNorth",
            "melvorAoD:WhisperingPort",
            "melvorAoD:ShroudedHorizon",
            "melvorAoD:IllFatedVessel",
            "melvorAoD:JaggedLabyrinth",
            "melvorAoD:SandyShores",
            "melvorAoD:VibrantCoralGardens",
            "melvorAoD:CursedIsland",
            "melvorAoD:MioliteCaves",
            "melvorAoD:RunedBattlefield",
            "melvorAoD:GiantDungeon",
            "melvorAoD:SeashadeVillage",
            "melvorAoD:TranquilOpenWaters",
            "melvorAoD:FishermansBounty",
            "melvorAoD:AncientWreckage",
            "melvorAoD:ShroudedBadlands",
            "melvorAoD:MysticRuins",
            "melvorAoD:ShadowLurkers",
            "melvorAoD:CoralBounty",
            "melvorAoD:CavernOfRiches",
            "melvorAoD:WetForest",
            "melvorAoD:UnhallowedWasteland",
            "melvorAoD:SnowCoveredPier",
            "melvorAoD:EyeConicCave",
            "melvorAoD:HighLands",
            "melvorAoD:ForestOfGoo",
            "melvorAoD:PenguinBay",
            "melvorAoD:FrozenPerch",
            "melvorAoD:PiratesTreasureTrails",
            "melvorAoD:MoltenPeak",
            "melvorAoD:SpiderForest",
            "melvorAoD:SouthernLighthouse",
            "melvorAoD:BeginningPort",
            "melvorAoD:BustlingPort",
            "melvorAoD:NewHorizon",
            "melvorAoD:GlacialExpanse",
            "melvorAoD:EngravedRiches",
            "melvorAoD:GolbinVillage",
            "melvorAoD:ANewStart",
            "melvorAoD:GolbinsStash",
            "melvorAoD:FrostyHaven",
            "melvorAoD:FakePort",
            "melvorAoD:WanderersGift",
            "melvorAoD:ToxicSwamps",
            "melvorAoD:ShimmeringOasis",
            "melvorAoD:HolyIsles",
            "melvorAoD:MistyPort",
            "melvorAoD:FloweryFields",
            "melvorAoD:ShimmeringSandsOutpost",
            "melvorAoD:SecretGlacialHoard",
            "melvorAoD:PerilousAscent",
            "melvorAoD:PerilousPeaks",
            "melvorAoD:RiverRest",
            "melvorAoD:FrostbiteBluff",
            "melvorAoD:EasternDeceitfulWoods",
            "melvorAoD:FrostDriftPort",
            "melvorAoD:CastleOfKings",
            "melvorAoD:ShadowedPort",
            "melvorAoD:DragonValley",
            "melvorAoD:AbandonedVeinMine",
            "melvorAoD:CapitalCityCrossroads",
            "melvorAoD:OldMine",
            "melvorAoD:FishermansEnclave",
            "melvorAoD:ShallowShores",
            "melvorAoD:CapitalCitysSquare",
            "melvorAoD:CapitalCitysKnights",
            "melvorAoD:CityscapeBridge",
            "melvorAoD:BanditHideout",
            "melvorAoD:CapitalCitysAlleyways",
            "melvorAoD:DarkWaters",
            "melvorAoD:SunsetFishingPoint",
            "melvorAoD:MoonlitPier",
            "melvorAoD:Monolith",
            "melvorAoD:FriendlyFisherman",
            "melvorAoD:WatchfulShip",
            "melvorAoD:SadgeKraken",
            "melvorAoD:SecludedHut",
            "melvorAoD:HarvestHavenFarm",
            "melvorAoD:FarmersMarket",
            "melvorAoD:RiverCrossroads",
            "melvorAoD:AcademiaArcanum",
            "melvorAoD:PinkKraken",
            "melvorAoD:RestlessSanctum",
            "melvorAoD:LoneHuntress",
            "melvorAoD:FlickeringFireCamp",
            "melvorAoD:PratsBridge",
            "melvorAoD:SeaNoodle",
            "melvorAoD:PushySailor",
            "melvorAoD:CornerOfDisappointment",
            "melvorAoD:MuckyCave",
            "melvorAoD:Pyramid",
            "melvorAoD:MysteriousIsland",
            "melvorAoD:RuinedSilverCity",
            "melvorAoD:LemvorPortal",
            "melvorAoD:MelvorPortal"
          ]
        }
      ]
    },
    "PaperMakingRecipeID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorAoD:Paper_Normal_Logs",
            "melvorAoD:Paper_Oak_Logs",
            "melvorAoD:Paper_Willow_Logs",
            "melvorAoD:Paper_Teak_Logs",
            "melvorAoD:Paper_Unholy_Logs",
            "melvorAoD:Paper_Maple_Logs",
            "melvorAoD:Paper_Mahogany_Logs",
            "melvorAoD:Paper_Yew_Logs",
            "melvorAoD:Paper_Cursed_Logs",
            "melvorAoD:Paper_Magic_Logs",
            "melvorAoD:Paper_Redwood_Logs",
            "melvorAoD:Paper_Spruce_Logs",
            "melvorAoD:Paper_Hornbeam_Logs",
            "melvorAoD:Paper_Grove_Logs",
            "melvorAoD:Paper_Linden_Logs",
            "melvorAoD:Paper_Elderwood_Logs",
            "melvorAoD:Paper_Red_Oak_Logs",
            "melvorAoD:Paper_Revenant_Logs",
            "melvorAoD:Paper_Mystic_Logs",
            "melvorAoD:Paper_Carrion_Logs"
          ]
        }
      ]
    },
    "ArchaeologyDigSiteID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorAoD:OldVillage",
            "melvorAoD:AncientMarket",
            "melvorAoD:SacrificialSite",
            "melvorAoD:Stoneworkers",
            "melvorAoD:Monuments",
            "melvorAoD:Bazaar",
            "melvorAoD:Mines",
            "melvorAoD:CoralWreckage",
            "melvorAoD:Quarry",
            "melvorAoD:RuinedCity",
            "melvorAoD:AncientForge",
            "melvorAoD:RitualSite",
            "melvorAoD:LostTemple",
            "melvorAoD:Watchtower",
            "melvorAoD:CastleRuins",
            "melvorAoD:Cathedral",
            "melvorAoD:ShipwreckCove",
            "melvorAoD:Melantis"
          ]
        }
      ]
    },
    "ShopUpgradeChainID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Pickaxe",
            "melvorD:Axe",
            "melvorD:FishingRod",
            "melvorAoD:Sieve",
            "melvorAoD:Trowel",
            "melvorAoD:Brush",
            "melvorAoD:Shovel",
            "melvorItA:FishingRodCoating",
            "melvorItA:AxeCoating",
            "melvorItA:PickaxeCoating",
            "melvorItA:Harvester"
          ]
        }
      ]
    },
    "RealmID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Melvor",
            "melvorItA:Abyssal",
            "melvorItA:Eternal"
          ]
        }
      ]
    },
    "CurrencyID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:GP",
            "melvorD:SlayerCoins",
            "melvorD:RaidCoins",
            "melvorItA:AbyssalPieces",
            "melvorItA:AbyssalSlayerCoins"
          ]
        }
      ]
    },
    "CombatTriangleSetID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Normal",
            "melvorItA:Reversed"
          ]
        }
      ]
    },
    "CombatEffectGroupID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:StunLike",
            "melvorD:Stun",
            "melvorD:StunImmune",
            "melvorD:Freeze",
            "melvorD:Crystallize",
            "melvorD:Sleep",
            "melvorD:SleepImmune",
            "melvorD:Drowsy",
            "melvorD:Slow",
            "melvorD:Frostburn",
            "melvorD:DamageOverTime",
            "melvorD:BurnDOT",
            "melvorD:BleedDOT",
            "melvorD:PoisonDOT",
            "melvorD:RegenDOT",
            "melvorD:DeadlyPoisonDOT",
            "melvorD:BarrierBleedDOT",
            "melvorD:BarrierBurnDOT",
            "melvorD:LacerationDOT",
            "melvorD:Stacking",
            "melvorD:Curse",
            "melvorD:Buff",
            "melvorD:Debuff",
            "melvorD:Fear",
            "melvorD:FearImmune",
            "melvorD:CrystalSanction",
            "melvorItA:Corruption",
            "melvorItA:Blight",
            "melvorItA:Wither",
            "melvorItA:Silence",
            "melvorItA:SilenceImmune",
            "melvorItA:EldritchCurse",
            "melvorItA:Voidburst",
            "melvorItA:ToxinDOT",
            "melvorItA:AblazeDOT"
          ]
        }
      ]
    },
    "CombatEffectTemplateID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:SelfTurnCounting",
            "melvorD:TargetTurnCounting",
            "melvorD:EndOfFightRemoval",
            "melvorD:StaticModifiers",
            "melvorD:StackingModifiers",
            "melvorD:StaticSelfCountingModifier",
            "melvorD:StaticTargetCountingModifier",
            "melvorD:StaticNonCountingModifier",
            "melvorD:StackingSelfCountingModifier",
            "melvorD:StackingTargetCountingModifier",
            "melvorD:StackingNonCountingModifier",
            "melvorD:BaseSlow",
            "melvorD:Slow",
            "melvorD:StunLike",
            "melvorD:Stun",
            "melvorD:Freeze",
            "melvorD:Crystallize",
            "melvorD:Sleep",
            "melvorD:Reflexive",
            "melvorD:SelfCountingReflexive",
            "melvorD:NonCountingReflexive",
            "melvorD:Reductive",
            "melvorD:SelfCountingReductive",
            "melvorD:NonCountingReductive",
            "melvorD:Incremental",
            "melvorD:ResettingIncremental",
            "melvorD:NonCountingIncremental",
            "melvorD:SelfCountingIncremental",
            "melvorD:NonCountingResettingIncremental",
            "melvorD:SelfCountingResettingIncremental",
            "melvorD:Stacking",
            "melvorD:Combo",
            "melvorD:Intervaled",
            "melvorD:Proccing",
            "melvorD:DOT",
            "melvorD:BurnDOT",
            "melvorD:BleedDOT",
            "melvorD:PoisonDOT",
            "melvorD:DeadlyPoisonDOT",
            "melvorD:BarrierBleedDOT",
            "melvorD:BarrierBurnDOT",
            "melvorD:UnendingRegen",
            "melvorD:Regen",
            "melvorD:Curse",
            "melvorD:EveryXSelfTurns",
            "melvorD:EndOfTurnCurrentHealing",
            "melvorD:EndOfTurnMaxHealing",
            "melvorD:SlayerEndOfTurnCurrentHealing",
            "melvorD:Fear",
            "melvorD:Decremental",
            "melvorD:EndOfTurnMaxBarrierRegen",
            "melvorD:DecrementalOnHit",
            "melvorD:DutyCycleModifiers",
            "melvorItA:Blight",
            "melvorItA:StackingLacerationDOT",
            "melvorItA:AblazeDOT",
            "melvorItA:ToxinDOT"
          ]
        }
      ]
    },
    "CombatEffectID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:StunImmunity",
            "melvorD:SleepImmunity",
            "melvorD:Drowsy",
            "melvorD:FearImmunity",
            "melvorD:DecreasedEvasionStacking",
            "melvorD:Affliction",
            "melvorD:Burn",
            "melvorD:Frostburn",
            "melvorD:Poison",
            "melvorD:DeadlyPoison",
            "melvorD:Bleed100",
            "melvorD:Bleed200",
            "melvorD:Bleed400",
            "melvorD:Stun",
            "melvorD:Freeze",
            "melvorD:Crystallize",
            "melvorD:Sleep",
            "melvorD:Fear",
            "melvorD:Slow",
            "melvorD:EndOfTurnCurrentHealing",
            "melvorD:EndOfTurnMaxHealing",
            "melvorD:SlayerEndOfTurnCurrentHealing",
            "melvorD:CurrentHitpointsHeal",
            "melvorD:BarrierRegenDebuff",
            "melvorD:EndOfTurnMaxBarrierRegen",
            "melvorD:XmasDeath0",
            "melvorD:RapidFire0",
            "melvorD:Fleetness0",
            "melvorD:OnTheHunt0",
            "melvorD:Onslaught0",
            "melvorD:EmeraldShots0",
            "melvorD:TiltedShot0",
            "melvorD:StoneBarrier0",
            "melvorD:Heal0",
            "melvorF:Undead_Enhancement_Superior",
            "melvorF:Magic_Enhancement_Superior",
            "melvorF:Dragon_Enhancement_Superior",
            "melvorF:Gods_Enhancement_Superior",
            "melvorF:RandomEvasion",
            "melvorF:ModifierSlow",
            "melvorF:BleedReflect",
            "melvorF:Nulled",
            "melvorF:BlindingI",
            "melvorF:SoulSplitI",
            "melvorF:WeakeningI",
            "melvorF:AnguishI",
            "melvorF:BlindingII",
            "melvorF:SoulSplitII",
            "melvorF:WeakeningII",
            "melvorF:Confusion",
            "melvorF:AnguishII",
            "melvorF:BlindingIII",
            "melvorF:SoulSplitIII",
            "melvorF:WeakeningIII",
            "melvorF:AnguishIII",
            "melvorF:Decay",
            "melvorF:MarkOfDeath",
            "melvorF:Flurry0",
            "melvorF:IcePrison1",
            "melvorF:ImpairingShot0",
            "melvorF:Quicksand0",
            "melvorF:Sandblast0",
            "melvorF:BleedDeadlyCut",
            "melvorF:Rend0",
            "melvorF:Rend1",
            "melvorF:TidalWave0",
            "melvorF:OceanSong0",
            "melvorF:Shockwave0",
            "melvorF:Cyclone0",
            "melvorF:StoneWall0",
            "melvorF:CurseofFear0",
            "melvorF:HunterExpertise0",
            "melvorF:Agility0",
            "melvorF:Elusiveness0",
            "melvorF:CurseoftheDeep0",
            "melvorF:BurningTrail0",
            "melvorF:Shadowstep0",
            "melvorF:ShadowBurst0",
            "melvorF:IntotheMist0",
            "melvorF:IntotheMist1",
            "melvorF:FragileMind0",
            "melvorF:UnknownThreat0",
            "melvorF:UnknownThreat1",
            "melvorF:MistWalk0",
            "melvorF:MistWalk1",
            "melvorF:PenetratingSpikeShot0",
            "melvorF:Burrow0",
            "melvorF:CrushingClaws0",
            "melvorF:Cleave0",
            "melvorF:BoneCrush0",
            "melvorF:SpikedTailWhip0",
            "melvorF:SwiftAttack0",
            "melvorF:BarragePlayer0",
            "melvorF:Absorbing_Shield",
            "melvorF:Split0",
            "melvorF:SlimedRegen",
            "melvorF:DisableDamageForAttack",
            "melvorF:BigOlRon",
            "melvorTotH:Shock",
            "melvorTotH:DarkBlade",
            "melvorTotH:Assassin",
            "melvorTotH:Duality",
            "melvorTotH:GrowingMadness",
            "melvorTotH:MomentInTime",
            "melvorTotH:ReignOverTime",
            "melvorTotH:ShadowCloak",
            "melvorTotH:Increased5DR",
            "melvorTotH:AbsorbingSkin",
            "melvorTotH:Rage",
            "melvorTotH:GauntletsOfRage",
            "melvorTotH:Madness",
            "melvorTotH:Torment",
            "melvorTotH:Despair",
            "melvorTotH:SharpWing0",
            "melvorTotH:FullBloom0",
            "melvorTotH:FullBloom1",
            "melvorTotH:FlameRush0",
            "melvorTotH:Headbutt0",
            "melvorTotH:MasterOfHeat0",
            "melvorTotH:MasterOfHeat1",
            "melvorTotH:BurningFury0",
            "melvorTotH:WardOfFlame0",
            "melvorTotH:IceReanimation0",
            "melvorTotH:ElectricCharge0",
            "melvorTotH:ElectricCharge1",
            "melvorTotH:Predator0",
            "melvorTotH:WaterDance0",
            "melvorTotH:CaughtInTheWeb0",
            "melvorTotH:BlindingBeams0",
            "melvorTotH:ShadeSummon0",
            "melvorTotH:GreaterShadeSummon0",
            "melvorTotH:GreaterShadeSummonEnemy0",
            "melvorTotH:Darkblade0",
            "melvorTotH:PhantomSummon0",
            "melvorTotH:FeatherBarrier0",
            "melvorTotH:RapidParry0",
            "melvorTotH:FullCharge1",
            "melvorTotH:WindBarrier0",
            "melvorTotH:Battlecry0",
            "melvorTotH:Battlecry1",
            "melvorTotH:Alacrity0",
            "melvorTotH:DejaVu0",
            "melvorTotH:PowerOfTheMist0",
            "melvorTotH:NaturesBloom0",
            "melvorTotH:Reduction0",
            "melvorTotH:DarkBladePlayer0",
            "melvorTotH:EtheralArrows0",
            "melvorTotH:CorundumWounds0",
            "melvorTotH:AugiteCrystallization0",
            "melvorTotH:DivineBreaker0",
            "melvorTotH:ElderwoodPoison1",
            "melvorTotH:RevenantHunter0",
            "melvorTotH:CarrionMarker0",
            "melvorTotH:ShadeSummonEnemy0",
            "melvorTotH:PhantomSummonPlayer0",
            "melvorTotH:OceanSongEnemy0",
            "melvorTotH:ImpairingShotEnemy0",
            "melvorTotH:FlurryEnemy0",
            "melvorTotH:TidalWaveEnemy0",
            "melvorTotH:Leviathan",
            "melvorAoD:Elusive",
            "melvorAoD:CrystalSanction",
            "melvorAoD:WeakeningTouch",
            "melvorAoD:UnderwaterSlow",
            "melvorAoD:UnderwaterAttackSpeed",
            "melvorAoD:Cleansed",
            "melvorAoD:IncreasedMaxHitpoints",
            "melvorAoD:Blind",
            "melvorAoD:MagicMasterRelic",
            "melvorAoD:AttackMasterRelic",
            "melvorAoD:StrengthMasterRelic",
            "melvorAoD:Fatigue",
            "melvorAoD:Petrified",
            "melvorAoD:UnholyMark",
            "melvorAoD:BarrierBleed",
            "melvorAoD:BarrierBurn",
            "melvorAoD:CrystalFlurry0",
            "melvorAoD:Warhorn0",
            "melvorAoD:Flight0",
            "melvorAoD:LullabyOfTheEnchanter1",
            "melvorAoD:RestorationOfTheMind0",
            "melvorAoD:DanceOfTheMage0",
            "melvorAoD:MysticRegen0",
            "melvorAoD:AcidicBlast0",
            "melvorAoD:CrystalSanction0",
            "melvorAoD:LesserFamiliarAura0",
            "melvorAoD:EarthWall0",
            "melvorAoD:EarthWallPlayer0",
            "melvorAoD:SpiritBurn0",
            "melvorAoD:MindBarrier0",
            "melvorAoD:Illusion0",
            "melvorAoD:IllusionPlayer0",
            "melvorAoD:Manipulate0",
            "melvorAoD:Foresight0",
            "melvorAoD:ForesightPlayer0",
            "melvorAoD:WaterBarrier0",
            "melvorAoD:WaterBarrierPlayer0",
            "melvorAoD:HastyAssault0",
            "melvorAoD:HastyAssaultPlayer0",
            "melvorAoD:EradicatingBlast0",
            "melvorAoD:NullAndCleanse0",
            "melvorAoD:NullAndCleanse1",
            "melvorAoD:NullAndCleanse2",
            "melvorAoD:CrystalLure0",
            "melvorAoD:SharedToxins1",
            "melvorAoD:PoisonHuntsman0",
            "melvorAoD:PoisonSpikeSkin0",
            "melvorAoD:AgileHunter0",
            "melvorAoD:EvilMalice0",
            "melvorAoD:AngryGrudge0",
            "melvorAoD:AngryGrudge1",
            "melvorAoD:ConsumingRage0",
            "melvorAoD:ShellBuff0",
            "melvorAoD:AccuracyGem",
            "melvorAoD:EvasionGem",
            "melvorAoD:LifestealGem",
            "melvorAoD:BurningGem",
            "melvorAoD:PoisonousGem",
            "melvorAoD:AgileGem",
            "melvorAoD:ConfusingGem",
            "melvorAoD:DecayingGem",
            "melvorAoD:HauntedRing",
            "melvorAoD:DisableDamage",
            "melvorAoD:Malice",
            "melvorAoD:GrudgePlayer",
            "melvorAoD:GrudgeEnemy",
            "melvorAoD:Consume",
            "melvorAoD:Spite",
            "melvorAoD:Martyr",
            "melvorAoD:Eradicate",
            "melvorItA:Blighted_Enhancement_Superior",
            "melvorItA:Fear_Enhancement_Superior",
            "melvorItA:Nightmare_Enhancement_Superior",
            "melvorItA:Overlords_Enhancement_Superior",
            "melvorItA:LurkerGem",
            "melvorItA:SmogSlimedRegen",
            "melvorItA:SmogVanishHeal",
            "melvorItA:SmogRetreat0",
            "melvorItA:SmogRush0",
            "melvorItA:SmogVanish0",
            "melvorItA:AbyssalDoubleStrike0",
            "melvorItA:AbyssalDoubleShot0",
            "melvorItA:AbyssalIncantation0",
            "melvorItA:Brume0",
            "melvorItA:CorruptionCounter",
            "melvorItA:Laceration",
            "melvorItA:Ablaze",
            "melvorItA:Toxin",
            "melvorItA:Blight",
            "melvorItA:Shadeveil",
            "melvorItA:Wither",
            "melvorItA:SilenceImmunity",
            "melvorItA:Silence",
            "melvorItA:EldritchCurse",
            "melvorItA:Voidburst",
            "melvorItA:Corruption0",
            "melvorItA:Corruption1",
            "melvorItA:Corruption2",
            "melvorItA:Corruption3",
            "melvorItA:Corruption4",
            "melvorItA:Corruption5",
            "melvorItA:Corruption6",
            "melvorItA:Corruption7",
            "melvorItA:Corruption8",
            "melvorItA:Corruption9",
            "melvorItA:Corruption10",
            "melvorItA:Corruption11",
            "melvorItA:Corruption12",
            "melvorItA:Corruption13",
            "melvorItA:Corruption14",
            "melvorItA:Corruption15",
            "melvorItA:Corruption16",
            "melvorItA:Corruption17",
            "melvorItA:Corruption18",
            "melvorItA:Corruption19",
            "melvorItA:Corruption20",
            "melvorItA:Corruption21",
            "melvorItA:Corruption22",
            "melvorItA:AbyssalBlast",
            "melvorItA:AbyssalWave",
            "melvorItA:AbyssalSurge",
            "melvorItA:AbyssalEruption",
            "melvorItA:AbyssalCrash",
            "melvorItA:AbyssalParry",
            "melvorItA:WardensGaze",
            "melvorItA:DarkRoost",
            "melvorItA:SmogLurker",
            "melvorItA:SmogHunter",
            "melvorItA:PestilentEmbrace",
            "melvorItA:MindmeldHeal",
            "melvorItA:PestilentEmbraceRegen",
            "melvorItA:BlightBarrier",
            "melvorItA:ShadowTrick",
            "melvorItA:ShadowAttack",
            "melvorItA:DreadPursuit",
            "melvorItA:Fearmonger",
            "melvorItA:WitheredGuard",
            "melvorItA:DecayingBlasts",
            "melvorItA:SwoopingAssault",
            "melvorItA:BlindingBurst",
            "melvorItA:WitheringEngulf",
            "melvorItA:CatacombTunneler",
            "melvorItA:BoneWall",
            "melvorItA:MurmuringAmbush",
            "melvorItA:ShadowBlend",
            "melvorItA:SilentScuttle",
            "melvorItA:TortoiseShell",
            "melvorItA:ShatteringScreech",
            "melvorItA:DisappearingAttacks",
            "melvorItA:Echolocation",
            "melvorItA:LeechingGrab",
            "melvorItA:MireMirage",
            "melvorItA:BoneToss",
            "melvorItA:FloatingTarget",
            "melvorItA:BlindingPupil",
            "melvorItA:SilentTangle",
            "melvorItA:DampenField",
            "melvorItA:SeaOfWhispers",
            "melvorItA:SilentSlice",
            "melvorItA:DisorientingWhispers",
            "melvorItA:SilentAgony0",
            "melvorItA:SilentAgony1",
            "melvorItA:RavenousHunger",
            "melvorItA:PhantomShift",
            "melvorItA:EldritchMarker",
            "melvorItA:EldritchStalker",
            "melvorItA:EldritchHunter",
            "melvorItA:Mindmeld",
            "melvorItA:Possession",
            "melvorItA:HollowNightmare",
            "melvorItA:HollowDoom",
            "melvorItA:NightmareVision",
            "melvorItA:MindMaze",
            "melvorItA:TendrilNightmareBuff",
            "melvorItA:TendrilNightmareRegen",
            "melvorItA:PhaseShiftingProjectiles",
            "melvorItA:CreepingDarkness",
            "melvorItA:VoidTraveler",
            "melvorItA:VoidsEmbrace",
            "melvorItA:GazeIntoTheVoid",
            "melvorItA:Sovereignty",
            "melvorItA:WrathOfTheRealm",
            "melvorItA:AbyssalBarrage",
            "melvorItA:KingsRage",
            "melvorItA:FracturedBeastShield",
            "melvorItA:VoidShamblerCape",
            "melvorItA:TortoiseShellPlatebody",
            "melvorItA:EchoingRing",
            "melvorItA:EchoWalkerBoots",
            "melvorItA:EchoDrifterCape",
            "melvorItA:EchoingAmulet",
            "melvorItA:WrathObelisk",
            "melvorItA:EyeballYakSynergyPlayer",
            "melvorItA:EyeballYakSynergyEnemy",
            "melvorItA:WoefulGloves",
            "melvorItA:WoefulGem",
            "melvorItA:WoefulPlatebody",
            "melvorItA:FearGem",
            "melvorItA:BlazingShadow",
            "melvorItA:MalevolentBlight",
            "melvorItA:SilencingGemstone",
            "melvorItA:VoidGem",
            "melvorItA:ObsidianVoidheartRingI",
            "melvorItA:ObsidianVoidheartRingII",
            "melvorItA:ObzurianUnnaturalVitalityRing",
            "melvorItA:ObsidianShadowpearlAmuletI",
            "melvorItA:ObsidianMoonstoneAmuletI",
            "melvorItA:ObsidianShadowpearlAmuletII",
            "melvorItA:ObsidianMoonstoneAmuletII",
            "melvorItA:ObzurianRampantPowerAmuletPlayer",
            "melvorItA:ObzurianRampantPowerAmuletEnemy",
            "melvorItA:ObzurianUnbreakableDefenderAmulet",
            "melvorItA:AzurianVoidheartAmuletI",
            "melvorItA:AzurianVoidheartAmuletII",
            "melvorItA:ChargeRay",
            "melvorItA:Madness",
            "melvorItA:ConsumingGrasp",
            "melvorItA:VoidfireVolley",
            "melvorItA:BlackHole",
            "melvorItA:NullSphere",
            "melvorItA:InfiniteVoid",
            "melvorItA:Confusion4",
            "melvorItA:SwiftBlightSlashes0",
            "melvorItA:DualLashes0",
            "melvorItA:AbyssalAttackMasterRelic",
            "melvorItA:AbyssalDefenceMasterRelic"
          ]
        }
      ]
    },
    "CombatEffectTableID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:RandomCurse",
            "melvorF:ElementalEffect",
            "melvorF:NaturesCall0",
            "melvorF:NaturesWrath0"
          ]
        }
      ]
    },
    "SlayerTaskCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Easy",
            "melvorF:Normal",
            "melvorF:Hard",
            "melvorF:Elite",
            "melvorF:Master",
            "melvorTotH:Legendary",
            "melvorTotH:Mythical",
            "melvorItA:Woe",
            "melvorItA:Decay",
            "melvorItA:Fear",
            "melvorItA:Ruin",
            "melvorItA:Isolation",
            "melvorItA:Dissolution",
            "melvorItA:Resolution"
          ]
        }
      ]
    },
    "EquipmentSlotID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "Helmet",
            "Platebody",
            "Platelegs",
            "Boots",
            "Weapon",
            "Shield",
            "Amulet",
            "Ring",
            "Gloves",
            "Quiver",
            "Cape",
            "Passive",
            "Summon1",
            "Summon2",
            "Consumable",
            "Gem",
            "Enhancement1",
            "Enhancement2",
            "Enhancement3",
            "melvorD:Helmet",
            "melvorD:Platebody",
            "melvorD:Platelegs",
            "melvorD:Boots",
            "melvorD:Weapon",
            "melvorD:Shield",
            "melvorD:Amulet",
            "melvorD:Ring",
            "melvorD:Gloves",
            "melvorD:Quiver",
            "melvorD:Cape",
            "melvorD:Passive",
            "melvorD:Summon1",
            "melvorD:Summon2",
            "melvorD:Consumable",
            "melvorD:Gem",
            "melvorD:Enhancement1",
            "melvorD:Enhancement2",
            "melvorD:Enhancement3"
          ]
        }
      ]
    },
    "EnemyModifierID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "accuracyRating",
            "melvorD:accuracyRating",
            "meleeAccuracyRating",
            "melvorD:meleeAccuracyRating",
            "rangedAccuracyRating",
            "melvorD:rangedAccuracyRating",
            "magicAccuracyRating",
            "melvorD:magicAccuracyRating",
            "meleeMaxHit",
            "melvorD:meleeMaxHit",
            "rangedMaxHit",
            "melvorD:rangedMaxHit",
            "magicMaxHit",
            "melvorD:magicMaxHit",
            "evasion",
            "melvorD:evasion",
            "meleeEvasion",
            "melvorD:meleeEvasion",
            "rangedEvasion",
            "melvorD:rangedEvasion",
            "magicEvasion",
            "melvorD:magicEvasion",
            "flatMaxHit",
            "melvorD:flatMaxHit",
            "maxHit",
            "melvorD:maxHit",
            "flatHPRegen",
            "melvorD:flatHPRegen",
            "flatAttackInterval",
            "melvorD:flatAttackInterval",
            "attackInterval",
            "melvorD:attackInterval",
            "maxHitpoints",
            "melvorD:maxHitpoints",
            "flatMaxHitpoints",
            "melvorD:flatMaxHitpoints",
            "reflectDamage",
            "melvorD:reflectDamage",
            "hitpointRegeneration",
            "melvorD:hitpointRegeneration",
            "minHitBasedOnMaxHit",
            "melvorD:minHitBasedOnMaxHit",
            "attackRolls",
            "melvorD:attackRolls",
            "dragonBreathDamage",
            "melvorD:dragonBreathDamage",
            "flatReflectDamage",
            "melvorD:flatReflectDamage",
            "rolledReflectDamage",
            "melvorD:rolledReflectDamage",
            "flatMinHit",
            "melvorD:flatMinHit",
            "flatMagicMinHit",
            "melvorD:flatMagicMinHit",
            "currentHPDamageTakenOnAttack",
            "melvorD:currentHPDamageTakenOnAttack",
            "maxHPDamageTakenOnAttack",
            "melvorD:maxHPDamageTakenOnAttack",
            "damageTaken",
            "melvorD:damageTaken",
            "damageDealt",
            "melvorD:damageDealt",
            "lifesteal",
            "melvorD:lifesteal",
            "meleeLifesteal",
            "melvorD:meleeLifesteal",
            "rangedLifesteal",
            "melvorD:rangedLifesteal",
            "magicLifesteal",
            "melvorD:magicLifesteal",
            "bleedLifesteal",
            "melvorD:bleedLifesteal",
            "burnLifesteal",
            "melvorD:burnLifesteal",
            "poisonLifesteal",
            "melvorD:poisonLifesteal",
            "meleeCritChance",
            "melvorD:meleeCritChance",
            "rangedCritChance",
            "melvorD:rangedCritChance",
            "magicCritChance",
            "melvorD:magicCritChance",
            "meleeProtection",
            "melvorD:meleeProtection",
            "rangedProtection",
            "melvorD:rangedProtection",
            "magicProtection",
            "melvorD:magicProtection",
            "effectImmunity",
            "melvorD:effectImmunity",
            "effectIgnoreChance",
            "melvorD:effectIgnoreChance",
            "sleepImmunity",
            "melvorD:sleepImmunity",
            "rebirthChance",
            "melvorD:rebirthChance",
            "summoningMaxHit",
            "melvorD:summoningMaxHit",
            "otherStyleImmunity",
            "melvorD:otherStyleImmunity",
            "meleeImmunity",
            "melvorD:meleeImmunity",
            "rangedImmunity",
            "melvorD:rangedImmunity",
            "magicImmunity",
            "melvorD:magicImmunity",
            "flatTotalBleedDamage",
            "melvorD:flatTotalBleedDamage",
            "stunDurationIncreaseChance",
            "melvorD:stunDurationIncreaseChance",
            "flatRegenerationInterval",
            "melvorD:flatRegenerationInterval",
            "onHitSlowMagnitude",
            "melvorD:onHitSlowMagnitude",
            "globalEvasionHPScaling",
            "melvorD:globalEvasionHPScaling",
            "flatPrayerPointsWhenHit",
            "melvorD:flatPrayerPointsWhenHit",
            "flatMeleeAccuracyBonusPerAttackInterval",
            "melvorD:flatMeleeAccuracyBonusPerAttackInterval",
            "flatMeleeStrengthBonusPerAttackInterval",
            "melvorD:flatMeleeStrengthBonusPerAttackInterval",
            "flatRangedAccuracyBonusPerAttackInterval",
            "melvorD:flatRangedAccuracyBonusPerAttackInterval",
            "flatRangedStrengthBonusPerAttackInterval",
            "melvorD:flatRangedStrengthBonusPerAttackInterval",
            "flatMagicAccuracyBonusPerAttackInterval",
            "melvorD:flatMagicAccuracyBonusPerAttackInterval",
            "meleeMaxHitAgainstRanged",
            "melvorD:meleeMaxHitAgainstRanged",
            "rangedMaxHitAgainstMagic",
            "melvorD:rangedMaxHitAgainstMagic",
            "magicMaxHitAgainstMelee",
            "melvorD:magicMaxHitAgainstMelee",
            "damageTakenAddedAsPrayerPoints",
            "melvorD:damageTakenAddedAsPrayerPoints",
            "accuracyRatingHPScaling",
            "melvorD:accuracyRatingHPScaling",
            "sleepDurationIncreaseChance",
            "melvorD:sleepDurationIncreaseChance",
            "stunAvoidChance",
            "melvorD:stunAvoidChance",
            "healWhenStunned",
            "melvorD:healWhenStunned",
            "healWhenSlept",
            "melvorD:healWhenSlept",
            "damageTakenPerAttack",
            "melvorD:damageTakenPerAttack",
            "frostburnDamage",
            "melvorD:frostburnDamage",
            "flatMeleeMaxHit",
            "melvorD:flatMeleeMaxHit",
            "flatRangedMaxHit",
            "melvorD:flatRangedMaxHit",
            "flatMagicMaxHit",
            "melvorD:flatMagicMaxHit",
            "curseLifesteal",
            "melvorD:curseLifesteal",
            "lifestealBasedOnHPRegenEffectiveness",
            "melvorD:lifestealBasedOnHPRegenEffectiveness",
            "disableHPRegeneration",
            "melvorD:disableHPRegeneration",
            "flatMinMeteorShowerSpellDamage",
            "melvorD:flatMinMeteorShowerSpellDamage",
            "endOfTurnEvasion2",
            "melvorD:endOfTurnEvasion2",
            "decreaseEnemyEvasionOnStun",
            "melvorD:decreaseEnemyEvasionOnStun",
            "decreaseEnemyEvasionOnSleep",
            "melvorD:decreaseEnemyEvasionOnSleep",
            "doubleLifesteal",
            "melvorD:doubleLifesteal",
            "maxHPBurnDamage",
            "melvorD:maxHPBurnDamage",
            "disableLifesteal",
            "melvorD:disableLifesteal",
            "burnDOTDamageTaken",
            "melvorD:burnDOTDamageTaken",
            "bleedDOTDamageTaken",
            "melvorD:bleedDOTDamageTaken",
            "poisonDOTDamageTaken",
            "melvorD:poisonDOTDamageTaken",
            "deadlyPoisonDOTDamageTaken",
            "melvorD:deadlyPoisonDOTDamageTaken",
            "evasionAgainstMelee",
            "melvorD:evasionAgainstMelee",
            "evasionAgainstRanged",
            "melvorD:evasionAgainstRanged",
            "evasionAgainstMagic",
            "melvorD:evasionAgainstMagic",
            "meleeAccuracyMaxHitPer8Strength",
            "melvorD:meleeAccuracyMaxHitPer8Strength",
            "magicMaxHitWithActivePrayer",
            "melvorD:magicMaxHitWithActivePrayer",
            "rangedStrengthBonusPer8Ranged",
            "melvorD:rangedStrengthBonusPer8Ranged",
            "flatBarrierSummonDamage",
            "melvorD:flatBarrierSummonDamage",
            "barrierSummonDamage",
            "melvorD:barrierSummonDamage",
            "flatBarrierSummonDamageMelee",
            "melvorD:flatBarrierSummonDamageMelee",
            "flatBarrierSummonDamageRanged",
            "melvorD:flatBarrierSummonDamageRanged",
            "flatBarrierSummonDamageMagic",
            "melvorD:flatBarrierSummonDamageMagic",
            "barrierSummonDamageIfSlayerTask",
            "melvorD:barrierSummonDamageIfSlayerTask",
            "disableAttackDamage",
            "melvorD:disableAttackDamage",
            "cleansed",
            "melvorD:cleansed",
            "maxHitBasedOnTargetCurrentHitpoints",
            "melvorD:maxHitBasedOnTargetCurrentHitpoints",
            "prayerPointPreservationChancePerPoint",
            "melvorD:prayerPointPreservationChancePerPoint",
            "maxHitBasedOnPrayerCost",
            "melvorD:maxHitBasedOnPrayerCost",
            "flatPrayerPointsPerMonsterKill",
            "melvorD:flatPrayerPointsPerMonsterKill",
            "selfDamageOnHitBasedOnCurrentHitpoints",
            "melvorD:selfDamageOnHitBasedOnCurrentHitpoints",
            "noCombatDropChance",
            "melvorD:noCombatDropChance",
            "meleeAttackInterval",
            "melvorD:meleeAttackInterval",
            "rangedAttackInterval",
            "melvorD:rangedAttackInterval",
            "magicAttackInterval",
            "melvorD:magicAttackInterval",
            "dodgeChance",
            "melvorD:dodgeChance",
            "convertMissIntoHit",
            "melvorD:convertMissIntoHit",
            "bypassAmmoPreservationChance",
            "melvorD:bypassAmmoPreservationChance",
            "bypassRunePreservationChance",
            "melvorD:bypassRunePreservationChance",
            "halveAttackInterval",
            "melvorD:halveAttackInterval",
            "lifestealDamageBasedOnCurrentHitpoints",
            "melvorD:lifestealDamageBasedOnCurrentHitpoints",
            "damageBasedOnCurrentHitpoints",
            "melvorD:damageBasedOnCurrentHitpoints",
            "damageBasedOnMaxHitpoints",
            "melvorD:damageBasedOnMaxHitpoints",
            "healingWhenHit",
            "melvorD:healingWhenHit",
            "damageDealtWith2Effects",
            "melvorD:damageDealtWith2Effects",
            "unholyMarkOnHit",
            "melvorD:unholyMarkOnHit",
            "damageTakenBasedOnHP",
            "melvorD:damageTakenBasedOnHP",
            "curseOnHitWithUnholyMark",
            "melvorD:curseOnHitWithUnholyMark",
            "flatBarrierDamage",
            "melvorD:flatBarrierDamage",
            "damageDealtPerEffect",
            "melvorD:damageDealtPerEffect",
            "regenPerDamageTaken",
            "melvorD:regenPerDamageTaken",
            "summoningAttackInterval",
            "melvorD:summoningAttackInterval",
            "flatSummoningAttackInterval",
            "melvorD:flatSummoningAttackInterval",
            "cantAttack",
            "melvorD:cantAttack",
            "cantEvade",
            "melvorD:cantEvade",
            "cantRegenBarrier",
            "melvorD:cantRegenBarrier",
            "critChance",
            "melvorD:critChance",
            "cantSpecialAttack",
            "melvorD:cantSpecialAttack",
            "lacerationLifesteal",
            "melvorD:lacerationLifesteal",
            "damageTakenPerMissedAttack",
            "melvorD:damageTakenPerMissedAttack",
            "flatAbyssalSlayerAreaEffectNegation",
            "melvorD:flatAbyssalSlayerAreaEffectNegation",
            "cantMiss",
            "melvorD:cantMiss",
            "rawReflectDamage",
            "melvorD:rawReflectDamage",
            "evasionBasedOnCorruptionLevel",
            "melvorD:evasionBasedOnCorruptionLevel",
            "ablazeDOTDamageTakenIfCorrupted",
            "melvorD:ablazeDOTDamageTakenIfCorrupted",
            "dotDamageTaken",
            "melvorD:dotDamageTaken",
            "bonusCorruptionChance",
            "melvorD:bonusCorruptionChance",
            "extraCorruptions",
            "melvorD:extraCorruptions",
            "corruptionCounterRate",
            "melvorD:corruptionCounterRate",
            "critMultiplier",
            "melvorD:critMultiplier",
            "damageBasedOnMaxHitpointsSelf",
            "melvorD:damageBasedOnMaxHitpointsSelf",
            "toxinDOTDamageTaken",
            "melvorD:toxinDOTDamageTaken",
            "ablazeDOTDamageTaken",
            "melvorD:ablazeDOTDamageTaken",
            "ablazeLifesteal",
            "melvorD:ablazeLifesteal",
            "toxinLifesteal",
            "melvorD:toxinLifesteal",
            "meleeMinHitBasedOnMaxHit",
            "melvorD:meleeMinHitBasedOnMaxHit",
            "rangedMinHitBasedOnMaxHit",
            "melvorD:rangedMinHitBasedOnMaxHit",
            "magicMinHitBasedOnMaxHit",
            "melvorD:magicMinHitBasedOnMaxHit",
            "lacerationDOTDamageTaken",
            "melvorD:lacerationDOTDamageTaken",
            "voidburstDOTDamageTaken",
            "melvorD:voidburstDOTDamageTaken",
            "instantCorruptionChance",
            "melvorD:instantCorruptionChance",
            "extraLacerationStackChance",
            "melvorD:extraLacerationStackChance",
            "flatResistance",
            "melvorD:flatResistance",
            "flatResistanceAgainstMelee",
            "melvorD:flatResistanceAgainstMelee",
            "flatResistanceAgainstRanged",
            "melvorD:flatResistanceAgainstRanged",
            "flatResistanceAgainstMagic",
            "melvorD:flatResistanceAgainstMagic",
            "resistance",
            "melvorD:resistance",
            "halveResistance",
            "melvorD:halveResistance",
            "maxHitBasedOnResistance",
            "melvorD:maxHitBasedOnResistance",
            "maxHitBasedOnTargetResistance",
            "melvorD:maxHitBasedOnTargetResistance",
            "evasionBasedOnResistance",
            "melvorD:evasionBasedOnResistance",
            "ignoreResistanceWhenAttackingChance",
            "melvorD:ignoreResistanceWhenAttackingChance",
            "maxHitAgainstDamageType",
            "melvorD:maxHitAgainstDamageType",
            "accuracyRatingAgainstDamageType",
            "melvorD:accuracyRatingAgainstDamageType",
            "evasionAgainstDamageType",
            "melvorD:evasionAgainstDamageType",
            "maxHitpointsAgainstDamageType",
            "melvorD:maxHitpointsAgainstDamageType",
            "flatSlayerAreaEffectNegation",
            "melvorD:flatSlayerAreaEffectNegation"
          ]
        }
      ]
    },
    "ModifierID": {
      "anyOf": [
        {
          "$ref": "#/$defs/EnemyModifierID"
        },
        {
          "type": "string",
          "enum": [
            "doubleSlayerTaskKillChance",
            "melvorD:doubleSlayerTaskKillChance",
            "convertBoneDropsIntoCake",
            "melvorD:convertBoneDropsIntoCake",
            "combatLootDoublingChance",
            "melvorD:combatLootDoublingChance",
            "damageDealtToBosses",
            "melvorD:damageDealtToBosses",
            "damageDealtToSlayerTasks",
            "melvorD:damageDealtToSlayerTasks",
            "damageDealtToMonstersInArea",
            "melvorD:damageDealtToMonstersInArea",
            "damageDealtToAllMonsters",
            "melvorD:damageDealtToAllMonsters",
            "autoEatEfficiency",
            "melvorD:autoEatEfficiency",
            "autoEatThreshold",
            "melvorD:autoEatThreshold",
            "autoEatHPLimit",
            "melvorD:autoEatHPLimit",
            "foodHealingValue",
            "melvorD:foodHealingValue",
            "prayerPointPreservationChance",
            "melvorD:prayerPointPreservationChance",
            "flatPrayerPointCost",
            "melvorD:flatPrayerPointCost",
            "ammoPreservationChance",
            "melvorD:ammoPreservationChance",
            "runePreservationChance",
            "melvorD:runePreservationChance",
            "flatMonsterRespawnInterval",
            "melvorD:flatMonsterRespawnInterval",
            "bankSpace",
            "melvorD:bankSpace",
            "potionChargePreservationChance",
            "melvorD:potionChargePreservationChance",
            "masteryXP",
            "melvorD:masteryXP",
            "skillXP",
            "melvorD:skillXP",
            "flatMiningNodeHP",
            "melvorD:flatMiningNodeHP",
            "dungeonEquipmentSwapping",
            "melvorD:dungeonEquipmentSwapping",
            "strongholdEquipmentSwapping",
            "melvorD:strongholdEquipmentSwapping",
            "equipmentSets",
            "melvorD:equipmentSets",
            "autoSlayerUnlocked",
            "melvorD:autoSlayerUnlocked",
            "treeCutLimit",
            "melvorD:treeCutLimit",
            "skillPreservationChance",
            "melvorD:skillPreservationChance",
            "slayerTaskLength",
            "melvorD:slayerTaskLength",
            "globalItemDoublingChance",
            "melvorD:globalItemDoublingChance",
            "golbinRaidWaveSkipCost",
            "melvorD:golbinRaidWaveSkipCost",
            "golbinRaidMaximumAmmo",
            "melvorD:golbinRaidMaximumAmmo",
            "golbinRaidMaximumRunes",
            "melvorD:golbinRaidMaximumRunes",
            "golbinRaidMinimumFood",
            "melvorD:golbinRaidMinimumFood",
            "golbinRaidPrayerLevel",
            "melvorD:golbinRaidPrayerLevel",
            "golbinRaidStartingPrayerPoints",
            "melvorD:golbinRaidStartingPrayerPoints",
            "golbinRaidPrayerPointsPerWave",
            "melvorD:golbinRaidPrayerPointsPerWave",
            "golbinRaidStartingRuneCount",
            "melvorD:golbinRaidStartingRuneCount",
            "golbinRaidPassiveSlotUnlocked",
            "melvorD:golbinRaidPassiveSlotUnlocked",
            "golbinRaidPrayerUnlocked",
            "melvorD:golbinRaidPrayerUnlocked",
            "golbinRaidStartingWeapon",
            "melvorD:golbinRaidStartingWeapon",
            "flatPotionCharges",
            "melvorD:flatPotionCharges",
            "potionCharges",
            "melvorD:potionCharges",
            "noMiningNodeDamageChance",
            "melvorD:noMiningNodeDamageChance",
            "elementalRuneChance",
            "melvorD:elementalRuneChance",
            "elementalRuneQuantity",
            "melvorD:elementalRuneQuantity",
            "randomHerblorePotionChance",
            "melvorD:randomHerblorePotionChance",
            "freeBonfires",
            "melvorD:freeBonfires",
            "altMagicSkillXP",
            "melvorD:altMagicSkillXP",
            "seedDropConversionChance",
            "melvorD:seedDropConversionChance",
            "flatMagicDefenceBonus",
            "melvorD:flatMagicDefenceBonus",
            "hpRegenWhenEnemyHasMoreEvasion",
            "melvorD:hpRegenWhenEnemyHasMoreEvasion",
            "summoningAttackLifesteal",
            "melvorD:summoningAttackLifesteal",
            "bonusFishingSpecialChance",
            "melvorD:bonusFishingSpecialChance",
            "summoningSynergy_Ent_Leprechaun",
            "melvorD:summoningSynergy_Ent_Leprechaun",
            "woodcuttingJewelryChance",
            "melvorD:woodcuttingJewelryChance",
            "summoningSynergy_4_5",
            "melvorD:summoningSynergy_4_5",
            "cookingSuccessCap",
            "melvorD:cookingSuccessCap",
            "miningBarChance",
            "melvorD:miningBarChance",
            "fishingCookedChance",
            "melvorD:fishingCookedChance",
            "summoningSynergy_Octopus_Leprechaun",
            "melvorD:summoningSynergy_Octopus_Leprechaun",
            "magicMinHitBasedOnMaxHitSlayerTask",
            "melvorD:magicMinHitBasedOnMaxHitSlayerTask",
            "meleeMinHitBasedOnMaxHitSlayerTask",
            "melvorD:meleeMinHitBasedOnMaxHitSlayerTask",
            "flatHPRegenBasedOnMeleeMaxHit",
            "melvorD:flatHPRegenBasedOnMeleeMaxHit",
            "rangedMinHitBasedOnMaxHitSlayerTask",
            "melvorD:rangedMinHitBasedOnMaxHitSlayerTask",
            "flatHPRegenBasedOnRangedMaxHit",
            "melvorD:flatHPRegenBasedOnRangedMaxHit",
            "slayerCoinsPerMagicDamageSlayerTask",
            "melvorD:slayerCoinsPerMagicDamageSlayerTask",
            "flatHPRegenBasedOnMagicMaxHit",
            "melvorD:flatHPRegenBasedOnMagicMaxHit",
            "flatCraftingDragonhideCost",
            "melvorD:flatCraftingDragonhideCost",
            "giveRandomComboRunesRunecrafting",
            "melvorD:giveRandomComboRunesRunecrafting",
            "thievingAutoSellPrice",
            "melvorD:thievingAutoSellPrice",
            "thievingMinerRandomBarChance",
            "melvorD:thievingMinerRandomBarChance",
            "thievingFarmerHerbSackChance",
            "melvorD:thievingFarmerHerbSackChance",
            "summoningSynergy_Leprechaun_Devil",
            "melvorD:summoningSynergy_Leprechaun_Devil",
            "hitpointRegenerationAgainstSlayerTasks",
            "melvorD:hitpointRegenerationAgainstSlayerTasks",
            "flatSmithingCoalCost",
            "melvorD:flatSmithingCoalCost",
            "removeSmithingCoalCosts",
            "melvorD:removeSmithingCoalCosts",
            "meleeStrengthBonus",
            "melvorD:meleeStrengthBonus",
            "rangedStrengthBonus",
            "melvorD:rangedStrengthBonus",
            "magicDamageBonus",
            "melvorD:magicDamageBonus",
            "agilityObstacleCost",
            "melvorD:agilityObstacleCost",
            "freeCompost",
            "melvorD:freeCompost",
            "compostPreservationChance",
            "melvorD:compostPreservationChance",
            "bypassCompostPreservationChance",
            "melvorD:bypassCompostPreservationChance",
            "offItemChance",
            "melvorD:offItemChance",
            "miningGemChance",
            "melvorD:miningGemChance",
            "bonusCoalMining",
            "melvorD:bonusCoalMining",
            "smithingCoalCost",
            "melvorD:smithingCoalCost",
            "allowSignetDrops",
            "melvorD:allowSignetDrops",
            "bonusCoalOnDungeonCompletion",
            "melvorD:bonusCoalOnDungeonCompletion",
            "masteryPoolProgress",
            "melvorD:masteryPoolProgress",
            "doubleRuneProvision",
            "melvorD:doubleRuneProvision",
            "bypassSlayerItems",
            "melvorD:bypassSlayerItems",
            "itemProtection",
            "melvorD:itemProtection",
            "redemptionThreshold",
            "melvorD:redemptionThreshold",
            "redemptionHealing",
            "melvorD:redemptionHealing",
            "autoLooting",
            "melvorD:autoLooting",
            "autoBurying",
            "melvorD:autoBurying",
            "freeProtectItem",
            "melvorD:freeProtectItem",
            "flatSummoningShardCost",
            "melvorD:flatSummoningShardCost",
            "summoningChargePreservationChance",
            "melvorD:summoningChargePreservationChance",
            "summoningChargePreservationChanceBypass",
            "melvorD:summoningChargePreservationChanceBypass",
            "prayerPointCost",
            "melvorD:prayerPointCost",
            "allowAttackAugmentingMagic",
            "melvorD:allowAttackAugmentingMagic",
            "autoEquipFoodUnlocked",
            "melvorD:autoEquipFoodUnlocked",
            "autoSwapFoodUnlocked",
            "melvorD:autoSwapFoodUnlocked",
            "successfulCookChance",
            "melvorD:successfulCookChance",
            "perfectCookChance",
            "melvorD:perfectCookChance",
            "thievingStealth",
            "melvorD:thievingStealth",
            "altMagicRunePreservationChance",
            "melvorD:altMagicRunePreservationChance",
            "fishingSpecialChance",
            "melvorD:fishingSpecialChance",
            "farmingSeedCost",
            "melvorD:farmingSeedCost",
            "flatFarmingSeedCost",
            "melvorD:flatFarmingSeedCost",
            "foodPreservationChance",
            "melvorD:foodPreservationChance",
            "allowLootContainerStacking",
            "melvorD:allowLootContainerStacking",
            "woodcuttingXPAddedAsFiremakingXP",
            "melvorD:woodcuttingXPAddedAsFiremakingXP",
            "flatCoalGainedOnCookingFailure",
            "melvorD:flatCoalGainedOnCookingFailure",
            "flatAbyssalGemsGainedOnCookingFailure",
            "melvorD:flatAbyssalGemsGainedOnCookingFailure",
            "halveWoodcuttingDoubleChance",
            "melvorD:halveWoodcuttingDoubleChance",
            "qualitySuperiorGemChance",
            "melvorD:qualitySuperiorGemChance",
            "doubleBoneDrops",
            "melvorD:doubleBoneDrops",
            "summoningSynergy_Devil_Eagle",
            "melvorD:summoningSynergy_Devil_Eagle",
            "xpFromNegativeObstacles",
            "melvorD:xpFromNegativeObstacles",
            "masteryXPFromNegativeObstacles",
            "melvorD:masteryXPFromNegativeObstacles",
            "thievingStunInterval",
            "melvorD:thievingStunInterval",
            "skillInterval",
            "melvorD:skillInterval",
            "woodcuttingArrowShaftChance",
            "melvorD:woodcuttingArrowShaftChance",
            "passiveCookingInterval",
            "melvorD:passiveCookingInterval",
            "disableGoldenStardustDrops",
            "melvorD:disableGoldenStardustDrops",
            "gpFromItemAlchemy",
            "melvorD:gpFromItemAlchemy",
            "thievingAreaUniqueChance",
            "melvorD:thievingAreaUniqueChance",
            "meteoriteLocationChance",
            "melvorD:meteoriteLocationChance",
            "thievingStunAvoidanceChance",
            "melvorD:thievingStunAvoidanceChance",
            "additionalPerfectItemChance",
            "melvorD:additionalPerfectItemChance",
            "additionalItemBasedOnPrimaryQuantityChance",
            "melvorD:additionalItemBasedOnPrimaryQuantityChance",
            "flatTownshipPopulation",
            "melvorD:flatTownshipPopulation",
            "flatTownshipHappiness",
            "melvorD:flatTownshipHappiness",
            "flatTownshipEducation",
            "melvorD:flatTownshipEducation",
            "townshipHealth",
            "melvorD:townshipHealth",
            "townshipGPProduction",
            "melvorD:townshipGPProduction",
            "townshipMaxStorage",
            "melvorD:townshipMaxStorage",
            "townshipBuildingCost",
            "melvorD:townshipBuildingCost",
            "townshipBuildingProduction",
            "melvorD:townshipBuildingProduction",
            "townshipTaxPerCitizen",
            "melvorD:townshipTaxPerCitizen",
            "townshipDisableHunting",
            "melvorD:townshipDisableHunting",
            "townshipResourceProduction",
            "melvorD:townshipResourceProduction",
            "townshipCoalUsage",
            "melvorD:townshipCoalUsage",
            "townshipBuildingHappinessPenalties",
            "melvorD:townshipBuildingHappinessPenalties",
            "townshipFoodUsage",
            "melvorD:townshipFoodUsage",
            "consumablePreservationChance",
            "melvorD:consumablePreservationChance",
            "gemVeinChance",
            "melvorD:gemVeinChance",
            "abyssalGemVeinChanceIncrease",
            "melvorD:abyssalGemVeinChanceIncrease",
            "agilityPillarCost",
            "melvorD:agilityPillarCost",
            "abyssalWaveAPGain",
            "melvorD:abyssalWaveAPGain",
            "abyssalWaveASCGain",
            "melvorD:abyssalWaveASCGain",
            "nonCombatSkillXP",
            "melvorD:nonCombatSkillXP",
            "flatMeleeDefenceBonus",
            "melvorD:flatMeleeDefenceBonus",
            "flatRangedDefenceBonus",
            "melvorD:flatRangedDefenceBonus",
            "flatStabAttackBonus",
            "melvorD:flatStabAttackBonus",
            "flatSlashAttackBonus",
            "melvorD:flatSlashAttackBonus",
            "flatBlockAttackBonus",
            "melvorD:flatBlockAttackBonus",
            "flatRangedAttackBonus",
            "melvorD:flatRangedAttackBonus",
            "flatMagicAttackBonus",
            "melvorD:flatMagicAttackBonus",
            "flatMeleeStrengthBonus",
            "melvorD:flatMeleeStrengthBonus",
            "flatRangedStrengthBonus",
            "melvorD:flatRangedStrengthBonus",
            "disableSalamanderItemReduction",
            "melvorD:disableSalamanderItemReduction",
            "masteryPoolCap",
            "melvorD:masteryPoolCap",
            "bypassAllSlayerItems",
            "melvorD:bypassAllSlayerItems",
            "allowNonMagicCurses",
            "melvorD:allowNonMagicCurses",
            "townshipTraderStock",
            "melvorD:townshipTraderStock",
            "cartographySightRange",
            "melvorD:cartographySightRange",
            "cartographySurveyRange",
            "melvorD:cartographySurveyRange",
            "cartographyTravelCost",
            "melvorD:cartographyTravelCost",
            "cartographySurveyInterval",
            "melvorD:cartographySurveyInterval",
            "cartographyPaperMakingInterval",
            "melvorD:cartographyPaperMakingInterval",
            "cartographyMapUpgradeInterval",
            "melvorD:cartographyMapUpgradeInterval",
            "cartographySurveyXP",
            "melvorD:cartographySurveyXP",
            "mapUpgradeActions",
            "melvorD:mapUpgradeActions",
            "initialMapArtefactValues",
            "melvorD:initialMapArtefactValues",
            "sieveToolLevel",
            "melvorD:sieveToolLevel",
            "trowelToolLevel",
            "melvorD:trowelToolLevel",
            "brushToolLevel",
            "melvorD:brushToolLevel",
            "shovelToolLevel",
            "melvorD:shovelToolLevel",
            "ancientRelicLocationChance",
            "melvorD:ancientRelicLocationChance",
            "flatAdditionalHolyDustFromBlessedOffering",
            "melvorD:flatAdditionalHolyDustFromBlessedOffering",
            "flatPrayerPointsFromBurying",
            "melvorD:flatPrayerPointsFromBurying",
            "additionalSameAreaFishChance",
            "melvorD:additionalSameAreaFishChance",
            "skillPetLocationChance",
            "melvorD:skillPetLocationChance",
            "prayerPointsFromBurying",
            "melvorD:prayerPointsFromBurying",
            "ignoreThievingDamage",
            "melvorD:ignoreThievingDamage",
            "xpFromMasteryTokens",
            "melvorD:xpFromMasteryTokens",
            "craftingEnchantedUrnChance",
            "melvorD:craftingEnchantedUrnChance",
            "halveSkillInterval",
            "melvorD:halveSkillInterval",
            "halveSkillXP",
            "melvorD:halveSkillXP",
            "halveMasteryXP",
            "melvorD:halveMasteryXP",
            "flatMasteryTokens",
            "melvorD:flatMasteryTokens",
            "townshipRepairCost",
            "melvorD:townshipRepairCost",
            "townshipTraderCost",
            "melvorD:townshipTraderCost",
            "enableNightfallSeason",
            "melvorD:enableNightfallSeason",
            "enableSolarEclipseSeason",
            "melvorD:enableSolarEclipseSeason",
            "enableEternalDarknessSeason",
            "melvorD:enableEternalDarknessSeason",
            "allowUnholyPrayerUse",
            "melvorD:allowUnholyPrayerUse",
            "unholyPrayerPointPreservationChance",
            "melvorD:unholyPrayerPointPreservationChance",
            "disableTownshipHealthDegradation",
            "melvorD:disableTownshipHealthDegradation",
            "minimumTownshipBuildingEfficiency",
            "melvorD:minimumTownshipBuildingEfficiency",
            "enableLemonSeason",
            "melvorD:enableLemonSeason",
            "bypassGlobalPreservationChance",
            "melvorD:bypassGlobalPreservationChance",
            "unlockAllSummoningSynergies",
            "melvorD:unlockAllSummoningSynergies",
            "agilityItemCostReductionCanReach100",
            "melvorD:agilityItemCostReductionCanReach100",
            "agilityObstacleItemCost",
            "melvorD:agilityObstacleItemCost",
            "removeDebuffsFromAgility",
            "melvorD:removeDebuffsFromAgility",
            "harvestingUniqueProductChance",
            "melvorD:harvestingUniqueProductChance",
            "doubleModifiersInAstrologyForMaxedConstellations",
            "melvorD:doubleModifiersInAstrologyForMaxedConstellations",
            "mapRefinementCost",
            "melvorD:mapRefinementCost",
            "travelEventChance",
            "melvorD:travelEventChance",
            "tinyArtefactChance",
            "melvorD:tinyArtefactChance",
            "smallArtefactChance",
            "melvorD:smallArtefactChance",
            "mediumArtefactChance",
            "melvorD:mediumArtefactChance",
            "largeArtefactChance",
            "melvorD:largeArtefactChance",
            "tinyArtefactValue",
            "melvorD:tinyArtefactValue",
            "smallArtefactValue",
            "melvorD:smallArtefactValue",
            "mediumArtefactValue",
            "melvorD:mediumArtefactValue",
            "largeArtefactValue",
            "melvorD:largeArtefactValue",
            "archaeologyVeryRareMapPreservation",
            "melvorD:archaeologyVeryRareMapPreservation",
            "archaeologyCommonItemSkillXP",
            "melvorD:archaeologyCommonItemSkillXP",
            "flatDigSiteMapCharges",
            "melvorD:flatDigSiteMapCharges",
            "disabledSpecialAttacks",
            "melvorD:disabledSpecialAttacks",
            "meleeStrengthBonusPer10EnemyDR",
            "melvorD:meleeStrengthBonusPer10EnemyDR",
            "doubleConsumablesArchaeology",
            "melvorD:doubleConsumablesArchaeology",
            "doubleActiveModifiersCartography",
            "melvorD:doubleActiveModifiersCartography",
            "soulPointPreservationChance",
            "melvorD:soulPointPreservationChance",
            "soulPointPreservationChanceBypass",
            "melvorD:soulPointPreservationChanceBypass",
            "skillCostReduction",
            "melvorD:skillCostReduction",
            "hPRegenBasedOnMaxHP",
            "melvorD:hPRegenBasedOnMaxHP",
            "abyssalSkillXP",
            "melvorD:abyssalSkillXP",
            "regainAbyssalTreeSeedChance",
            "melvorD:regainAbyssalTreeSeedChance",
            "abyssalGemChance",
            "melvorD:abyssalGemChance",
            "ignoreThievingDamageChance",
            "melvorD:ignoreThievingDamageChance",
            "flatAdditionalPrimaryProductQuantity",
            "melvorD:flatAdditionalPrimaryProductQuantity",
            "flatSoulPointsPerMonsterKill",
            "melvorD:flatSoulPointsPerMonsterKill",
            "flatSoulPointCost",
            "melvorD:flatSoulPointCost",
            "soulPointCost",
            "melvorD:soulPointCost",
            "flatHarvestingIntensity",
            "melvorD:flatHarvestingIntensity",
            "doubleHarvestingIntensityChance",
            "melvorD:doubleHarvestingIntensityChance",
            "townshipMaxSoulStorage",
            "melvorD:townshipMaxSoulStorage",
            "starFallChance",
            "melvorD:starFallChance",
            "skillPreservationCap",
            "melvorD:skillPreservationCap",
            "flatDrakeNestsFromThievingTreant",
            "melvorD:flatDrakeNestsFromThievingTreant",
            "woodcuttingDrakeNestJewelryChance",
            "melvorD:woodcuttingDrakeNestJewelryChance",
            "woodcuttingAXPAddedAsFiremakingAXP",
            "melvorD:woodcuttingAXPAddedAsFiremakingAXP",
            "additionalAbyssalGemChance",
            "melvorD:additionalAbyssalGemChance",
            "randomBarThievingWitheringRuinsChance",
            "melvorD:randomBarThievingWitheringRuinsChance",
            "summoningSynergy_Imp_Devil",
            "melvorD:summoningSynergy_Imp_Devil",
            "summoningSynergy_Abyssal_Leprechaun_Devil",
            "melvorD:summoningSynergy_Abyssal_Leprechaun_Devil",
            "flatSoulPointsWhenHit",
            "melvorD:flatSoulPointsWhenHit",
            "maxHitWith2AbyssalPrayers",
            "melvorD:maxHitWith2AbyssalPrayers",
            "minimumHarvestingIntensity",
            "melvorD:minimumHarvestingIntensity",
            "disableHarvestingVeinDegen",
            "melvorD:disableHarvestingVeinDegen",
            "abyssalPrayerCost",
            "melvorD:abyssalPrayerCost",
            "flatCombatAXPAgainstCorruptedMonsters",
            "melvorD:flatCombatAXPAgainstCorruptedMonsters",
            "farmingCropsCannotDie",
            "melvorD:farmingCropsCannotDie",
            "cannotFishJunk",
            "melvorD:cannotFishJunk",
            "fishingAdditionalSpecialItemChance",
            "melvorD:fishingAdditionalSpecialItemChance",
            "miningNodeRespawnInterval",
            "melvorD:miningNodeRespawnInterval",
            "runecraftingBaseXPForRunes",
            "melvorD:runecraftingBaseXPForRunes",
            "runecraftingBaseAXPForRunes",
            "melvorD:runecraftingBaseAXPForRunes",
            "flatTier1SummoningShardCost",
            "melvorD:flatTier1SummoningShardCost",
            "flatTier2SummoningShardCost",
            "melvorD:flatTier2SummoningShardCost",
            "flatTier3SummoningShardCost",
            "melvorD:flatTier3SummoningShardCost",
            "thievingAreaUniqueChancePercent",
            "melvorD:thievingAreaUniqueChancePercent",
            "meleeStrengthBonusWith2HWeapon",
            "melvorD:meleeStrengthBonusWith2HWeapon",
            "evasionWith2HWeapon",
            "melvorD:evasionWith2HWeapon",
            "flatMeleeDefenceBonusPerAbyssalLevel",
            "melvorD:flatMeleeDefenceBonusPerAbyssalLevel",
            "flatRangedDefenceBonusPerAbyssalLevel",
            "melvorD:flatRangedDefenceBonusPerAbyssalLevel",
            "flatMagicDefenceBonusPerAbyssalLevel",
            "melvorD:flatMagicDefenceBonusPerAbyssalLevel",
            "abyssalCombatSkillXP",
            "melvorD:abyssalCombatSkillXP",
            "rangedStrengthBonusWith2HWeapon",
            "melvorD:rangedStrengthBonusWith2HWeapon",
            "magicDamageBonusWith2HWeapon",
            "melvorD:magicDamageBonusWith2HWeapon",
            "flatSoulPointsFromReleasing",
            "melvorD:flatSoulPointsFromReleasing",
            "slayerTaskExtensionCost",
            "melvorD:slayerTaskExtensionCost",
            "slayerTaskCost",
            "melvorD:slayerTaskCost",
            "permanentCorruptionCost",
            "melvorD:permanentCorruptionCost",
            "slashAttackBonus",
            "melvorD:slashAttackBonus",
            "meleeAccuracyRatingWith2H",
            "melvorD:meleeAccuracyRatingWith2H",
            "useNoSummoningChargesAbyssalOctopus",
            "melvorD:useNoSummoningChargesAbyssalOctopus",
            "flatHiddenSkillLevel",
            "melvorD:flatHiddenSkillLevel",
            "flatSkillInterval",
            "melvorD:flatSkillInterval",
            "skillItemDoublingChance",
            "melvorD:skillItemDoublingChance",
            "additionalPrimaryProductChance",
            "melvorD:additionalPrimaryProductChance",
            "additional2PrimaryProductChance",
            "melvorD:additional2PrimaryProductChance",
            "additional3PrimaryProductChance",
            "melvorD:additional3PrimaryProductChance",
            "additional5PrimaryProductChance",
            "melvorD:additional5PrimaryProductChance",
            "additional8PrimaryProductChance",
            "melvorD:additional8PrimaryProductChance",
            "doubleItemsSkill",
            "melvorD:doubleItemsSkill",
            "bypassDoubleItemsSkill",
            "melvorD:bypassDoubleItemsSkill",
            "skillMasteryXPPerDeedree",
            "melvorD:skillMasteryXPPerDeedree",
            "skillMasteryXPPerAmeria",
            "melvorD:skillMasteryXPPerAmeria",
            "skillMasteryXPPerVale",
            "melvorD:skillMasteryXPPerVale",
            "skillMasteryXPPerQimican",
            "melvorD:skillMasteryXPPerQimican",
            "skillMasteryXPPerKo",
            "melvorD:skillMasteryXPPerKo",
            "skillMasteryXPPerArachi",
            "melvorD:skillMasteryXPPerArachi",
            "skillMasteryXPPerIridan",
            "melvorD:skillMasteryXPPerIridan",
            "skillMasteryXPPerHyden",
            "melvorD:skillMasteryXPPerHyden",
            "skillMasteryXPPerSyllia",
            "melvorD:skillMasteryXPPerSyllia",
            "flatHiddenSkillLevelPer2Levels",
            "melvorD:flatHiddenSkillLevelPer2Levels",
            "flatHiddenSkillLevelBasedOnLevels",
            "melvorD:flatHiddenSkillLevelBasedOnLevels",
            "flatMeleeStrengthBonusBasedOnSkillLevel",
            "melvorD:flatMeleeStrengthBonusBasedOnSkillLevel",
            "flatHiddenSkillLevelPer3Levels",
            "melvorD:flatHiddenSkillLevelPer3Levels",
            "flatResistanceAgainstBosses",
            "melvorD:flatResistanceAgainstBosses",
            "flatResistanceAgainstSlayerTasks",
            "melvorD:flatResistanceAgainstSlayerTasks",
            "flatResistanceWithMagic2HWeapon",
            "melvorD:flatResistanceWithMagic2HWeapon",
            "flatResistancePer30Defence",
            "melvorD:flatResistancePer30Defence",
            "flatResistanceWithActivePrayer",
            "melvorD:flatResistanceWithActivePrayer",
            "meleeStrengthBonusPer10EnemyResistance",
            "melvorD:meleeStrengthBonusPer10EnemyResistance",
            "flatMeleeDefenceBonusBasedOnResistance",
            "melvorD:flatMeleeDefenceBonusBasedOnResistance",
            "flatRangedDefenceBonusBasedOnResistance",
            "melvorD:flatRangedDefenceBonusBasedOnResistance",
            "flatMagicDefenceBonusBasedOnResistance",
            "melvorD:flatMagicDefenceBonusBasedOnResistance",
            "healingOnHitBasedOnTargetResistance",
            "melvorD:healingOnHitBasedOnTargetResistance",
            "healingOnAttackBasedOnResistance",
            "melvorD:healingOnAttackBasedOnResistance",
            "doubleItemsChanceAgainstDamageType",
            "melvorD:doubleItemsChanceAgainstDamageType",
            "damageDealtToDamageTypeSlayerTasks",
            "melvorD:damageDealtToDamageTypeSlayerTasks",
            "currencyGain",
            "melvorD:currencyGain",
            "currencyGainFromCombat",
            "melvorD:currencyGainFromCombat",
            "flatCurrencyGainFromMonsterDrops",
            "melvorD:flatCurrencyGainFromMonsterDrops",
            "flatThievingCurrencyGain",
            "melvorD:flatThievingCurrencyGain",
            "itemSaleCurrencyGain",
            "melvorD:itemSaleCurrencyGain",
            "flatCurrencyGainOnEnemyHit",
            "melvorD:flatCurrencyGainOnEnemyHit",
            "flatCurrencyGainOnHitOnSlayerTask",
            "melvorD:flatCurrencyGainOnHitOnSlayerTask",
            "flatCurrencyGainWhenHitBasedOnResistance",
            "melvorD:flatCurrencyGainWhenHitBasedOnResistance",
            "currencyGainOnMonsterKillBasedOnEvasion",
            "melvorD:currencyGainOnMonsterKillBasedOnEvasion",
            "currencyGainPerDamageDealt",
            "melvorD:currencyGainPerDamageDealt",
            "currencyGainPerMeleeDamageDealt",
            "melvorD:currencyGainPerMeleeDamageDealt",
            "currencyGainPerRangedDamageDealt",
            "melvorD:currencyGainPerRangedDamageDealt",
            "currencyGainPerMagicDamageDealt",
            "melvorD:currencyGainPerMagicDamageDealt",
            "currencyGainPerMagicDamageDealtOnSlayerTask",
            "melvorD:currencyGainPerMagicDamageDealtOnSlayerTask",
            "currencyGainFromMonsterDrops",
            "melvorD:currencyGainFromMonsterDrops",
            "currencyGainFromSlayerTaskMonsterDrops",
            "melvorD:currencyGainFromSlayerTaskMonsterDrops",
            "currencyGainOnRegenBasedOnHPGained",
            "melvorD:currencyGainOnRegenBasedOnHPGained",
            "currencyGainFromLifesteal",
            "melvorD:currencyGainFromLifesteal",
            "minThievingCurrencyGain",
            "melvorD:minThievingCurrencyGain",
            "currencyGainFromNegativeObstacles",
            "melvorD:currencyGainFromNegativeObstacles",
            "currencyGainFromAgilityPerActiveObstacle",
            "melvorD:currencyGainFromAgilityPerActiveObstacle",
            "currencyGainFromLogSales",
            "melvorD:currencyGainFromLogSales",
            "currencyGainFromRawFishSales",
            "melvorD:currencyGainFromRawFishSales",
            "flatCurrencyGain",
            "melvorD:flatCurrencyGain",
            "currencyGainPerDamageDealtBasedOnCurrencyAmount",
            "melvorD:currencyGainPerDamageDealtBasedOnCurrencyAmount",
            "minCurrencyMultiplierPerDamage",
            "melvorD:minCurrencyMultiplierPerDamage",
            "maxCurrencyMultiplierPerDamage",
            "melvorD:maxCurrencyMultiplierPerDamage",
            "flatCurrencyGainPerArchaeologyLevelNoArtefact",
            "melvorD:flatCurrencyGainPerArchaeologyLevelNoArtefact",
            "agilityObstacleCurrencyCost",
            "melvorD:agilityObstacleCurrencyCost",
            "currencyFromHarvestingChanceBasedOnLevel",
            "melvorD:currencyFromHarvestingChanceBasedOnLevel",
            "flatCurrencyGainOnMonsterKillBasedOnCombatLevel",
            "melvorD:flatCurrencyGainOnMonsterKillBasedOnCombatLevel",
            "currencyGainFromSlayerTasks",
            "melvorD:currencyGainFromSlayerTasks",
            "currencyGainFromMonsterDropsBasedOnDebuffs",
            "melvorD:currencyGainFromMonsterDropsBasedOnDebuffs",
            "flatCurrencyGainFromMeleeSlayerTasksBasedOnCombatLevel",
            "melvorD:flatCurrencyGainFromMeleeSlayerTasksBasedOnCombatLevel",
            "flatCurrencyGainFromRangedSlayerTasksBasedOnCombatLevel",
            "melvorD:flatCurrencyGainFromRangedSlayerTasksBasedOnCombatLevel",
            "flatCurrencyGainFromMagicSlayerTasksBasedOnCombatLevel",
            "melvorD:flatCurrencyGainFromMagicSlayerTasksBasedOnCombatLevel",
            "currencyGainBasedOnSummonDamage",
            "melvorD:currencyGainBasedOnSummonDamage",
            "currencyGainBasedOnBarrierDamage",
            "melvorD:currencyGainBasedOnBarrierDamage",
            "flatCurrencyGainOnEnemyHitBasedOnCombatLevel",
            "melvorD:flatCurrencyGainOnEnemyHitBasedOnCombatLevel",
            "currencyGainPerPoisonDamage",
            "melvorD:currencyGainPerPoisonDamage",
            "firemakingLogCurrencyGain",
            "melvorD:firemakingLogCurrencyGain",
            "fletchingItemToCurrencyChance",
            "melvorD:fletchingItemToCurrencyChance",
            "crafting30CurrencyGainChance",
            "melvorD:crafting30CurrencyGainChance",
            "fishingCurrencyGainChance",
            "melvorD:fishingCurrencyGainChance",
            "actionsPerClick",
            "melvorD:actionsPerClick",
            "doubleActionsPerClickChance",
            "melvorD:doubleActionsPerClickChance",
            "extraActionPerClickChance",
            "melvorD:extraActionPerClickChance",
            "doubleSoulDropChance",
            "melvorD:doubleSoulDropChance",
            "doubleSoulDrops",
            "melvorD:doubleSoulDrops",
            "placeholderModifier",
            "melvorD:placeholderModifier",
            "farmingSeedReturn",
            "melvorD:farmingSeedReturn",
            "fishingMasteryDoublingChance",
            "melvorD:fishingMasteryDoublingChance",
            "halveAgilityObstacleNegatives",
            "melvorD:halveAgilityObstacleNegatives",
            "nonShardSummoningCostReduction",
            "melvorD:nonShardSummoningCostReduction",
            "runecraftingRuneCostReduction",
            "melvorD:runecraftingRuneCostReduction",
            "flatBasePrimaryProductQuantity",
            "melvorD:flatBasePrimaryProductQuantity",
            "flatBasePrimaryProductQuantityChance",
            "melvorD:flatBasePrimaryProductQuantityChance",
            "basePrimaryProductQuantity",
            "melvorD:basePrimaryProductQuantity",
            "randomProductChance",
            "melvorD:randomProductChance",
            "flatBaseRandomProductQuantity",
            "melvorD:flatBaseRandomProductQuantity",
            "currencyGainBasedOnProduct",
            "melvorD:currencyGainBasedOnProduct",
            "additionalRandomSkillItemChance",
            "melvorD:additionalRandomSkillItemChance",
            "additionalRandomSkillItemChancePerInterval",
            "melvorD:additionalRandomSkillItemChancePerInterval",
            "additionalRandomGemChance",
            "melvorD:additionalRandomGemChance",
            "additionalRandomAbyssalGemChance",
            "melvorD:additionalRandomAbyssalGemChance",
            "additionalRandomFragmentChance",
            "melvorD:additionalRandomFragmentChance",
            "additionalRandomFiremakingOilChance",
            "melvorD:additionalRandomFiremakingOilChance",
            "additionalRandomAbyssalGemChancePerInterval",
            "melvorD:additionalRandomAbyssalGemChancePerInterval",
            "flatAdditionalSkillItem",
            "melvorD:flatAdditionalSkillItem",
            "firemakingBonfireInterval",
            "melvorD:firemakingBonfireInterval",
            "astrologyModifierCost",
            "melvorD:astrologyModifierCost",
            "flatAdditionalThievingCommonDropQuantity",
            "melvorD:flatAdditionalThievingCommonDropQuantity",
            "flatSpellRuneCost",
            "melvorD:flatSpellRuneCost",
            "flatAttackSpellRuneCost",
            "melvorD:flatAttackSpellRuneCost",
            "melvorAoD:digSiteMapSlots",
            "melvorAoD:mapChargePreservationChance",
            "melvorAoD:artefactValue",
            "melvorItA:maxHarvestingIntensity",
            "melvorItA:noHarvestingIntensityDecay",
            "sailing:Combat",
            "sailing:Morale",
            "sailing:Seafaring",
            "sailing:Speed"
          ]
        }
      ]
    },
    "MiningCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Ore",
            "melvorD:Essence",
            "melvorD:Gem",
            "melvorItA:AbyssalOre",
            "melvorItA:AbyssalGem",
            "melvorItA:Outcrop",
            "melvorItA:AbyssalEssence"
          ]
        }
      ]
    },
    "SpellCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Air",
            "melvorD:Water",
            "melvorD:Earth",
            "melvorD:Fire",
            "melvorD:Elemental",
            "melvorD:Strike",
            "melvorD:Bolt",
            "melvorD:Blast",
            "melvorD:Wave",
            "melvorD:Surge",
            "melvorF:Nature",
            "melvorTotH:Poison",
            "melvorTotH:Infernal",
            "melvorTotH:Lightning",
            "melvorItA:Abyssal",
            "melvorItA:Brume",
            "melvorItA:Gloom",
            "melvorItA:Wither",
            "melvorItA:Nether"
          ]
        }
      ]
    },
    "AttackSpellbookID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:Standard",
            "melvorF:Ancient",
            "melvorTotH:Archaic",
            "melvorItA:Abyssal"
          ]
        }
      ]
    },
    "SkillLevelCapIncreaseID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorTotH:Post99Dungeons",
            "melvorTotH:ThroneOfTheHeraldSet120",
            "melvorTotH:Post99DungeonsCombatOnly",
            "melvorTotH:ThroneOfTheHeraldSet120CombatOnly",
            "melvorAoD:Pre99Dungeons",
            "melvorAoD:ImpendingDarknessSet100",
            "melvorAoD:Pre99DungeonsCombatOnly",
            "melvorAoD:ImpendingDarknessSet100CombatOnly",
            "melvorItA:TheAbyss",
            "melvorItA:FinalDepthSetAbyssal60",
            "melvorItA:TheAbyssCombatOnly",
            "melvorItA:FinalDepthSetAbyssal60CombatOnly"
          ]
        }
      ]
    },
    "TownshipTaskCategoryID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorF:Easy",
            "melvorF:Normal",
            "melvorF:Hard",
            "melvorF:VeryHard",
            "melvorF:Elite",
            "melvorTotH:TotH",
            "melvorAoD:AoD",
            "melvorItA:ItA"
          ]
        },
        {
          "type": "string",
          "enum": [
            "Easy",
            "Normal",
            "Hard",
            "VeryHard",
            "Elite"
          ]
        }
      ]
    },
    "ModifierScopeSourceID": {
      "anyOf": [
        {
          "$ref": "#/$defs/SkillID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:AttackSpell",
            "melvorD:CombatArea"
          ]
        }
      ]
    },
    "NewID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorD:ExampleID"
          ]
        }
      ]
    },
    "DropTableData": {
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the item that can drop",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "minQuantity": {
          "description": "The minimum quantity of the item that is dropped",
          "type": "integer",
          "minimum": 1
        },
        "maxQuantity": {
          "description": "The maximum quantity of the item that is dropped",
          "type": "integer",
          "minimum": 1
        },
        "weight": {
          "description": "The weight of the drop. Higher values respresent more common items",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "itemID",
        "minQuantity",
        "maxQuantity",
        "weight"
      ],
      "additionalProperties": false
    },
    "RandomModifierTableData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModifierScopeData"
        }
      ],
      "properties": {
        "id": {
          "description": "The ID of the modifier",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierID"
            }
          ]
        },
        "weight": {
          "description": "Relative weighting of this modifier",
          "type": "integer",
          "minimum": 1
        },
        "min": {
          "description": "The minimum value the modifier can roll",
          "type": "integer",
          "minimum": 1
        },
        "max": {
          "description": "The maximum value the modifier can roll",
          "type": "integer",
          "minimum": 1
        },
        "unique": {
          "description": "Optional. Flags if this modifier should be excluded from the table if contained in existing results",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "id",
        "weight",
        "min",
        "max"
      ],
      "unevaluatedProperties": false
    },
    "AnyItemQuantity": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of any Item",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the item",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "additionalProperties": false
    },
    "AnyItemQuantitiesModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds new item quantities to the existing array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "remove": {
          "description": "Removes items from the existing array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        }
      },
      "additionalProperties": false
    },
    "ItemChanceData": {
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the Item",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "chance": {
          "description": "The chance to gain the item",
          "type": "number"
        }
      },
      "required": [
        "itemID",
        "chance"
      ],
      "additionalProperties": false
    },
    "RuneQuantity": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the Rune",
          "allOf": [
            {
              "$ref": "#/$defs/RuneItemID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the rune",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "additionalProperties": false
    },
    "RuneQuantitiesModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds new rune quantities to the existing array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RuneQuantity"
          }
        },
        "remove": {
          "description": "Removes runes from the existing array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RuneItemID"
          }
        }
      },
      "additionalProperties": false
    },
    "CurrencyQuantity": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the currency",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the currency",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "additionalProperties": false
    },
    "CurrencyQuantitiesModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds new currency quantities to the existing array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "remove": {
          "description": "Removes currencies from the existing array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyID"
          }
        }
      },
      "additionalProperties": false
    },
    "AnySkillValue": {
      "type": "object",
      "properties": {
        "skillID": {
          "description": "The ID of any Skill",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "value": {
          "description": "The value for the Skill",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "skillID",
        "value"
      ],
      "additionalProperties": false
    },
    "SkillActionEventMatcherOptions": {
      "type": "object",
      "properties": {
        "isPotionActive": {
          "description": "Optional. If present, the skill having a potion active must match",
          "type": "boolean"
        },
        "succesful": {
          "description": "Optional. If present, the skill action being succesful must match",
          "type": "boolean"
        },
        "activePotionIDs": {
          "description": "Optional. If present, the ID of the active potion for the skill must match an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PotionItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "realms": {
          "description": "Optional. If present the id of the realm of the action must match an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      }
    },
    "WoodcuttingEventMatcherOptions": {
      "description": "Matches when a Woodcutting action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "WoodcuttingAction"
        },
        "nestGiven": {
          "description": "Optional. If present the action giving a Bird's nest item as a reward must match",
          "type": "boolean"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must be cutting at least one of the specified Tree IDs",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WoodcuttingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FishingActionEventMatcherOptions": {
      "description": "Matches when a Fishing action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "FishingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "areaIDs": {
          "description": "Optional. If present, the fishing area must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishingAreaID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "gemGiven": {
          "description": "Optional. If present, the primary reward being a Gem item must match",
          "type": "boolean"
        },
        "cookedVersionExists": {
          "description": "Optional. If present, the normal action reward having a Cooked version must match",
          "type": "boolean"
        },
        "specialItemGiven": {
          "description": "Optional. If present, the primary reward being a Special item must match",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FiremakingActionEventMatcherOptions": {
      "description": "Matches when a Firemaking action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "FiremakingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FiremakingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "BonfireLitEventMatcherOptions": {
      "description": "Matches when a Firemaking bonfire is lit",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "BonfireLit"
        },
        "logIDs": {
          "description": "Optional. If present, the bonfire lit must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FiremakingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "realms": {
          "description": "Optional. If present, the ID of the realm the log belongs to must match an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "CookingActionEventMatcherOptions": {
      "description": "Matches when a Cooking action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CookingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the cooking action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "isPassiveCooking": {
          "description": "Optional. If present, the player passive cooking during the action must match",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "MiningActionEventMatcherOptions": {
      "description": "Matches when a Mining action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "MiningAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MiningActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "gemObtained": {
          "description": "Optional. If present, the action giving a standard gem reward must match",
          "type": "boolean"
        },
        "smithedVersionExists": {
          "description": "Optional. If present, the actions primary reward having a corresponding Smithing Bar must match",
          "type": "boolean"
        },
        "actionGivesGems": {
          "description": "Optional. If present, the actions ability to give standard gems must match",
          "type": "boolean"
        },
        "actionGivesSuperiorGems": {
          "description": "Optional. If present, the actions ability to give superior gems must match",
          "type": "boolean"
        },
        "actionGivesAbyssalGems": {
          "description": "Optional. If present, the actions ability to give abyssal gems must match",
          "type": "boolean"
        },
        "oreTypes": {
          "description": "Optional. If present, the actions ore type must match an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MiningRockType"
          },
          "minItems": 1,
          "uniqueItems": true,
          "deprecated": true
        },
        "categories": {
          "description": "Optional. If present, the actions category must match an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MiningCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "HarvestingActionEventMatcherOptions": {
      "description": "Matches when a Harvesting action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "HarvestingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HarvestingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "SmithingActionEventMatcherOptions": {
      "description": "Matches when a Smithing action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "SmithingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SmithingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the smithing action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SmithingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "consumedItemIDs": {
          "description": "Optional. If present, one of the items consumed in the action must have an ID that m atches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ThievingActionEventMatcherOptions": {
      "description": "Matches when a Thieving action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "ThievingAction"
        },
        "npcIDs": {
          "description": "Optional. If present, the npc must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "areaIDs": {
          "description": "Optional. If present, the thieving area must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingAreaID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "commonDropObtained": {
          "description": "Optional. If present, a common drop being obtained from the action must match",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FarmingPlantActionEventMatcherOptions": {
      "description": "Matches when a Farming Plant action occurs",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "FarmingPlantAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the farming action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FarmingHarvestActionEventMatcherOptions": {
      "description": "Matches when a Farming Harvest action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "FarmingHarvestAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the farming action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FletchingActionEventMatcherOptions": {
      "description": "Matches when a Fletching action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "FletchingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FletchingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the fletching action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FletchingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "isArrows": {
          "description": "Optional. If present, the fletching action making arrows must match",
          "type": "boolean"
        },
        "isUnstrungBows": {
          "description": "Optional. If present, the fletching action making unstrung bows must match",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "CraftingActionEventMatcherOptions": {
      "description": "Matches when a Crafting action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CraftingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CraftingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the Crafting action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CraftingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "subcategoryIDs": {
          "description": "Optional. If present the subcategory of the Crafting action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CraftingSubcategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "isConsumable": {
          "description": "Optional. If present, the item being crafted must match being a consumable item or not",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "RunecraftingActionEventMatcherOptions": {
      "description": "Matches when a Runecrafting action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "RunecraftingAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RunecraftingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the Runecrafting action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RunecraftingCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "consumedItemIDs": {
          "description": "Optional. If present, one of the items consumed in the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "subcategoryIDs": {
          "description": "Optional. If present, one of the subcategories of the recipe must match an element of this array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ValidID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "HerbloreActionEventMatcherOptions": {
      "description": "Matches when a Herblore action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "HerbloreAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HerbloreActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the Herblore action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HerbloreCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "AgilityActionEventMatcherOptions": {
      "description": "Matches when a SkillName action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "AgilityAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the Agility Obstacle must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityObstacleID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the tier of the Agility Obstacle must match one element of the array",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 14
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "SummoningActionEventMatcherOptions": {
      "description": "Matches when a Summoning action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "SummoningAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SummoningActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "categoryIDs": {
          "description": "Optional. If present, the category of the Summoning action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SummoningCategoryID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "AstrologyActionEventMatcherOptions": {
      "description": "Matches when an Astrology action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "AstrologyAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the action must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "AltMagicActionEventMatcherOptions": {
      "description": "Matches when an Alt. Magic action occurs",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "AltMagicAction"
        },
        "actionIDs": {
          "description": "Optional. If present, the spell must have an ID that matches one element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AltMagicSpellID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "produces": {
          "description": "Optional. If present, the spell must have a produces property that matches on element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AltMagicProduction"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "usedRuneIDs": {
          "description": "Optional. If present, the spell must have consumed (or had the potential to consume) a rune with an ID matching an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "MonsterDropEventMatcherOptions": {
      "description": "Matches when a Monster drops an item in combat",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "MonsterDrop"
        },
        "herbSeed": {
          "description": "Optional. If present, the original item dropped being a herb seed must match",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PlayerAttackEventMatcherOptions": {
      "description": "Matches when a Player Attack occurs",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PlayerAttack"
        },
        "attackTypes": {
          "description": "Optional. If present, the attack type of the player must match one of the array elements",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackType"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EnemyAttackEventMatcherOptions": {
      "description": "Matches when a Enemy Attack occurs",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "EnemyAttack"
        },
        "attackTypes": {
          "description": "Optional. If present, the attack type of the enemy must match one of the array elements",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackType"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FoodEatenEventMatcherOptions": {
      "description": "Matches when the player eats a food item",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "FoodEaten"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PrayerPointConsumptionEventMatcherOptions": {
      "description": "Matches when the player uses prayer points",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PrayerPointConsumption"
        },
        "isUnholy": {
          "description": "Optional. If present the prayers isUnholy property must match.",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PlayerHitpointsRegenerationEventMatcherOptions": {
      "description": "Matches when the player regenerated hitpoints",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PlayerHitpointRegeneration"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PlayerSummonAttackEventMatcherOptions": {
      "description": "Matches when the player's summons make an attack",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PlayerSummonAttack"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "RuneConsumptionEventMatcherOptions": {
      "description": "Matches when the player uses runes to cast a spell",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "RuneConsumption"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PotionUsedEventMatcherOptions": {
      "description": "Matches when the player uses a potion item",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PotionUsed"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PotionChargeUsedEventMatcherOptions": {
      "description": "Matches when the player uses a potion charge",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PotionChargeUsed"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "MonsterKilledEventMatcherOptions": {
      "description": "Matches when the player kills a monster",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "MonsterKilled"
        },
        "monsterIDs": {
          "description": "Optional. If present, the ID of the monster killed must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "killedWithType": {
          "description": "Optional. If present, the monster being killed with the specified combat style must match",
          "allOf": [
            {
              "$ref": "#/$defs/AttackType"
            }
          ]
        },
        "droppedCurrencies": {
          "description": "Optional. If present, the monster killed must drop one of these currencies",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "droppedSoul": {
          "description": "Optional. If present, the monster dropping a SoulItem must match",
          "type": "boolean"
        },
        "isCorrupted": {
          "description": "Optional. If present, the monster being killed must match being Corrupted",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "MonsterSpawnedEventMatcherOptions": {
      "description": "Matches when a monster spawns",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "MonsterSpawned"
        },
        "monsterIDs": {
          "description": "Optional. If present, the ID of the monster that spawned must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ItemEquippedEventMatcherOptions": {
      "description": "Matches when the player equips an item",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ItemEquipped"
        },
        "itemIDs": {
          "description": "Optional. If present, the ID of the item equipped must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FoodEquippedEventMatcherOptions": {
      "description": "Matches when the player equips a food item",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "FoodEquipped"
        },
        "itemIDs": {
          "description": "Optional. If present, the ID of the food item equipped must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FoodItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ShopPurchaseMadeEventMatcherOptions": {
      "description": "Matches when the player purchases an item from the shop",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ShopPurchaseMade"
        },
        "purchaseIDs": {
          "description": "Optional. If present, the ID of the ShopPurchase must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "SummonTabletUsedEventMatcherOptions": {
      "description": "Matches when the player uses a Summoning tablet",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "SummonTabletUsed"
        },
        "tabletIDs": {
          "description": "Optional. If present, the ID of the Summoning tablet used must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "realms": {
          "description": "Optional. If present, the ID of the realm the tablet's recipe belongs to must match an element of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "CartographySurveyEventMatcherOptions": {
      "description": "Matches when the player performs a survey action in Cartography",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CartographySurvey"
        },
        "worldMaps": {
          "description": "Optional. If present the ID of the surveyed hex's world map must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WorldMapID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "CartographyPaperMakingEventMatcherOptions": {
      "description": "Matches when the player performs a paper making action in Cartography",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CartographyPaperMaking"
        },
        "recipes": {
          "description": "Optional. If present the ID of the paper making recipe must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PaperMakingRecipeID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "CartographyMapUpgradeEventMatcherOptions": {
      "description": "Matches when the player performs a map upgrade action in Cartography",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CartographyMapUpgrade"
        },
        "digSites": {
          "description": "Optional. If present the ID of the maps archaeology dig site must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArchaeologyDigSiteID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "CartographyMapRefinementEventMatcherOptions": {
      "description": "Matches when the player purchases a new refinement in Cartography",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "CartographyMapRefinement"
        },
        "digSites": {
          "description": "Optional. If present the ID of the maps archaeology dig site must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArchaeologyDigSiteID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ArchaeologyActionEventMatcherOptions": {
      "description": "Matches when the player performs an action in Archaeology",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillActionEventMatcherOptions"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "ArchaeologyAction"
        },
        "actionIDs": {
          "description": "Optional. If present the ID of the dig site being dug in must match a member of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArchaeologyDigSiteID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "artifactFound": {
          "description": "Optional. If present the action finding an artifact must match.",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "BoneDropEventMatcherOptions": {
      "description": "Matches when an enemy in combat drops bones",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "BoneDrop"
        },
        "isBone": {
          "type": "boolean",
          "description": "Optional. If present the bone item that drops must match being a BoneItem"
        },
        "isSoul": {
          "type": "boolean",
          "description": "Optional. If present the bone item that drops must match being a SoulItem"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "GameEventMatcherData": {
      "oneOf": [
        {
          "$ref": "#/$defs/WoodcuttingEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FishingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FiremakingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/BonfireLitEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/CookingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/MiningActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/SmithingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/ThievingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FarmingPlantActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FarmingHarvestActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FletchingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/CraftingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/RunecraftingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/HerbloreActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/AgilityActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/SummoningActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/AstrologyActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/AltMagicActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/MonsterDropEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/PlayerAttackEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/EnemyAttackEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FoodEatenEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/PrayerPointConsumptionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/PlayerHitpointsRegenerationEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/PlayerSummonAttackEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/RuneConsumptionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/PotionUsedEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/PotionChargeUsedEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/MonsterKilledEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/ItemEquippedEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/FoodEquippedEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/ShopPurchaseMadeEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/SummonTabletUsedEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/CartographySurveyEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/CartographyPaperMakingEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/CartographyMapUpgradeEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/MonsterSpawnedEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/CartographyMapRefinementEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/ArchaeologyActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/HarvestingActionEventMatcherOptions"
        },
        {
          "$ref": "#/$defs/BoneDropEventMatcherOptions"
        }
      ]
    },
    "RollType": {
      "type": "string",
      "enum": [
        "MaxHit",
        "MinHit",
        "CurrentHP",
        "CurrentHPCapped200",
        "MaxHP",
        "DamageDealt",
        "DamageTaken",
        "MagicScaling",
        "Fixed",
        "One",
        "Rend",
        "Poisoned",
        "Bleeding",
        "PoisonMax35",
        "PoisonMin35",
        "PoisonFixed100",
        "BurnFixed100",
        "BurnMaxHit100",
        "CursedFixed100",
        "MaxHitDR",
        "MaxHitScaledByHP",
        "MaxHitScaledByHP2x",
        "FixedPlusMaxHit50",
        "HPUnder90",
        "PoisonedMaxHit",
        "Reflection",
        "DefenceLevel",
        "Crystallize",
        "BaseMaxHP"
      ]
    },
    "BaseDamage": {
      "type": "object",
      "properties": {
        "character": {
          "description": "The character to use to determine the damage amount",
          "allOf": [
            {
              "$ref": "#/$defs/CharacterType"
            }
          ]
        },
        "maxRoll": {
          "description": "The method to compute the maximum damage dealt",
          "allOf": [
            {
              "$ref": "#/$defs/RollType"
            }
          ]
        },
        "maxPercent": {
          "description": "The magnitude of the damage. Effect depends on the value of maxRoll",
          "type": "number",
          "minimum": 0
        },
        "attackCount": {
          "description": "Optional. If present on a Mult-hit Special attack, the damage will only be dealt on this hit of the attack",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "character",
        "maxRoll",
        "maxPercent"
      ]
    },
    "RolledDamage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseDamage"
        }
      ],
      "properties": {
        "roll": {
          "description": "Determines if the damage should roll between a minimum and maximum value",
          "type": "boolean",
          "const": true
        },
        "minRoll": {
          "description": "The method to compute the minimum damage dealt",
          "allOf": [
            {
              "$ref": "#/$defs/RollType"
            }
          ]
        },
        "minPercent": {
          "description": "The magnitude of the minimum damage. Effect depends on the value of minRoll",
          "type": "number",
          "minimum": 0
        }
      },
      "required": [
        "roll",
        "minRoll",
        "minPercent"
      ]
    },
    "FixedDamage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseDamage"
        }
      ],
      "properties": {
        "roll": {
          "description": "Determines if the damage should roll between a minimum and maximum value",
          "type": "boolean",
          "const": false
        }
      },
      "required": [
        "roll"
      ]
    },
    "Damage": {
      "oneOf": [
        {
          "$ref": "#/$defs/RolledDamage"
        },
        {
          "$ref": "#/$defs/FixedDamage"
        }
      ]
    },
    "NormalDamageData": {
      "description": "Convenience data type for defining damage based on normal attack damage",
      "type": "object",
      "properties": {
        "damageType": {
          "type": "string",
          "const": "Normal"
        },
        "amplitude": {
          "description": "Percent of normal damage to scale by",
          "type": "number",
          "exclusiveMinimum": 0
        },
        "attackCount": {
          "description": "Optional. If present, damage only occurs on the specified proc of the special attack",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "damageType",
        "amplitude"
      ],
      "additionalProperties": false
    },
    "CustomDamageData": {
      "description": "Defines customized damage for a special attack",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Damage"
        }
      ],
      "properties": {
        "damageType": {
          "type": "string",
          "const": "Custom"
        }
      },
      "required": [
        "damageType"
      ],
      "unevaluatedProperties": false
    },
    "DamageData": {
      "oneOf": [
        {
          "$ref": "#/$defs/NormalDamageData"
        },
        {
          "$ref": "#/$defs/CustomDamageData"
        }
      ]
    },
    "CharacterType": {
      "type": "string",
      "enum": [
        "Target",
        "Attacker"
      ]
    },
    "DOTType": {
      "type": "string",
      "enum": [
        "Burn",
        "Bleed",
        "Poison",
        "Regen",
        "DeadlyPoison",
        "BarrierBleed",
        "BarrierBurn",
        "Laceration",
        "Voidburst",
        "Ablaze",
        "Toxin"
      ]
    },
    "SkillLevelRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "SkillLevel"
        },
        "skillID": {
          "description": "The ID of the Skill that must have a level greater than or equal to level",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "level": {
          "description": "The minimum level the Skill must have",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "type",
        "skillID",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "MasteryLevelRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "MasteryLevel"
        },
        "skillID": {
          "description": "The ID of the Skill that is used",
          "allOf": [
            {
              "$ref": "#/$defs/SkillWithMasteryID"
            }
          ]
        },
        "actionID": {
          "description": "The ID of the action within the Skill that must have a mastery level greater than or equal to level",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "level": {
          "description": "The minimum mastery level the action must have",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "skillID",
        "actionID",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "AbyssalLevelRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "AbyssalLevel"
        },
        "skillID": {
          "description": "The ID of the Skill that must have a level greater than or equal to level",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "level": {
          "description": "The minimum abyssal level the Skill must have",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "skillID",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "SkillTreeNodeUnlockedRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "SkillTreeNodeUnlocked"
        },
        "skillID": {
          "description": "The ID of the Skill with the Skill Tree",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "skillTreeID": {
          "description": "The ID of the Skill Tree within the Skill",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "nodeID": {
          "description": "The ID of the Node within the Skill Tree",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "type",
        "skillID",
        "skillTreeID",
        "nodeID"
      ],
      "unevaluatedProperties": false
    },
    "AllSkillLevelRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "AllSkillLevels"
        },
        "level": {
          "description": "The minimum level that all Skills must have",
          "type": "integer",
          "minimum": 1
        },
        "namespace": {
          "description": "Optional. If present, the skills required will only belong to the given namespace",
          "allOf": [
            {
              "$ref": "#/$defs/Namespace"
            }
          ]
        },
        "exceptions": {
          "description": "Optional. If present, the skill IDs in the array will not be included in the requirement",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "DungeonRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "DungeonCompletion"
        },
        "dungeonID": {
          "description": "The ID of the Dungeon that must be completed",
          "allOf": [
            {
              "$ref": "#/$defs/DungeonID"
            }
          ]
        },
        "count": {
          "description": "The number of times the dungeon must be completed",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "dungeonID",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "AbyssDepthRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "AbyssDepthCompletion"
        },
        "depthID": {
          "description": "The ID of the Dungeon that must be completed",
          "allOf": [
            {
              "$ref": "#/$defs/AbyssDepthID"
            }
          ]
        },
        "count": {
          "description": "The number of times the depth must be completed",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "depthID",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "CompletionRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Completion"
        },
        "percent": {
          "description": "The percent total completion the player must have",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        },
        "namespace": {
          "description": "The data namespace to check completion in. Accepts the special values of melvorBaseGame and melvorTrue for Base Game (demo + full) and True (all expacs + mods)",
          "allOf": [
            {
              "$ref": "#/$defs/Namespace"
            }
          ]
        }
      },
      "required": [
        "type",
        "percent",
        "namespace"
      ],
      "unevaluatedProperties": false
    },
    "ShopPurchaseRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ShopPurchase"
        },
        "purchaseID": {
          "description": "The ID of the shop purchase that must be bought",
          "allOf": [
            {
              "$ref": "#/$defs/ShopPurchaseID"
            }
          ]
        },
        "count": {
          "description": "The number of times the purchase must be bought",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "purchaseID",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "SlayerItemRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "SlayerItem"
        },
        "itemID": {
          "description": "The ID of the EquipmentItem that must be equipped",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentItemID"
            }
          ]
        }
      },
      "required": [
        "type",
        "itemID"
      ],
      "unevaluatedProperties": false
    },
    "SlayerTaskRequirement": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "SlayerTask"
        },
        "tier": {
          "description": "The minimum tier of slayer task that must be completed",
          "allOf": [
            {
              "$ref": "#/$defs/SlayerTier"
            }
          ],
          "deprecated": true
        },
        "category": {
          "description": "The ID of the task category that tasks must be completed in",
          "allOf": [
            {
              "$ref": "#/$defs/SlayerTaskCategoryID"
            }
          ]
        },
        "count": {
          "description": "The number of Slayer Tasks of the tier or higher that must be completed",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "category",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "ItemFoundRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ItemFound"
        },
        "itemID": {
          "description": "The ID of the item that must be found at least once",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "type",
        "itemID"
      ],
      "unevaluatedProperties": false
    },
    "MonsterKilledRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "MonsterKilled"
        },
        "monsterID": {
          "description": "The ID of the monster that must be killed",
          "allOf": [
            {
              "$ref": "#/$defs/MonsterID"
            }
          ]
        },
        "count": {
          "description": "The number of times the monster must be killed",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "monsterID",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "TownshipTaskCompletionRequirement": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "TownshipTask"
        },
        "count": {
          "description": "The number of Township tasks that must be completed",
          "type": "integer",
          "minimum": 1
        },
        "realm": {
          "description": "Optional. Only check tasks attached to this Realm. Defaults to Melvor Realm.",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ],
          "default": "melvorD:Melvor"
        }
      },
      "required": [
        "type",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "TownshipBuildingRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "TownshipBuilding"
        },
        "buildingID": {
          "description": "The ID of the building that must be actively built",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipBuildingID"
            }
          ]
        },
        "count": {
          "description": "The number of buildings that must be actively built",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "buildingID",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "CartographyHexDiscoveryRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "CartographyHexDiscovery"
        },
        "worldMapID": {
          "description": "The ID of the WorldMap that hexes must be surveyed in",
          "allOf": [
            {
              "$ref": "#/$defs/WorldMapID"
            }
          ]
        },
        "count": {
          "description": "The number of hexes that must be fully surveyed",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "worldMapID",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "CartographyPOIDiscoveryRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "CartographyPOIDiscovery"
        },
        "worldMapID": {
          "description": "The ID of the WorldMap that hexes must be surveyed in",
          "allOf": [
            {
              "$ref": "#/$defs/WorldMapID"
            }
          ]
        },
        "poiIDs": {
          "description": "The IDs of the Points of Interest that must be discovered",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PointsOfInterestID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type",
        "worldMapID",
        "poiIDs"
      ],
      "unevaluatedProperties": false
    },
    "ArchaeologyItemsDonatedRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ArchaeologyItemsDonated"
        },
        "count": {
          "description": "The number of items required to be donated",
          "type": "number"
        }
      },
      "required": [
        "type",
        "count"
      ],
      "unevaluatedProperties": false
    },
    "AnyRequirementData": {
      "oneOf": [
        {
          "$ref": "#/$defs/SkillLevelRequirementData"
        },
        {
          "$ref": "#/$defs/AllSkillLevelRequirementData"
        },
        {
          "$ref": "#/$defs/DungeonRequirementData"
        },
        {
          "$ref": "#/$defs/CompletionRequirementData"
        },
        {
          "$ref": "#/$defs/ShopPurchaseRequirementData"
        },
        {
          "$ref": "#/$defs/SlayerItemRequirementData"
        },
        {
          "$ref": "#/$defs/SlayerTaskRequirement"
        },
        {
          "$ref": "#/$defs/ItemFoundRequirementData"
        },
        {
          "$ref": "#/$defs/MonsterKilledRequirementData"
        },
        {
          "$ref": "#/$defs/TownshipTaskCompletionRequirement"
        },
        {
          "$ref": "#/$defs/TownshipBuildingRequirementData"
        },
        {
          "$ref": "#/$defs/CartographyHexDiscoveryRequirementData"
        },
        {
          "$ref": "#/$defs/CartographyPOIDiscoveryRequirementData"
        },
        {
          "$ref": "#/$defs/ArchaeologyItemsDonatedRequirementData"
        },
        {
          "$ref": "#/$defs/AbyssalLevelRequirementData"
        },
        {
          "$ref": "#/$defs/SkillTreeNodeUnlockedRequirementData"
        },
        {
          "$ref": "#/$defs/AbyssDepthRequirementData"
        },
        {
          "$ref": "#/$defs/MasteryLevelRequirementData"
        }
      ]
    },
    "RequirementsModificationData": {
      "description": "Data for modifying an array of Requirements",
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds new requirements. Performed after removals",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "remove": {
          "description": "Removes all requirements with types contained within this array",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Comparison": {
      "type": "string",
      "enum": [
        "==",
        "!=",
        ">",
        "<",
        "<=",
        ">="
      ]
    },
    "ValueConditionData": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value to compare with",
          "type": "number"
        },
        "operator": {
          "description": "The comparison operator to use",
          "allOf": [
            {
              "$ref": "#/$defs/Comparison"
            }
          ]
        }
      },
      "required": [
        "value",
        "operator"
      ]
    },
    "BooleanConditionData": {
      "type": "object",
      "properties": {
        "inverted": {
          "description": "If the condition should be inverted. e.g. !condition. Defaults to false",
          "type": "boolean"
        }
      }
    },
    "HitpointsConditionData": {
      "description": "Compares the hitpoints percent of the specified character with value",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ValueConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "Hitpoints"
        }
      },
      "required": [
        "type"
      ]
    },
    "AttackTypeConditionData": {
      "description": "Requires that the character and their target have the specified Combat Styles",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CombatType"
        },
        "thisAttackType": {
          "description": "The combat style that the character must use",
          "anyOf": [
            {
              "$ref": "#/$defs/AttackType"
            },
            {
              "type": "string",
              "const": "any"
            }
          ]
        },
        "targetAttackType": {
          "description": "The combat style that the character's target must use",
          "anyOf": [
            {
              "$ref": "#/$defs/AttackType"
            },
            {
              "type": "string",
              "const": "any"
            }
          ]
        }
      },
      "required": [
        "type",
        "thisAttackType",
        "targetAttackType"
      ]
    },
    "DamageTypeConditionData": {
      "description": "Requires that a character deals a specific damage type",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "DamageType"
        },
        "damageType": {
          "description": "The damage type the character must deal",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        }
      },
      "required": [
        "type",
        "damageType"
      ]
    },
    "IsFightingCondition": {
      "description": "Requires that the player is fighting something",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "IsFighting"
        }
      },
      "required": [
        "type"
      ]
    },
    "BarrierConditionData": {
      "description": "Compares the barrier percent of the specified character with value",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ValueConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "Barrier"
        }
      },
      "required": [
        "type"
      ]
    },
    "CombatEffectGroupConditionData": {
      "description": "Requires that the specified character has an effect that belongs to the specified group active",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CombatEffectGroup"
        },
        "groupID": {
          "description": "The ID of the CombatEffectGroup that an active effect must belong to",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectGroupID"
            }
          ]
        }
      },
      "required": [
        "type",
        "groupID"
      ]
    },
    "CombatEffectConditionData": {
      "description": "Requires that the specified character has the specified effect active",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "CombatEffect"
        },
        "effectID": {
          "description": "The ID of the CombatEffect that must be active",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectID"
            }
          ]
        }
      },
      "required": [
        "type",
        "effectID"
      ]
    },
    "CombatConditionData": {
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/HitpointsConditionData"
        },
        {
          "$ref": "#/$defs/AttackTypeConditionData"
        },
        {
          "$ref": "#/$defs/DamageTypeConditionData"
        },
        {
          "$ref": "#/$defs/BarrierConditionData"
        },
        {
          "$ref": "#/$defs/CombatEffectGroupConditionData"
        },
        {
          "$ref": "#/$defs/CombatEffectConditionData"
        },
        {
          "$ref": "#/$defs/FightingBossConditionData"
        }
      ],
      "properties": {
        "character": {
          "description": "The character that must meet the condition",
          "type": "string",
          "enum": [
            "Player",
            "Enemy"
          ]
        }
      },
      "required": [
        "character"
      ],
      "unevaluatedProperties": false
    },
    "ItemInBankConditionData": {
      "description": "Compares the quantity of the specified item in the bank with value",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ValueConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "BankItem"
        },
        "itemID": {
          "description": "The ID of the item that must be present in the bank",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "type",
        "itemID"
      ],
      "unevaluatedProperties": false
    },
    "ItemChargeConditionData": {
      "description": "Compares the quantity of item charges of the equipment item with value",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ValueConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "ItemCharge"
        },
        "itemID": {
          "description": "The ID of the equipment item that has charges",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentItemID"
            }
          ]
        }
      },
      "required": [
        "type",
        "itemID"
      ],
      "unevaluatedProperties": false
    },
    "PotionUsedConditionData": {
      "description": "Checks if the player is using a specific potion item/potion from a specific recipe",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "PotionUsed"
        },
        "itemID": {
          "description": "Optional. The ID of a specific potion item that must be used",
          "allOf": [
            {
              "$ref": "#/$defs/PotionItemID"
            }
          ]
        },
        "recipeID": {
          "description": "Optional. The ID of a herblore recipe, where one of its potions must be used",
          "allOf": [
            {
              "$ref": "#/$defs/HerbloreActionID"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "FightingBossConditionData": {
      "description": "Requires that the Player is fighting a Boss monster",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "FightingBoss"
        }
      },
      "required": [
        "type"
      ]
    },
    "BaseEquipStatCompareConditionData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "EquipStatCompare"
        },
        "operator": {
          "description": "The comparison operator to use",
          "allOf": [
            {
              "$ref": "#/$defs/Comparison"
            }
          ]
        }
      },
      "required": [
        "type",
        "operator"
      ]
    },
    "EquipStatCompareConditionData": {
      "description": "Compares the Player's base equipment stat with the Enemies",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEquipStatCompareConditionData"
        }
      ],
      "properties": {
        "statKey": {
          "description": "The equipment stat to compare",
          "allOf": [
            {
              "$ref": "#/$defs/EquipStatKey"
            }
          ]
        }
      },
      "required": [
        "statKey"
      ],
      "unevaluatedProperties": false
    },
    "DamageTypeEquipStatCompareConditionData": {
      "description": "Compares the Player's base equipment stat with the Enemies",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEquipStatCompareConditionData"
        }
      ],
      "properties": {
        "statKey": {
          "description": "The equipment stat to compare",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeEquipStatKey"
            }
          ]
        },
        "damageType": {
          "description": "The damage type of the stat",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        }
      },
      "required": [
        "statKey",
        "damageType"
      ],
      "unevaluatedProperties": false
    },
    "FightingSlayerTaskConditionData": {
      "description": "Requires that the player is fighting their current slayer task",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BooleanConditionData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "FightingSlayerTask"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ConditionalModifierConditionData": {
      "oneOf": [
        {
          "$ref": "#/$defs/CombatConditionData"
        },
        {
          "$ref": "#/$defs/ItemInBankConditionData"
        },
        {
          "$ref": "#/$defs/ItemChargeConditionData"
        },
        {
          "$ref": "#/$defs/PotionUsedConditionData"
        },
        {
          "$ref": "#/$defs/EquipStatCompareConditionData"
        },
        {
          "$ref": "#/$defs/DamageTypeEquipStatCompareConditionData"
        },
        {
          "$ref": "#/$defs/FightingSlayerTaskConditionData"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Every"
            },
            "conditions": {
              "description": "Array of conditions of which every one must be met",
              "type": "array",
              "items": {
                "$ref": "#/$defs/ConditionalModifierConditionData"
              }
            }
          },
          "required": [
            "type",
            "conditions"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Some"
            },
            "conditions": {
              "description": "Array of conditions of which any one must be met",
              "type": "array",
              "items": {
                "$ref": "#/$defs/ConditionalModifierConditionData"
              }
            }
          },
          "required": [
            "type",
            "conditions"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ConditionalModifierData": {
      "type": "object",
      "properties": {
        "condition": {
          "description": "The condition that must be matched for the modifiers provided to be active",
          "allOf": [
            {
              "$ref": "#/$defs/ConditionalModifierConditionData"
            }
          ]
        },
        "modifiers": {
          "description": "Modifiers provided to the player if the condition is met",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Modifiers provided to the enemy if the condition is met",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "isNegative": {
          "description": "Optional. If the effect of this conditional modifier is considered negative to the Player",
          "type": "boolean",
          "default": false
        },
        "description": {
          "description": "Optional. Template string to use as a description for this modifier",
          "type": "string"
        },
        "descriptionLang": {
          "description": "Optional. ID of language string to use in place of description property",
          "type": "string"
        }
      },
      "required": [
        "condition"
      ],
      "unevaluatedProperties": false
    },
    "ConditionalModifiersModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Optional. Adds new conditional modifiers",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConditionalModifierData"
          }
        },
        "removed": {
          "description": "Optional. Removes conditional modifiers which have a condition with a matching type",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Hitpoints",
              "CombatEffectGroup",
              "CombatEffect",
              "CombatType",
              "DamageType",
              "Barrier",
              "FightingBoss",
              "BankItem",
              "ItemCharge",
              "PotionUsed",
              "Every",
              "Some",
              "EquipStatCompare",
              "FightingSlayerTask"
            ]
          }
        }
      },
      "additionalProperties": false
    },
    "PetChanceData": {
      "type": "object",
      "properties": {
        "petID": {
          "description": "The ID of the pet to roll for",
          "allOf": [
            {
              "$ref": "#/$defs/PetID"
            }
          ]
        },
        "weight": {
          "description": "Determines the chance of the pet. Rolls at 1/weight probability.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "petID",
        "weight"
      ],
      "unevaluatedProperties": false
    },
    "GamemodeRewardItemIDData": {
      "type": "object",
      "properties": {
        "gamemodeID": {
          "description": "The ID of the gamemode to roll for",
          "allOf": [
            {
              "$ref": "#/$defs/GamemodeID"
            }
          ]
        },
        "rewardItemIDs": {
          "description": "An array of item IDs that will be rewarded when the dungeon is completed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        }
      },
      "unevaluatedProperties": false
    },
    "BaseAreaEffectData": {
      "type": "object",
      "properties": {
        "magnitude": {
          "description": "For modifiers, determines the base value of the modifier. For effect applicators, determines the base multiplier for the applicator's chance.",
          "type": "number",
          "exclusiveMinimum": 0
        },
        "applicator": {
          "description": "Optional. If present this effect applicator will be merged with the character, with chances multiplied by the magnitude",
          "allOf": [
            {
              "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
            }
          ]
        }
      },
      "required": [
        "magnitude"
      ]
    },
    "PlayerAreaEffectData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseAreaEffectData"
        }
      ],
      "properties": {
        "target": {
          "type": "string",
          "const": "Player"
        },
        "modifiers": {
          "description": "Optional. If present these modifier will be applied to the player, with a value equal to the magnitude",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "modifier": {
          "description": "Optional. If present this modifier will be applied to the player, with a base value equal to the magnitude",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierKey"
            }
          ],
          "deprecated": true
        }
      },
      "required": [
        "target"
      ],
      "unevaluatedProperties": false
    },
    "EnemyAreaEffectData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseAreaEffectData"
        }
      ],
      "properties": {
        "target": {
          "type": "string",
          "const": "Enemy"
        },
        "modifiers": {
          "description": "Optional. If present these modifier will be applied to the enemy, with a value equal to the magnitude",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "modifier": {
          "description": "Optional. If present this modifier will be applied to the enemy, with a base value equal to the magnitude",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierKey"
            }
          ],
          "deprecated": true
        }
      },
      "required": [
        "target"
      ],
      "unevaluatedProperties": false
    },
    "CombatAreaEffectData": {
      "oneOf": [
        {
          "$ref": "#/$defs/PlayerAreaEffectData"
        },
        {
          "$ref": "#/$defs/EnemyAreaEffectData"
        }
      ]
    },
    "FixedCost": {
      "description": "A fixed cost per purchase in the shop",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Fixed"
        },
        "cost": {
          "description": "The cost per purchase. Can be set to 0 to indicate no cost.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "type",
        "cost"
      ]
    },
    "LinearCost": {
      "description": "A linearly scaling cost per purchase in the shop",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Linear"
        },
        "initial": {
          "description": "The cost of the first purchase",
          "type": "integer",
          "minimum": 0
        },
        "scaling": {
          "description": "The amount the cost should increase per purchase made",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "initial",
        "scaling"
      ]
    },
    "BankSlotCost": {
      "description": "A cost that scales according the bank slot cost formula per purchase in the shop",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "BankSlot"
        }
      },
      "required": [
        "type"
      ]
    },
    "GloveCost": {
      "description": "A fixed cost that can be reduced if the player has read the merchant's permit",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Glove"
        },
        "cost": {
          "description": "The cost per purchase.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "cost"
      ]
    },
    "ShopCost": {
      "description": "Determines the cost of purchasing this",
      "type": "object",
      "properties": {
        "currencies": {
          "description": "Optional. Array of currency costs of the purchase",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopCurrencyCostData"
          }
        },
        "items": {
          "description": "Array of Item costs of the purchase",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "gp": {
          "description": "GP cost of the purchase",
          "allOf": [
            {
              "$ref": "#/$defs/AnyShopCost"
            }
          ],
          "deprecated": true
        },
        "slayerCoins": {
          "description": "Slayer coin cost of the purchase",
          "allOf": [
            {
              "$ref": "#/$defs/AnyShopCost"
            }
          ],
          "deprecated": true
        },
        "raidCoins": {
          "description": "Golbin Raid coin cost of the purchase",
          "allOf": [
            {
              "$ref": "#/$defs/AnyShopCost"
            }
          ],
          "deprecated": true
        }
      },
      "required": [
        "items"
      ],
      "unevaluatedProperties": false
    },
    "AnyShopCost": {
      "oneOf": [
        {
          "$ref": "#/$defs/FixedCost"
        },
        {
          "$ref": "#/$defs/LinearCost"
        },
        {
          "$ref": "#/$defs/BankSlotCost"
        },
        {
          "$ref": "#/$defs/GloveCost"
        }
      ]
    },
    "ShopCurrencyCostData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/AnyShopCost"
        }
      ],
      "properties": {
        "currency": {
          "description": "The ID of the currency the purchase should cost",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        }
      },
      "required": [
        "currency"
      ],
      "unevaluatedProperties": false
    },
    "BaseItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name for the item",
          "type": "string"
        },
        "category": {
          "description": "Category for item, utilized for searching",
          "type": "string"
        },
        "type": {
          "description": "Type for item, utilized for searching",
          "type": "string"
        },
        "media": {
          "description": "URI of the item's image",
          "type": "string",
          "format": "uri-reference"
        },
        "mediaAnimation": {
          "description": "Optional. If present, provides the URI for an animated image of the item",
          "type": "string",
          "format": "uri-reference"
        },
        "altMedia": {
          "description": "URI of an alternative image for the item",
          "type": "string",
          "format": "uri-reference"
        },
        "ignoreCompletion": {
          "description": "Determines if the item should not count for item completion",
          "type": "boolean"
        },
        "obtainFromItemLog": {
          "description": "Determines if the item should be obtainable by clicking on it in the item log",
          "type": "boolean"
        },
        "golbinRaidExclusive": {
          "description": "Determines if the item should only show up in the Golbin Raid Minigame",
          "type": "boolean"
        },
        "customDescription": {
          "description": "Optional. If present, the item will use this description instead of the default autogenerated one.",
          "type": "string"
        },
        "sellsForCurrency": {
          "description": "Optional. Determines which currency this item sells for. Defaults to GP.",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "sellsFor": {
          "description": "Base sale price for the item",
          "type": "integer",
          "minimum": 0
        },
        "isArtefact": {
          "description": "Determines if the item is an Artefact obtained from Archaeology",
          "type": "boolean"
        },
        "isGenericArtefact": {
          "description": "Optional. Determines if the item is a Generic Artefact obtained from Archaeology that can be exchanged for Museum Tokens",
          "type": "boolean"
        },
        "isDebug": {
          "description": "Optional. Flags the item as a Debuggin item that is only to be loaded if DEBUGENABLED is true. Defaults to false.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "category",
        "type",
        "media",
        "ignoreCompletion",
        "obtainFromItemLog",
        "golbinRaidExclusive",
        "sellsFor"
      ]
    },
    "BaseItemModificationData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the item to modify",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "category": {
          "description": "Category for item, utilized for searching",
          "type": "string"
        },
        "type": {
          "description": "Type for item, utilized for searching",
          "type": "string"
        },
        "obtainFromItemLog": {
          "description": "Determines if the item should be obtainable by clicking on it in the item log",
          "type": "boolean"
        },
        "sellsFor": {
          "description": "Base sale price for the item",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "id"
      ]
    },
    "ItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Item"
        }
      },
      "required": [
        "itemType"
      ],
      "unevaluatedProperties": false
    },
    "EquipStatKey": {
      "type": "string",
      "enum": [
        "attackSpeed",
        "stabAttackBonus",
        "slashAttackBonus",
        "blockAttackBonus",
        "rangedAttackBonus",
        "magicAttackBonus",
        "meleeStrengthBonus",
        "rangedStrengthBonus",
        "magicDamageBonus",
        "meleeDefenceBonus",
        "rangedDefenceBonus",
        "magicDefenceBonus"
      ]
    },
    "DamageTypeEquipStatKey": {
      "type": "string",
      "enum": [
        "resistance",
        "summoningMaxhit"
      ]
    },
    "EquipStatPairData": {
      "type": "object",
      "properties": {
        "key": {
          "description": "The equipment stat that is provided",
          "oneOf": [
            {
              "$ref": "#/$defs/EquipStatKey"
            },
            {
              "type": "string",
              "const": "damageReduction"
            }
          ]
        },
        "value": {
          "description": "The value of the equipment stat provided",
          "type": "number"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "DamageTypeEquipStatData": {
      "type": "object",
      "properties": {
        "key": {
          "description": "The equipment stat that is provided",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeEquipStatKey"
            }
          ]
        },
        "value": {
          "description": "The value of the equipment stat provided",
          "type": "number"
        },
        "damageType": {
          "description": "Optional. The damage type of the stat. Defaults to melvorD:Normal",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "AnyEquipStatData": {
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/EquipStatPairData"
        },
        {
          "$ref": "#/$defs/DamageTypeEquipStatData"
        }
      ]
    },
    "EquipStatsModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyEquipStatData"
          }
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "BaseEquipmentItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "tier": {
          "description": "Classification for the tier of item. Currently only effects which items can be converted to Clothing in township",
          "type": "string",
          "examples": [
            "Leather",
            "none",
            "dragon"
          ]
        },
        "validSlots": {
          "description": "The valid equipment slots that this item can be equipped to.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentSlotID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "occupiesSlots": {
          "description": "Equipment slots that will also be occupied by this item, in addition to one of the validSlots. Typical usecase is to make a weapon 2-Handed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentSlotID"
          },
          "uniqueItems": true
        },
        "cantEquipWith": {
          "description": "Optional. The IDs of Equipment Items that this item cannot be equipped with at the same time",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          },
          "uniqueItems": true
        },
        "equipRequirements": {
          "description": "Array of requirements that are needed in order to equip this item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          },
          "uniqueItems": true
        },
        "equipmentStats": {
          "description": "Equipment stats that are provided by this item. Do not apply if item is in the Passive slot.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyEquipStatData"
          }
        },
        "specialAttacks": {
          "description": "Optional. An array of Special Attack IDs that are provided when the item is equipped.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SpecialAttackID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "overrideSpecialChances": {
          "description": "Optional. If present with the specialAttacks property, overrides their default chances to happen. Must be the same length as specialAttacks.",
          "type": "array",
          "items": {
            "type": "number",
            "exclusiveMinimum": 0,
            "maximum": 100
          },
          "minItems": 1
        },
        "providedRunes": {
          "description": "Optional. An array of runes that are provided by this item.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        },
        "ammoType": {
          "description": "Only required if one of the validSlots for this item is Quiver. Specifies the types of weapons this item can supply with ammunition.",
          "allOf": [
            {
              "$ref": "#/$defs/AmmoType"
            }
          ]
        },
        "consumesChargesOn": {
          "description": "Optional. Only utilized if this item participates in the Item Charges subsystem. Specifies an array of GameEventMatchers, which on a successful match will consume a single item charge.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GameEventMatcherData"
          },
          "minItems": 1
        },
        "consumesOn": {
          "description": "Optional. Specifies an array of GameEventMatchers, which on a successful match will consume one of the equipped item. Best utilized for the Quiver, Summon1, Summon2, and Consumable slots.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GameEventMatcherData"
          },
          "minItems": 1
        },
        "consumesItemOn": {
          "description": "Optional. If present, specifies that an item in the bank will be consumed if a successful GameEvent matches",
          "type": "object",
          "properties": {
            "itemID": {
              "description": "The ID of the item in the bank to be consumed",
              "allOf": [
                {
                  "$ref": "#/$defs/AnyItemID"
                }
              ]
            },
            "chance": {
              "description": "The percentage chance that the item is consumed when an event matches",
              "type": "number",
              "exclusiveMinimum": 0,
              "maximum": 100
            },
            "matchers": {
              "description": "Specifies an array of GameEventMatchers, which on a successful match will roll to consume an item from the bank.",
              "type": "array",
              "items": {
                "$ref": "#/$defs/GameEventMatcherData"
              },
              "minItems": 1
            }
          },
          "required": [
            "itemID",
            "chance",
            "matchers"
          ],
          "additionalProperties": false
        },
        "deathPenaltyPriority": {
          "description": "Optional. If present sets the priority of losing this item when dying. Higher priority indicates the item will be lost before others. Defaults to 0.",
          "type": "integer",
          "default": 0
        }
      },
      "required": [
        "tier",
        "validSlots",
        "occupiesSlots",
        "equipRequirements",
        "equipmentStats"
      ],
      "dependentRequired": {
        "overrideSpecialChances": [
          "specialAttacks"
        ]
      }
    },
    "BaseEquipmentItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        },
        {
          "$ref": "#/$defs/IStatObjectModificationData"
        }
      ],
      "properties": {
        "tier": {
          "description": "Classification for the tier of item. Currently only effects which items can be converted to Clothing in township",
          "type": "string",
          "examples": [
            "Leather",
            "none",
            "dragon"
          ]
        },
        "validSlots": {
          "description": "The valid equipment slots that this item can be equipped to.",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EquipmentSlotID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EquipmentSlotID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "occupiesSlots": {
          "description": "Equipment slots that will also be occupied by this item, in addition to one of the validSlots. Typical usecase is to make a weapon 2-Handed",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EquipmentSlotID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EquipmentSlotID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "equipRequirements": {
          "description": "Requirements that are needed to be met in order to equip this item",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "equipmentStats": {
          "description": "Equipment stats that are provided by this item. Do not apply if item is in the Passive slot.",
          "allOf": [
            {
              "$ref": "#/$defs/EquipStatsModificationData"
            }
          ]
        },
        "specialAttacks": {
          "description": "Special Attack IDs that are provided when the item is equipped.",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SpecialAttackID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SpecialAttackID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "overrideSpecialChances": {
          "description": "If present with the specialAttacks property, overrides their default chances to happen. Must be the same length as specialAttacks. Set to null to use default special attack chances.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "number",
            "exclusiveMinimum": 0,
            "maximum": 100
          },
          "minItems": 1
        },
        "providedRunes": {
          "description": "Runes that are provided by this item.",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantitiesModificationData"
            }
          ]
        },
        "ammoType": {
          "description": "Only required if one of the validSlots for this item is Quiver. Specifies the types of weapons this item can supply with ammunition. Set to null to remove ammoType.",
          "oneOf": [
            {
              "$ref": "#/$defs/AmmoType"
            },
            {
              "type": "null"
            }
          ]
        },
        "consumesOn": {
          "description": "Optional. Adds/Removes from an array of GameEventMatchers, which on a successful match will consume one of the equipped item. Best utilized for the Quiver, Summon1, Summon2, and Consumable slots.",
          "type": "object",
          "properties": {
            "add": {
              "description": "Adds new ways this item can be consumed",
              "type": "array",
              "items": {
                "$ref": "#/$defs/GameEventMatcherData"
              },
              "minItems": 1
            },
            "remove": {
              "description": "Removes all ways this item can be consumed of the given type of GameEventMatcher",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "dependentRequired": {
        "overrideSpecialChances": [
          "specialAttacks"
        ]
      }
    },
    "EquipmentItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEquipmentItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Equipment"
        }
      },
      "required": [
        "itemType"
      ],
      "unevaluatedProperties": false
    },
    "SailingEquipmentItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "SailingEquipment"
        },
        "equipRequirements": {
            "description": "Array of requirements that are needed in order to equip this item",
            "type": "array",
            "items": {
                "$ref": "#/$defs/AnyRequirementData"
            },
            "uniqueItems": true
        },
        "equipmentStats": {
            "description": "Equipment stats that are provided by this item. Do not apply if item is in the Passive slot.",
            "type": "array",
            "items": {
                "$ref": "#/$defs/SailingEquipStatData"
            }
        },
        "validSlots": {
            "description": "The valid equipment slots that this item can be equipped to.",
            "type": "array",
            "items": {
                "$ref": "#/$defs/SailingEquipmentSlotID"
            },
            "minItems": 1,
            "uniqueItems": true
        }
      },
      "required": [
        "itemType"
      ],
      "unevaluatedProperties": false
    },
    "SailingEquipmentSlotID": {
        "type": "string",
        "enum": [
            "sailing:Ram",
            "sailing:Deck",
            "sailing:Hull",
            "sailing:Rudder"
        ]
    },
    "SailingEquipStatData": {
        "type": "object",
        "properties": {
            "key": {
                "description": "The equipment stat that is provided",
                "oneOf": [
                    {
                        "$ref": "#/$defs/SailingEquipStatKey"
                    }
                ]
            },
            "value": {
                "description": "The value of the equipment stat provided",
                "type": "number"
            }
        },
        "required": [
            "key",
            "value"
        ],
        "unevaluatedProperties": false
    },
    "SailingEquipStatKey": {
        "type": "string",
        "enum": [
            "morale",
            "combat",
            "seafaring",
            "speed"
        ]
    },
    "WeaponItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEquipmentItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Weapon"
        },
        "attackType": {
          "description": "Determines which combat style this weapon enables the player to use",
          "allOf": [
            {
              "$ref": "#/$defs/AttackType"
            }
          ]
        },
        "ammoTypeRequired": {
          "description": "Optional. If present this weapon requires an item to be equipped in the Quiver with a matching AmmoType to attack",
          "allOf": [
            {
              "$ref": "#/$defs/AmmoType"
            }
          ]
        },
        "damageType": {
          "description": "Optional. The ID of the damage type this Weapon deals. Defaults to Normal.",
          "anyOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ],
          "default": "Normal"
        }
      },
      "required": [
        "itemType",
        "attackType"
      ],
      "unevaluatedProperties": false
    },
    "WeaponItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEquipmentItemModificationData"
        }
      ],
      "properties": {
        "attackType": {
          "description": "Determines which combat style this weapon enables the player to use",
          "allOf": [
            {
              "$ref": "#/$defs/AttackType"
            }
          ]
        },
        "ammoTypeRequired": {
          "description": "This weapon requires an item to be equipped in the Quiver with a matching AmmoType to attack. Set to null to not consume ammo.",
          "oneOf": [
            {
              "$ref": "#/$defs/AmmoType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "FoodItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Food"
        },
        "healsFor": {
          "description": "The base healing value of the food. Specified as 1/10th of the desired value in Standard Mode.",
          "type": "number",
          "exclusiveMinimum": 0
        }
      },
      "required": [
        "itemType",
        "healsFor"
      ],
      "unevaluatedProperties": false
    },
    "FoodItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        },
        {
          "$ref": "#/$defs/IStatObjectModificationData"
        }
      ],
      "properties": {
        "healsFor": {
          "description": "The base healing value of the food. Specified as 1/10th of the desired value in Standard Mode.",
          "type": "number",
          "exclusiveMinimum": 0
        }
      },
      "unevaluatedProperties": false
    },
    "BoneItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Bone"
        },
        "prayerPoints": {
          "description": "The base number of prayer points obtained by burying the item",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "itemType",
        "prayerPoints"
      ],
      "unevaluatedProperties": false
    },
    "BoneItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        }
      ],
      "properties": {
        "prayerPoints": {
          "description": "The base number of prayer points obtained by burying the item",
          "type": "integer",
          "minimum": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SoulItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Soul"
        },
        "soulPoints": {
          "description": "The base number of soul points obtained by excercizing the item",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "itemType",
        "soulPoints"
      ],
      "unevaluatedProperties": false
    },
    "SoulItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        }
      ],
      "properties": {
        "soulPoints": {
          "description": "The base number of soul points obtained by excercizing the item",
          "type": "integer",
          "minimum": 1
        }
      },
      "unevaluatedProperties": false
    },
    "PotionItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Potion"
        },
        "charges": {
          "description": "The base quantity of charges the potion provides per use",
          "type": "integer",
          "minimum": 1
        },
        "tier": {
          "description": "The tier of the potion. Utilized to determine requirements for upgrading potions, and for filtering in the potion select menu.",
          "type": "integer",
          "minimum": 0,
          "maximum": 3
        },
        "action": {
          "description": "The ID of the Action that the potion can be utilized with.",
          "allOf": [
            {
              "$ref": "#/$defs/ActionID"
            }
          ]
        },
        "consumesOn": {
          "description": "An array of GameEventMatchers that when any are matched a single charge of the potion is consumed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GameEventMatcherData"
          },
          "minItems": 1
        }
      },
      "required": [
        "itemType",
        "charges",
        "tier",
        "action",
        "consumesOn"
      ],
      "unevaluatedProperties": false
    },
    "PotionItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        },
        {
          "$ref": "#/$defs/IStatObjectModificationData"
        }
      ],
      "properties": {
        "charges": {
          "description": "The base quantity of charges the potion provides per use",
          "type": "integer",
          "minimum": 1
        }
      },
      "unevaluatedProperties": false
    },
    "ReadableItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Readable"
        },
        "modalID": {
          "description": "Optional. If present, specifies the Bootstrap 4 Modal HTMLElement-id in the DOM. This modal will be opened when the item is read. Has precendence over the swalData property",
          "type": "string"
        },
        "swalData": {
          "description": "Optional. If present, specifies data for a SweetAlert2 modal to be fired.",
          "type": "object",
          "properties": {
            "title": {
              "description": "Language string ID to use for the title text of the SweetAlert2 modal.",
              "type": "string"
            },
            "htmlTemplateID": {
              "description": "Specifies the id of an HTMLTemplateElement in the DOM to use as the html for the SweetAlert2 modal.",
              "type": "string"
            }
          },
          "required": [
            "title",
            "htmlTemplateID"
          ],
          "unevaluatedProperties": false
        }
      },
      "required": [
        "itemType"
      ],
      "unevaluatedProperties": false
    },
    "OpenableItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Openable"
        },
        "dropTable": {
          "description": "Defines the items that can be obtained by opening this item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1
        },
        "keyItem": {
          "description": "Optional. If present, this item is required to open the item. The quantity provided will be consumed per item opened.",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantity"
            }
          ]
        }
      },
      "required": [
        "itemType",
        "dropTable"
      ],
      "unevaluatedProperties": false
    },
    "OpenableItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        }
      ],
      "properties": {
        "dropTable": {
          "description": "Defines the items that can be obtained by opening this item",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/DropTableData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "keyItem": {
          "description": "The item that is required to open this item. The quantity provided will be consumed per item opened. Set to null to remove requirement.",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantity"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "TokenItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Token"
        }
      },
      "required": [
        "itemType"
      ],
      "unevaluatedProperties": false
    },
    "TokenItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        },
        {
          "$ref": "#/$defs/IStatObjectModificationData"
        }
      ],
      "unevaluatedProperties": false
    },
    "MasteryTokenItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "MasteryToken"
        },
        "skill": {
          "description": "The ID of the skill this token provides mastery pool XP to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillWithMasteryID"
            }
          ]
        },
        "realm": {
          "description": "The realm that this token provides mastery pool XP to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "percent": {
          "description": "The percent of the mastery pool that this token fills",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "rollInSkill": {
          "description": "Optional. If this item should be rolled for when the corresponding skill completes an action. Defaults to true.",
          "type": "boolean"
        }
      },
      "required": [
        "itemType",
        "skill",
        "realm",
        "percent"
      ]
    },
    "CompostItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Compost"
        },
        "compostValue": {
          "description": "The percent value that using this item will fill the compost meter in farming by.",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        },
        "harvestBonus": {
          "description": "The percent value that using this item will increase the quantity of crops harvested by.",
          "type": "number"
        },
        "buttonStyle": {
          "description": "The CSS class that is applied to the compost, compost all, and compost max buttons in farming",
          "type": "string"
        },
        "barStyle": {
          "description": "The CSS class that is applied to the compost meter when this item is applied to farming plots",
          "type": "string"
        },
        "disableSeedRefund": {
          "description": "Whether using this Compost disables seed refunds on harvest.",
          "type": "boolean",
          "default": false
        },
        "compostAllCost": {
          "description": "Optional. Sets the currency cost to apply this item to all farming plots. Defaults to 2000 GP",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantity"
            }
          ]
        }
      },
      "required": [
        "itemType",
        "compostValue",
        "harvestBonus",
        "buttonStyle",
        "barStyle"
      ],
      "unevaluatedProperties": false
    },
    "CompostItemModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemModificationData"
        }
      ],
      "properties": {
        "compostValue": {
          "description": "The percent value that using this item will fill the compost meter in farming by.",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        },
        "harvestBonus": {
          "description": "The percent value that using this item will increase the quantity of crops harvested by.",
          "type": "number"
        },
        "buttonStyle": {
          "description": "The CSS class that is applied to the compost, compost all, and compost max buttons in farming",
          "type": "string"
        },
        "barStyle": {
          "description": "The CSS class that is applied to the compost meter when this item is applied to farming plots",
          "type": "string"
        },
        "disableSeedRefund": {
          "description": "Whether using this Compost disables seed refunds on harvest.",
          "type": "boolean"
        },
        "compostAllCost": {
          "description": "Optional. Sets the currency cost to apply this item to all farming plots",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantity"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "RuneItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "Rune"
        },
        "subRunes": {
          "description": "Optional. The runes that this rune is composed of. Used to define Combo runes",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RuneItemID"
          }
        },
        "realm": {
          "description": "Optional. The realm this rune belongs to. Defaults to melvorD:Melvor",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ],
          "default": "melvorD:Melvor"
        }
      },
      "required": [
        "itemType"
      ],
      "unevaluatedProperties": false
    },
    "FiremakingOilItemData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseItemData"
        }
      ],
      "properties": {
        "itemType": {
          "type": "string",
          "const": "FiremakingOil"
        },
        "modifiers": {
          "description": "Modifiers that are applied to the Player when this oil is in use.",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "oilInterval": {
          "description": "The interval of the Oil",
          "type": "integer",
          "minimum": 250
        }
      },
      "required": [
        "itemType",
        "modifiers",
        "oilInterval"
      ],
      "unevaluatedProperties": false
    },
    "SkillCapIncreaseData": {
      "type": "object",
      "properties": {
        "skillID": {
          "description": "The ID of the skill to increase the level cap of",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "increase": {
          "description": "The increase in level cap to give",
          "type": "integer"
        },
        "maximum": {
          "description": "The maximum level cap that can be reached with this increase",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "skillID",
        "increase",
        "maximum"
      ],
      "unevaluatedProperties": false
    },
    "SkillLevelCapRequirementSetData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier for this set within its parent object. Used for save encoding/decoding",
          "type": "integer",
          "minimum": 0
        },
        "requirements": {
          "description": "The requirements that must be met for this set to trigger a skill cap increase",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          },
          "minItems": 1
        }
      },
      "required": [
        "id",
        "requirements"
      ],
      "unevaluatedProperties": false
    },
    "SkillIDValue": {
      "type": "object",
      "properties": {
        "skillID": {
          "description": "The ID of the skill",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "value": {
          "description": "The value associated with the skill",
          "type": "integer"
        }
      },
      "required": [
        "skillID",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "SkillLevelCapIncreaseData": {
      "description": "Data for constructing a SkillLevelCapIncrease object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "levelType": {
          "description": "Determines the type of level cap that is increased",
          "type": "string",
          "enum": [
            "Standard",
            "Abyssal"
          ]
        },
        "requirementSets": {
          "description": "Determines sets of requirements, that when met will trigger this level cap increase to be applied",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillLevelCapRequirementSetData"
          },
          "minItems": 1
        },
        "fixedIncreases": {
          "description": "Optional. Fixed increases to level caps given when a requirement set is met",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillCapIncreaseData"
          }
        },
        "randomIncreases": {
          "description": "Optional. Random increases to level caps given when a requirement set is met. One element of this array will be chosen",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillCapIncreaseData"
          }
        },
        "randomCount": {
          "description": "Optional. The number of random increases that will be given when a requirement set is met",
          "type": "integer",
          "minimum": 0
        },
        "setIncreases": {
          "description": "Optional. Sets the level cap of a skill when a requirement set is met. Has no effect if the skill's level cap is already above the amount.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillIDValue"
          }
        }
      },
      "required": [
        "levelType",
        "requirementSets"
      ],
      "unevaluatedProperties": false
    },
    "SkillLevelCapIncreaseModificationData": {
      "description": "Data for modifying a SkillLevelCapIncrease object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "requirementSets": {
          "description": "Determines sets of requirements, that when met will trigger this level cap increase to be applied",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillLevelCapRequirementSetData"
              },
              "minItems": 1
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              }
            }
          }
        },
        "fixedIncreases": {
          "description": "Modifies fixed increases to level caps given when a requirement set is met",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillCapIncreaseData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          }
        },
        "randomIncreases": {
          "description": "Modifies random increases to level caps given when a requirement set is met. One element of this array will be chosen",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillCapIncreaseData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          }
        },
        "setIncreases": {
          "description": "Modifies level cap of a skill when a requirement set is met. Has no effect if the skill's level cap is already above the amount.",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillIDValue"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          }
        }
      },
      "unevaluatedProperties": false
    },
    "LevelCapIncreaseCostData": {
      "type": "object",
      "properties": {
        "increase": {
          "description": "The number of levels the cap will be increased by",
          "type": "integer",
          "minimum": 1
        },
        "baseCost": {
          "description": "The base cost to increase the level cap",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsData"
            }
          ]
        },
        "scalingFactor": {
          "description": "The base to use to calculate the cost of a given purchase. Cost scales by scalingFactor^purchaseCount",
          "type": "number",
          "minimum": 1
        },
        "maxCostScaling": {
          "description": "The maximum scale that can be applied to the costs",
          "type": "integer",
          "minimum": 1
        },
        "skillLevelGates": {
          "description": "Optional. If present, all of these skills must have a level above the new level cap to purchase an increase",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          }
        },
        "baseGateLevel": {
          "description": "Optional. Sets the base level cap that can be bought. Defaults to 0",
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "required": [
        "increase",
        "baseCost",
        "maxCostScaling"
      ],
      "additionalProperties": false
    },
    "GamemodeData": {
      "description": "Data for constructing a Gamemode object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the Gamemode",
          "type": "string"
        },
        "media": {
          "description": "URI of Gamemode icon",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the Gamemode displayed on the Character Select screen",
          "type": "string"
        },
        "rules": {
          "description": "List of rules that are specific to the Gamemode. Displayed on the Character Select screen",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textClass": {
          "description": "CSS class used on the character select screen to specify the colour of the Gamemode's name",
          "type": "string"
        },
        "btnClass": {
          "description": "CSS class used on the character select screen to specify the style of both Gamemode Selection and Created Characters",
          "type": "string"
        },
        "isPermaDeath": {
          "description": "If true, dying in this Gamemode will delete the save file",
          "type": "boolean"
        },
        "isEvent": {
          "description": "If true, a notice will be shown that this gamemode is Time limited on the character select screen",
          "type": "boolean"
        },
        "startDate": {
          "description": "Optional. If present, respresents the Unix timestamp at which the Gamemode is available to play",
          "type": "number",
          "minimum": 0
        },
        "endDate": {
          "description": "Represents the Unix timestamp at which the Gamemode is no longer available to play. If set to 0, the Gamemode is always available.",
          "type": "number",
          "minimum": 0
        },
        "combatTriangle": {
          "description": "The combat triangle utilized in the Gamemode. 0 specifies the Standard Triangle. 1 specifies the Hardcore Triangle. 2 specifies the inverted Hardcore triangle.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatTriangleType"
            }
          ]
        },
        "hitpointMultiplier": {
          "description": "All hitpoint and damage values will be multiplied by this value. The Standard value is 10.",
          "type": "integer",
          "minimum": 1
        },
        "hasRegen": {
          "description": "Determines if the Player has passive hitpoint regeneration",
          "type": "boolean"
        },
        "capNonCombatSkillLevels": {
          "description": "Determines if Non-Combat skills will be capped by the Player's combat level",
          "type": "boolean"
        },
        "startingPage": {
          "description": "ID of the page that the game should change to after the Tutorial has been completed",
          "allOf": [
            {
              "$ref": "#/$defs/PageID"
            }
          ]
        },
        "startingItems": {
          "description": "The items that the Player starts with upon completing the Tutorial",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "allowSkillUnlock": {
          "description": "If the Gamemode allows for skills to be unlocked for a GP cost",
          "type": "boolean"
        },
        "startingSkills": {
          "description": "Optional. Array of Skill IDs that the player should start with in the gamemode. If unset, the player starts with all skills.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          }
        },
        "skillUnlockCost": {
          "description": "Array of GP costs to unlock new skills in the gamemode. If the number of skills unlocked exceeds the length of this array, the last element will be utilized as the cost. Has no effect if allowSkillUnlock is false.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0
          }
        },
        "playerModifiers": {
          "description": "Optional. Modifiers that will be applied to the Player at all times",
          "anyOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Modifiers that will be applied to all Enemies/Monsters",
          "anyOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "playerCombatEffects": {
          "description": "Optional. Effect Applicators merged with the player in this Gamemode",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "enemyCombatEffects": {
          "description": "Optional. Effect Applicators merged with the enemy in this Gamemode",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "hasTutorial": {
          "description": "Determines if the Player has access to the tutorial on creating a new save",
          "type": "boolean"
        },
        "disabledModifiers": {
          "description": "Optional. List of Modifiers that are disabled in the gamemode. Is not mechanically implemented, but will render modifiers as disabled.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierID"
          },
          "minItems": 1
        },
        "defaultInitialLevelCap": {
          "description": "Optional. If present, all skills will have an initial level cap equal to this value, except for the skills in initialLevelCaps",
          "type": "integer",
          "minimum": 1
        },
        "initialLevelCaps": {
          "description": "Optional. If present, skills will start with these level caps in this Gamemode",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillIDValue"
          }
        },
        "defaultInitialAbyssalLevelCap": {
          "description": "Optional. If present, all skills will have an initial abyssal level cap equal to this value, except for the skills in initialAbyssalLevelCaps",
          "type": "integer",
          "minimum": 1
        },
        "initialAbyssalLevelCaps": {
          "description": "Optional. If present, skills will start with these level caps in this Gamemode",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillIDValue"
          }
        },
        "levelCapIncreases": {
          "description": "Optional. Determines which level cap increases are applied during this gamemode",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillLevelCapIncreaseID"
          }
        },
        "levelCapCost": {
          "description": "Optional. If present, the level caps of skills can be increased by purchasing them",
          "allOf": [
            {
              "$ref": "#/$defs/LevelCapIncreaseCostData"
            }
          ]
        },
        "abyssalLevelCapCost": {
          "description": "Optional. If present, the abyssal level caps of skills can be increased by purchasing them",
          "allOf": [
            {
              "$ref": "#/$defs/LevelCapIncreaseCostData"
            }
          ]
        },
        "allowXPOverLevelCap": {
          "description": "Optional. Determines if the player can continue to gain XP over the level cap.",
          "type": "boolean"
        },
        "disablePreservation": {
          "description": "Optional. If set to true, all forms of preservation (Items, Runes, Ammo, Prayer Points, Summoning Tablets, Food, Potion Charges, Dig Site Map Actions) will be disabled",
          "type": "boolean",
          "default": false
        },
        "disableItemDoubling": {
          "description": "Optional. If set to true, all forms of item doubling will be disabled",
          "type": "boolean",
          "default": false
        },
        "hasActiveGameplay": {
          "description": "Optional. If set to true, a warning that the gamemode may require active gameplay to progress will be shown on the character select screen.",
          "type": "boolean",
          "default": false
        },
        "allowAncientRelicDrops": {
          "description": "Optional. If set to true, ancient relics can be dropped by skills. Only available if the Atlas of Discovery expansion is installed.",
          "type": "boolean",
          "default": false
        },
        "useDefaultSkillUnlockRequirements": {
          "description": "Optional. Determines if default skill unlock requirements will be used. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "skillUnlockRequirements": {
          "description": "Optional. Custom skill unlock requirements for this gamemode. Overrides skill default values",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "skillID": {
                "description": "The ID of the skill to set unlock requirements for",
                "allOf": [
                  {
                    "$ref": "#/$defs/SkillID"
                  }
                ]
              },
              "requirements": {
                "description": "The requirements that must be met for the skill to unlock",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/AnyRequirementData"
                }
              }
            },
            "required": [
              "skillID",
              "requirements"
            ],
            "additionalProperties": false
          }
        },
        "enableInstantActions": {
          "description": "Optional. If set to true, all actions in game will be performed instantly on a click.",
          "type": "boolean",
          "default": false
        },
        "enabledLangs": {
          "description": "Optional. Array of languages required to see the gamemode. If unset, all languages can see the gamemode.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SupportedLanguage"
          }
        },
        "pre99RollConversion": {
          "description": "Optional. ID of a SkillLevelCapIncrease that will convert the old pre 99 roll save data",
          "allOf": [
            {
              "$ref": "#/$defs/SkillLevelCapIncreaseID"
            }
          ]
        },
        "post99RollConversion": {
          "description": "Optional. ID of a SkillLevelCapIncrease that will convert the old post 99 roll save data",
          "allOf": [
            {
              "$ref": "#/$defs/SkillLevelCapIncreaseID"
            }
          ]
        }
      },
      "required": [
        "name",
        "media",
        "rules",
        "textClass",
        "btnClass",
        "isPermaDeath",
        "isEvent",
        "endDate",
        "combatTriangle",
        "hitpointMultiplier",
        "hasRegen",
        "capNonCombatSkillLevels",
        "startingPage",
        "startingItems",
        "allowSkillUnlock",
        "skillUnlockCost",
        "hasTutorial"
      ],
      "unevaluatedProperties": false
    },
    "GamemodeModificationData": {
      "description": "Data for modifying a Gamemode object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the gamemode to modify",
          "allOf": [
            {
              "$ref": "#/$defs/GamemodeID"
            }
          ]
        },
        "levelCapIncreases": {
          "description": "Adds or removes level cap increases from the gamemode",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillLevelCapIncreaseID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillLevelCapIncreaseID"
              }
            }
          },
          "additionalProperties": false
        },
        "levelCapCost": {
          "description": "Optional. If present, the level caps of skills can be increased by purchasing them",
          "allOf": [
            {
              "$ref": "#/$defs/LevelCapIncreaseCostData"
            }
          ]
        },
        "abyssalLevelCapCost": {
          "description": "Optional. If present, the abyssal level caps of skills can be increased by purchasing them",
          "allOf": [
            {
              "$ref": "#/$defs/LevelCapIncreaseCostData"
            }
          ]
        },
        "pre99RollConversion": {
          "description": "Optional. ID of a SkillLevelCapIncrease that will convert the old pre 99 roll save data",
          "allOf": [
            {
              "$ref": "#/$defs/SkillLevelCapIncreaseID"
            }
          ]
        },
        "post99RollConversion": {
          "description": "Optional. ID of a SkillLevelCapIncrease that will convert the old post 99 roll save data",
          "allOf": [
            {
              "$ref": "#/$defs/SkillLevelCapIncreaseID"
            }
          ]
        },
        "startingSkills": {
          "description": "Adds or removes starting skills from the gamemode",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "id"
      ],
      "unevaluatedProperties": false
    },
    "AnyItemData": {
      "type": "object",
      "discriminator": {
        "propertyName": "itemType"
      },
      "oneOf": [
        {
          "$ref": "#/$defs/ItemData"
        },
        {
          "$ref": "#/$defs/EquipmentItemData"
        },
        {
          "$ref": "#/$defs/SailingEquipmentItemData"
        },
        {
          "$ref": "#/$defs/WeaponItemData"
        },
        {
          "$ref": "#/$defs/FoodItemData"
        },
        {
          "$ref": "#/$defs/BoneItemData"
        },
        {
          "$ref": "#/$defs/PotionItemData"
        },
        {
          "$ref": "#/$defs/ReadableItemData"
        },
        {
          "$ref": "#/$defs/OpenableItemData"
        },
        {
          "$ref": "#/$defs/TokenItemData"
        },
        {
          "$ref": "#/$defs/MasteryTokenItemData"
        },
        {
          "$ref": "#/$defs/CompostItemData"
        },
        {
          "$ref": "#/$defs/SoulItemData"
        },
        {
          "$ref": "#/$defs/RuneItemData"
        },
        {
          "$ref": "#/$defs/FiremakingOilItemData"
        }
      ]
    },
    "AnyItemModificationData": {
      "anyOf": [
        {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/BaseItemModificationData"
            }
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/BaseEquipmentItemModificationData"
            }
          ],
          "unevaluatedProperties": false
        },
        {
          "$ref": "#/$defs/WeaponItemModificationData"
        },
        {
          "$ref": "#/$defs/FoodItemModificationData"
        },
        {
          "$ref": "#/$defs/BoneItemModificationData"
        },
        {
          "$ref": "#/$defs/PotionItemModificationData"
        },
        {
          "$ref": "#/$defs/OpenableItemModificationData"
        },
        {
          "$ref": "#/$defs/TokenItemModificationData"
        },
        {
          "$ref": "#/$defs/CompostItemModificationData"
        },
        {
          "$ref": "#/$defs/SoulItemModificationData"
        }
      ]
    },
    "AttackStyleData": {
      "description": "Data for constructing an AttackStyle object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "experienceGain": {
          "description": "Experience that is gained when dealing damage with this attack style",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "skillID": {
                "description": "The ID of the skill that should gain experience",
                "allOf": [
                  {
                    "$ref": "#/$defs/SkillID"
                  }
                ]
              },
              "ratio": {
                "description": "The amount of experience gained per hitpoint multiplier normalized point of damage dealt.",
                "type": "number",
                "exclusiveMinimum": 0
              }
            },
            "required": [
              "skillID",
              "ratio"
            ],
            "unevaluatedProperties": false
          }
        },
        "attackType": {
          "description": "The combat style the Player can use this attack style with",
          "allOf": [
            {
              "$ref": "#/$defs/AttackType"
            }
          ]
        },
        "name": {
          "description": "The display name of the attack style",
          "type": "string"
        }
      },
      "required": [
        "experienceGain",
        "attackType",
        "name"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectTarget": {
      "type": "string",
      "enum": [
        "Self",
        "Target"
      ]
    },
    "BehaviourTriggerConditionData": {
      "type": "object",
      "properties": {
        "operator": {
          "description": "The comparison operation to perform between the left-hand and right-hand values",
          "allOf": [
            {
              "$ref": "#/$defs/Comparison"
            }
          ]
        },
        "lhValue": {
          "description": "left-hand value to use in the comparison",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "rhValue": {
          "description": "right-hand value to use in the comparison",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "operator",
        "lhValue",
        "rhValue"
      ],
      "additionalProperties": false
    },
    "CombatBehaviourTriggerData": {
      "description": "Data used to construct a CombatBehaviourTrigger",
      "type": "object",
      "properties": {
        "condition": {
          "description": "Optional. Defines a condition that must be true for the behaviour to execute from this trigger ",
          "allOf": [
            {
              "$ref": "#/$defs/BehaviourTriggerConditionData"
            }
          ]
        }
      }
    },
    "EndOfTurnTriggerData": {
      "description": "Data used to construct an EndOfTurnTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs at the end of a characters turn.",
          "type": "string",
          "const": "EndOfTurn"
        },
        "target": {
          "description": "Determines whether the behaviour executes at the end of the character's turn or their target's",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectTarget"
            }
          ]
        }
      },
      "required": [
        "type",
        "target"
      ],
      "unevaluatedProperties": false
    },
    "HitWithAttackTriggerData": {
      "description": "Data used to construct a HitWithAttackTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the character hits with an attack",
          "type": "string",
          "const": "HitWithAttack"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "MissedWithAttackTriggerData": {
      "description": "Data used to construct a MissedWithAttackTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the character misses with an attack",
          "type": "string",
          "const": "MissedWithAttack"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "HitByAttackTriggerData": {
      "description": "Data used to construct a HitByAttackTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the character is hit by an attack",
          "type": "string",
          "const": "HitByAttack"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EvadedAttackTriggerData": {
      "description": "Data used to construct an EvadedAttackTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the character evades an attack",
          "type": "string",
          "const": "EvadedAttack"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PostAttackTriggerData": {
      "description": "Data used to construct an PostAttackTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs after a character attacks",
          "type": "string",
          "const": "PostAttack"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "WasAttackedTriggerData": {
      "description": "Data used to construct an WasAttackedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs after a character is attacked",
          "type": "string",
          "const": "WasAttacked"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EndOfFightTriggerData": {
      "description": "Data used to construct an EndOfFightTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the current fight ends",
          "type": "string",
          "const": "EndOfFight"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "PrayerPointUseTriggerData": {
      "description": "Data used to construct a PrayerPointUseTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs whenever the player would use prayer points",
          "type": "string",
          "const": "PrayerPointUse"
        },
        "isUnholy": {
          "description": "Optional. If present the prayer that is using points must be of the same type for the behaviour to execute",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EquipmentChangedTriggerData": {
      "description": "Data used to construct a EquipmentChangedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs whenever the player changes their current equipment",
          "type": "string",
          "const": "EquipmentChanged"
        },
        "isNotEquipped": {
          "description": "Optional. The IDs of equipment items the player must not have equipped for the behaviour to execute",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          }
        },
        "isEquipped": {
          "description": "Optional. The IDs of equipment items the player must have equipped for the behaviour to execute",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          }
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ParameterChangedTriggerData": {
      "description": "Data used to construct a ParameterChangedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the specified parameter on the active effect changes",
          "type": "string",
          "const": "ParameterChange"
        },
        "paramName": {
          "description": "The name of the parameter that changes",
          "type": "string"
        }
      },
      "required": [
        "type",
        "paramName"
      ],
      "unevaluatedProperties": false
    },
    "StatsChangedTriggerData": {
      "description": "Data used to construct a StatsChangedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the specified statGroup on the active effect changes",
          "type": "string",
          "const": "StatsChange"
        },
        "statGroupName": {
          "description": "The name of the stat group that changes",
          "type": "string"
        }
      },
      "required": [
        "type",
        "statGroupName"
      ],
      "unevaluatedProperties": false
    },
    "TimerFiredTriggerData": {
      "description": "Data used to construct a TimerFiredTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the specified timer on the active effect fires",
          "type": "string",
          "const": "TimerFired"
        },
        "timerName": {
          "description": "The name of the timer that fires",
          "type": "string"
        }
      },
      "required": [
        "type",
        "timerName"
      ],
      "unevaluatedProperties": false
    },
    "EffectAppliedTriggerData": {
      "description": "Data used to construct a EffectAppliedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the effect is first applied to a character",
          "type": "string",
          "const": "EffectApplied"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EffectReappliedTriggerData": {
      "description": "Data used to construct a EffectReappliedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs when the effect is applied to a character, but is already active",
          "type": "string",
          "const": "EffectReapplied"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EffectRemovedTriggerData": {
      "description": "Data used to construct a EffectRemovedTrigger",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatBehaviourTriggerData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a behaviour trigger that occurs just before the effect is removed from a character",
          "type": "string",
          "const": "EffectRemoved"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "AnyCombatEffectBehaviourTriggerData": {
      "oneOf": [
        {
          "$ref": "#/$defs/EndOfTurnTriggerData"
        },
        {
          "$ref": "#/$defs/HitWithAttackTriggerData"
        },
        {
          "$ref": "#/$defs/MissedWithAttackTriggerData"
        },
        {
          "$ref": "#/$defs/HitByAttackTriggerData"
        },
        {
          "$ref": "#/$defs/EvadedAttackTriggerData"
        },
        {
          "$ref": "#/$defs/PostAttackTriggerData"
        },
        {
          "$ref": "#/$defs/WasAttackedTriggerData"
        },
        {
          "$ref": "#/$defs/EndOfFightTriggerData"
        },
        {
          "$ref": "#/$defs/PrayerPointUseTriggerData"
        },
        {
          "$ref": "#/$defs/EquipmentChangedTriggerData"
        },
        {
          "$ref": "#/$defs/ParameterChangedTriggerData"
        },
        {
          "$ref": "#/$defs/StatsChangedTriggerData"
        },
        {
          "$ref": "#/$defs/TimerFiredTriggerData"
        },
        {
          "$ref": "#/$defs/EffectAppliedTriggerData"
        },
        {
          "$ref": "#/$defs/EffectReappliedTriggerData"
        },
        {
          "$ref": "#/$defs/EffectRemovedTriggerData"
        }
      ]
    },
    "CombatEffectBehaviourData": {
      "description": "Data used to construct a CombatEffectBehaviour",
      "type": "object",
      "properties": {
        "triggersOn": {
          "description": "Array of triggers that determine when this behaviour is executed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyCombatEffectBehaviourTriggerData"
          }
        },
        "chance": {
          "description": "Optional. Determines the chance that this behaviour is executed when a trigger occurs. Defaults to 100.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "priority": {
          "description": "Optional. Specifies the priority of executing this behaviour. Higher values will be executed before lower values. Defaults to 0",
          "type": "number",
          "default": 0
        }
      },
      "required": [
        "triggersOn"
      ]
    },
    "InterruptTurnBehaviourData": {
      "description": "Data used to construct an InterruptTurnBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat effect behaviour that interrupts the characters turn, resetting their action timer and cancelling any special attacks they were performing",
          "type": "string",
          "const": "InterruptTurn"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ProcessEffectApplicatorBehaviourData": {
      "description": "Data used to construct an ProcessEffectApplicatorBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat effect behaviour that processes an effect applicator via the character the effect is applied to when executed",
          "type": "string",
          "const": "ProcessApplicator"
        },
        "applicator": {
          "description": "Data for an effect Applicator that is processed when the behaviour is executed",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/AnyCombatEffectApplicatorData"
            }
          ],
          "unevaluatedProperties": false
        }
      },
      "required": [
        "type",
        "applicator"
      ],
      "unevaluatedProperties": false
    },
    "RemoveEffectBehaviourData": {
      "description": "Data used to construct a RemoveEffectBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat effect behaviour that removes the effect from the character",
          "type": "string",
          "const": "RemoveEffect"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ModifyBehaviourData": {
      "description": "Data used to construct a ModifyBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "newValue": {
          "description": "The new value to set the existing value to",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "newValue"
      ]
    },
    "ModifyStatsBehaviourData": {
      "description": " Data used to construct a ModifyStatsBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModifyBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that modifies the value of a stat group on the ActiveCombatEffect. This will automatically change the stats given to the character.",
          "type": "string",
          "const": "ModifyStats"
        },
        "statGroupName": {
          "description": "The name of the stat group whose value should be modified",
          "type": "string"
        }
      },
      "required": [
        "type",
        "statGroupName"
      ],
      "unevaluatedProperties": false
    },
    "ModifyParameterBehaviourData": {
      "description": "Data used to construct a ModifyParameterBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModifyBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that modifies the current value of a parameter on the ActiveCombatEffect",
          "type": "string",
          "const": "ModifyParameter"
        },
        "paramName": {
          "description": "The name of the parameter whose current value should be modified",
          "type": "string"
        }
      },
      "required": [
        "type",
        "paramName"
      ],
      "unevaluatedProperties": false
    },
    "DamageCharacterBehaviourData": {
      "description": "Data used to construct a DamageCharacterBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Combat Effect Behaviour that causes damage to the character. Will damage barrier if the appropriate damageType is set.",
          "type": "string",
          "const": "DamageCharacter"
        },
        "value": {
          "description": "The amount of damage to deal to the character",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "damageType": {
          "description": "Optional. Determines the colour of the damage splash, and which lifesteal modifiers from the source character to apply",
          "allOf": [
            {
              "$ref": "#/$defs/DOTType"
            }
          ]
        }
      },
      "required": [
        "type",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "DamageBarrierBehaviourData": {
      "description": "Data used to construct a DamageBarrierBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that damages a character's barrier. Cannot damage hitpoints.",
          "type": "string",
          "const": "DamageBarrier"
        },
        "value": {
          "description": "The amount of damage to deal to the charater's barrier",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "damageType": {
          "description": "Optional. Determines the colour of the damage splash",
          "allOf": [
            {
              "$ref": "#/$defs/DOTType"
            }
          ]
        }
      },
      "required": [
        "type",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "HealCharacterBehaviourData": {
      "description": "Data used to construct a HealCharacterBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that heals the character's hitpoints.",
          "type": "string",
          "const": "HealCharacter"
        },
        "value": {
          "description": "The amount of hitpoints to heal the character",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "HealBarrierBehaviourData": {
      "description": "Data used to construct a HealBarrierBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that heals the character's barrier.",
          "type": "string",
          "const": "HealBarrier"
        },
        "value": {
          "description": "The amount of barrier to add to the character",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "StartTimerBehaviourData": {
      "description": "Data used to construct a StartTimerBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that starts the specified timer on the ActiveCombatEffect",
          "type": "string",
          "const": "StartTimer"
        },
        "timerName": {
          "description": "The name of the timer to start",
          "type": "string"
        },
        "value": {
          "description": "Value of interval to start the timer with in [ms]",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "timerName",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "StopTimerBehaviourData": {
      "description": "Data used to construct a StopTimerBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that stops the specified timer on the ActiveCombatEffect",
          "type": "string",
          "const": "StopTimer"
        },
        "timerName": {
          "description": "The name of the timer to stop",
          "type": "string"
        }
      },
      "required": [
        "type",
        "timerName"
      ],
      "unevaluatedProperties": false
    },
    "UpdatePrayerModifiersBehaviourData": {
      "description": "Data used to construct an UpdatePrayerModifiersBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that updates the current modifier multiplier of the player's Unholy Prayers",
          "type": "string",
          "const": "UpdatePrayerModifiers"
        },
        "updateTo": {
          "description": "The value to set the Unholy Prayer multiplier to",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "ApplyCorruptionBehaviourData": {
      "description": "Data used to construct an ApplyCorruptionBehaviour",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectBehaviourData"
        }
      ],
      "properties": {
        "type": {
          "description": "Defines a Combat Effect Behaviour that applies a random unlocked corruption effect",
          "type": "string",
          "const": "ApplyCorruption"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "AnyCombatEffectBehaviourData": {
      "oneOf": [
        {
          "$ref": "#/$defs/InterruptTurnBehaviourData"
        },
        {
          "$ref": "#/$defs/ProcessEffectApplicatorBehaviourData"
        },
        {
          "$ref": "#/$defs/RemoveEffectBehaviourData"
        },
        {
          "$ref": "#/$defs/ModifyStatsBehaviourData"
        },
        {
          "$ref": "#/$defs/ModifyParameterBehaviourData"
        },
        {
          "$ref": "#/$defs/DamageCharacterBehaviourData"
        },
        {
          "$ref": "#/$defs/DamageBarrierBehaviourData"
        },
        {
          "$ref": "#/$defs/HealCharacterBehaviourData"
        },
        {
          "$ref": "#/$defs/StartTimerBehaviourData"
        },
        {
          "$ref": "#/$defs/StopTimerBehaviourData"
        },
        {
          "$ref": "#/$defs/UpdatePrayerModifiersBehaviourData"
        },
        {
          "$ref": "#/$defs/ApplyCorruptionBehaviourData"
        },
        {
          "$ref": "#/$defs/HealBarrierBehaviourData"
        }
      ]
    },
    "CombatEffectNumberExpression": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "string"
        }
      ]
    },
    "CharacterNumberExpression": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "string"
        }
      ]
    },
    "InitialParamNumberExpression": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "string"
        }
      ]
    },
    "CombatEffectDamageGroupData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the damage group",
          "type": "string"
        },
        "damage": {
          "description": "The damage that will be reduced using the character that applied the effect",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Damage"
          }
        },
        "applyDamageModifiers": {
          "description": "Optional. If damage modifiers from the character that applied the effect should be applied. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "applyTypeModifiers": {
          "description": "Optional. If present, DOTType modifiers will be applied to the calculation of the damage",
          "allOf": [
            {
              "$ref": "#/$defs/DOTType"
            }
          ]
        },
        "applyResistance": {
          "description": "Optional. If damage reduction from the character the effect is applied to should be applied. Uses the source character of the effect to determine damage reduction type.",
          "type": "boolean",
          "default": false
        },
        "damageCap": {
          "description": "Optional. The maximum damage that this damage group can compute to. Applies before resistance, but after damage modifiers. Scaled by hpMultiplier",
          "type": "number",
          "minimum": 0
        }
      },
      "required": [
        "name",
        "damage"
      ],
      "additionalProperties": false
    },
    "CombatEffectStatGroupData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the stat group",
          "type": "string"
        },
        "modifiers": {
          "description": "Optional. Modifiers that can be applied to the character the effect is active on",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. An array of combat effect applicators to merge with the character the effect is active on",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "CombatEffectTTSpanData": {
      "type": "object",
      "properties": {
        "className": {
          "description": "Optional. CSS classes that are added to the span",
          "type": "string"
        },
        "character": {
          "description": "Optional. If present, the character the effect is applied to must be of the given type for the span to display",
          "type": "string",
          "enum": [
            "Player",
            "Enemy"
          ]
        },
        "condition": {
          "description": "Optional. If present, this condition must be met in order for the span to display",
          "allOf": [
            {
              "$ref": "#/$defs/BehaviourTriggerConditionData"
            }
          ]
        }
      }
    },
    "CombatEffectLangTTSpanData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectTTSpanData"
        }
      ],
      "properties": {
        "type": {
          "description": "A tooltip span that displays a lang string. Can be templated.",
          "type": "string",
          "const": "LangString"
        },
        "langID": {
          "description": "ID of the language string to display",
          "type": "string"
        },
        "templateData": {
          "description": "Optional. If present the language string will be templated by the values specified",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          },
          "minProperties": 1
        }
      },
      "required": [
        "type",
        "langID"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectStringTTSpanData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectTTSpanData"
        }
      ],
      "properties": {
        "type": {
          "description": "A tooltip span that displays the string value specified. Can be templated.",
          "type": "string",
          "const": "String"
        },
        "value": {
          "description": "The string to display",
          "type": "string"
        },
        "templateData": {
          "description": "Optional. If present the string will be templated by the values specified. ",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          },
          "minProperties": 1
        }
      },
      "required": [
        "type",
        "value"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectStatsTTSpanData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectTTSpanData"
        }
      ],
      "properties": {
        "type": {
          "description": "A tooltip span that displays the currently applied values of a stat group",
          "type": "string",
          "const": "Stats"
        },
        "statGroupName": {
          "description": "The name of the stat group to display",
          "type": "string"
        }
      },
      "required": [
        "type",
        "statGroupName"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectTurnsTTSpanData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectTTSpanData"
        }
      ],
      "properties": {
        "type": {
          "description": "A tooltip span that displays turns differently based on the type",
          "type": "string",
          "enum": [
            "PlayerTurns",
            "EnemyTurns",
            "Turns",
            "LastsForTurns"
          ]
        },
        "turns": {
          "description": "The value to use for the number of turns left",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "turns"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectStacksWithMaxTTSpanData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectTTSpanData"
        }
      ],
      "properties": {
        "type": {
          "description": "A tooltip span that displays stacks and max stacks",
          "type": "string",
          "const": "StacksWithMax"
        },
        "stacks": {
          "description": "The value to use for the current amount of stacks",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "maxStacks": {
          "description": "The value to use for the maximum number of stacks",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "stacks",
        "maxStacks"
      ],
      "unevaluatedProperties": false
    },
    "AnyCombatEffectTTSpanData": {
      "oneOf": [
        {
          "$ref": "#/$defs/CombatEffectLangTTSpanData"
        },
        {
          "$ref": "#/$defs/CombatEffectStringTTSpanData"
        },
        {
          "$ref": "#/$defs/CombatEffectStatsTTSpanData"
        },
        {
          "$ref": "#/$defs/CombatEffectTurnsTTSpanData"
        },
        {
          "$ref": "#/$defs/CombatEffectStacksWithMaxTTSpanData"
        }
      ]
    },
    "CombatEffectGroupData": {
      "description": "Data used to construct a CombatEffectGroup",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of this effect group for use in modifiers",
          "type": "string"
        },
        "nameLang": {
          "description": "Optional. Language string to use for the name of this effect group",
          "type": "string"
        },
        "adjective": {
          "description": "Adjective describing the state of a character impacted by this effect group (e.g. Burning). Used to generate descriptions.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "adjective"
      ]
    },
    "CombatEffectProgressBarData": {
      "type": "object",
      "properties": {
        "currentValue": {
          "description": "Value to use for the current amount of progress",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "maxValue": {
          "description": "Value to use for the maximum amount of progress",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "barStyle": {
          "description": "CSS class to apply to the progress bar to determine its background colour",
          "type": "string"
        },
        "fullStyles": {
          "description": "CSS classes to apply to the progress bar when it is full",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "currentValue",
        "maxValue",
        "barStyle",
        "fullStyles"
      ]
    },
    "CombatEffectDescriptionTemplateDataData": {
      "type": "object",
      "properties": {
        "initialParameters": {
          "description": "Record of template prefix to a value based on initial parameters. Value can reference the name of a parameter, or an equation composed of parameters",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "$ref": "#/$defs/InitialParamNumberExpression"
            }
          },
          "minProperties": 1
        },
        "statGroups": {
          "description": "Record of template prefix to stat group name. String template data will be generated for each value of modifiers in the group, prefixed by `${prefix}modValue${i}`, where i is the order of the modifier in the group",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string"
            }
          },
          "minProperties": 1
        },
        "damageGroups": {
          "description": "Record of template prefix to damage group name. String template data will be generate for each element of the damage array in the group, prefixed by the key",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string"
            }
          },
          "minProperties": 1
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },
    "BaseCombatEffectData": {
      "description": "Partial Data used to construct a CombatEffect.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the effect to display in the effect's tooltip",
          "type": "string"
        },
        "nameLang": {
          "description": "ID of the language string to use for the name of the effect",
          "type": "string"
        },
        "media": {
          "description": "URI for the icon displayed when the effect is active",
          "type": "string",
          "format": "uri-reference"
        },
        "turnText": {
          "description": "Optional. If present this value will be rendered in the bottom-right corner of the effect's icon.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectNumberExpression"
            }
          ]
        },
        "tooltipSpans": {
          "description": "Defines spans that will be displayed in the tooltip of the effect",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyCombatEffectTTSpanData"
          }
        },
        "tooltipMergeMode": {
          "description": "Optional. Specifies how the tooltipSpans prop will be merged with existing ones from templates. Defaults to Replace.",
          "type": "string",
          "enum": [
            "Replace",
            "Start",
            "End"
          ]
        },
        "progressBar": {
          "description": "Optional. If present this effect will render a progress bar under the character's hitpoints, and a larger progress icon next to the numeric hitpoints",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectProgressBarData"
            }
          ]
        },
        "noIcon": {
          "description": "Optional. If true, this effect will not render an icon when it is active. Defaults to false",
          "type": "boolean",
          "default": false
        },
        "descriptionTemplateData": {
          "description": "Determines the string template data that will be generated from this effect. Used to template special attack descriptions",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectDescriptionTemplateDataData"
            }
          ]
        },
        "target": {
          "description": "Determines the default character the effect should be applied to when an applicator with this effect is processed.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectTarget"
            }
          ]
        },
        "parameters": {
          "description": "Defines parameters for the effect.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the parameter",
                "type": "string"
              },
              "initialValue": {
                "description": "The default initial value of the parameter when an ActiveEffect is constructed",
                "type": "number"
              }
            },
            "required": [
              "name",
              "initialValue"
            ]
          }
        },
        "timers": {
          "description": "Defines timers for the effect. Timers can be used as a trigger for behaviours.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the timer",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "statGroups": {
          "description": "Defines stat groups for the effect. Stat groups can be applied to the character the effect is active on.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectStatGroupData"
          }
        },
        "damageGroups": {
          "description": "Defines damage groups for the effect. Damage groups can be referenced as values in the effect.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectDamageGroupData"
          }
        },
        "behaviours": {
          "description": "Defines behaviours for the effect. Behaviours will be executed in the order of definition, unless the priority property is set.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyCombatEffectBehaviourData"
          }
        },
        "effectGroups": {
          "description": "The IDs of effect groups that this effect belongs to.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectGroupID"
          }
        },
        "exclusiveGroups": {
          "description": "The IDs of effect groups that block the application of this effect if they are present on the character it is being applied to",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectGroupID"
          }
        }
      }
    },
    "CombatEffectTemplateData": {
      "description": "Data used to construct a CombatEffectTemplate",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "description": {
          "description": "Optional. Description with instructions on the use of this template",
          "type": "string"
        },
        "baseTemplates": {
          "description": "Optional. Array of the IDs of templates to base this one on. Each will be merged together, in the order they appear, then the baseEffectData of this template will be merged ontop.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectTemplateID"
          }
        },
        "baseEffectData": {
          "description": "The partial combat effect data that will be inherited by other templates/combat effects",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/BaseCombatEffectData"
            }
          ],
          "unevaluatedProperties": false
        }
      },
      "required": [
        "baseEffectData"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectData": {
      "description": "Data used to construct a CombatEffect",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/BaseCombatEffectData"
        }
      ],
      "required": [
        "name",
        "media",
        "target",
        "behaviours"
      ],
      "unevaluatedProperties": false
    },
    "TemplatedCombatEffectData": {
      "description": "Data for constructing a CombatEffect from a CombatEffectTemplate",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/BaseCombatEffectData"
        }
      ],
      "properties": {
        "templateID": {
          "description": "The ID of the CombatEffectTemplate to inherit data from",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectTemplateID"
            }
          ]
        }
      },
      "required": [
        "templateID"
      ],
      "unevaluatedProperties": false
    },
    "AnyCombatEffectData": {
      "oneOf": [
        {
          "$ref": "#/$defs/CombatEffectData"
        },
        {
          "$ref": "#/$defs/TemplatedCombatEffectData"
        }
      ]
    },
    "CombatEffectTableData": {
      "description": "Data used to construct a CombatEffectTable",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "table": {
          "description": "Weighted array from which a random CombatEffect can be selected from",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "effectID": {
                "description": "The ID of the CombatEffect to select",
                "allOf": [
                  {
                    "$ref": "#/$defs/CombatEffectID"
                  }
                ]
              },
              "initialParams": {
                "description": "Optional. Specifies overrides to the initial values of parameters in the active effect",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              },
              "weight": {
                "description": "The relative weight of selecting this effect",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "effectID",
              "weight"
            ],
            "additionalProperties": false
          }
        }
      },
      "required": [
        "table"
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectApplicationTrigger": {
      "type": "string",
      "enum": [
        "PreAttack",
        "HitByAttack",
        "HitByFirstAttack",
        "HitWithAttack",
        "HitWithFirstAttack",
        "CritWithAttack",
        "PostAttack",
        "PostFirstAttack",
        "StartOfFight",
        "SummonAttack",
        "WasAttacked",
        "Rebirth",
        "BeingAttacked",
        "EvadedAttack"
      ]
    },
    "DamageDealtConditionData": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Defines a condition for a CombatEffectApplicator that depends on the raw damage dealt during application",
          "type": "string",
          "const": "DamageDealt"
        },
        "operator": {
          "description": "Comparison operator to use between the raw damage dealt and the rhValue",
          "allOf": [
            {
              "$ref": "#/$defs/Comparison"
            }
          ]
        },
        "rhValue": {
          "description": "The right-hand value to use in the comparison. The left-hand value is set to the raw damage dealt.",
          "allOf": [
            {
              "$ref": "#/$defs/CharacterNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "operator",
        "rhValue"
      ],
      "additionalProperties": false
    },
    "DamageTakenConditionData": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Defines a condition for a CombatEffectApplicator that depends on the raw damage taken during application",
          "type": "string",
          "const": "DamageTaken"
        },
        "operator": {
          "description": "Comparison operator to use between the raw damage taken and the rhValue",
          "allOf": [
            {
              "$ref": "#/$defs/Comparison"
            }
          ]
        },
        "rhValue": {
          "description": "The right-hand value to use in the comparison. The left-hand value is set to the raw damage taken.",
          "allOf": [
            {
              "$ref": "#/$defs/CharacterNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "operator",
        "rhValue"
      ],
      "additionalProperties": false
    },
    "CharacterNamedValueConditionData": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Defines a condition for a CombatEffectApplicator that depends on values of the character that is processing the applicator",
          "type": "string",
          "const": "CharacterValue"
        },
        "operator": {
          "description": "Comparison operator to use between the left-hand and right-hand values",
          "allOf": [
            {
              "$ref": "#/$defs/Comparison"
            }
          ]
        },
        "lhValue": {
          "description": "The left-hand value to use in the comparison.",
          "allOf": [
            {
              "$ref": "#/$defs/CharacterNumberExpression"
            }
          ]
        },
        "rhValue": {
          "description": "The right-hand value to use in the comparison.",
          "allOf": [
            {
              "$ref": "#/$defs/CharacterNumberExpression"
            }
          ]
        }
      },
      "required": [
        "type",
        "operator",
        "lhValue",
        "rhValue"
      ],
      "additionalProperties": false
    },
    "CombatEffectApplicatorConditionData": {
      "oneOf": [
        {
          "$ref": "#/$defs/DamageDealtConditionData"
        },
        {
          "$ref": "#/$defs/DamageTakenConditionData"
        },
        {
          "$ref": "#/$defs/CharacterNamedValueConditionData"
        },
        {
          "$ref": "#/$defs/CombatConditionData"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Every"
            },
            "conditions": {
              "description": "Array of conditions of which every one must be met",
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatEffectApplicatorConditionData"
              }
            }
          },
          "required": [
            "type",
            "conditions"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Some"
            },
            "conditions": {
              "description": "Array of conditions of which any one must be met",
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatEffectApplicatorConditionData"
              }
            }
          },
          "required": [
            "type",
            "conditions"
          ],
          "additionalProperties": false
        }
      ]
    },
    "CombatEffectApplicatorData": {
      "description": "Data used to construct a CombatEffectApplicator",
      "type": "object",
      "properties": {
        "chance": {
          "description": "Optional. Specifies the chance to apply an effect. Defaults to 100",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        },
        "condition": {
          "description": "Optional. Specifies a condition that must be met for the effect to be applied",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectApplicatorConditionData"
            }
          ]
        },
        "targetOverride": {
          "description": "Optional. If present, the default target for the effect will be replaced with this.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectTarget"
            }
          ]
        },
        "bypassBarrier": {
          "description": "Optional. Determines if the effect can be applied even when the target has barrier, if applying the effect from self to target. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "SingleCombatEffectApplicatorData": {
      "description": "Data used to construct a SingleCombatEffectApplicator",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectApplicatorData"
        }
      ],
      "properties": {
        "effectID": {
          "description": "The ID of the CombatEffect to apply",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectID"
            }
          ]
        },
        "initialParams": {
          "description": "Optional. Specifies overrides to the initial values of parameters in the active effect",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "value"
            ]
          }
        }
      },
      "required": [
        "effectID"
      ]
    },
    "TableCombatEffectApplicatorData": {
      "description": "Data used to construct a TableCombatEffectApplicator",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatEffectApplicatorData"
        }
      ],
      "properties": {
        "tableID": {
          "description": "The ID of the CombatEffectTable to select an applicator from",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectTableID"
            }
          ]
        }
      },
      "required": [
        "tableID"
      ]
    },
    "AnyCombatEffectApplicatorData": {
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/SingleCombatEffectApplicatorData"
        },
        {
          "$ref": "#/$defs/TableCombatEffectApplicatorData"
        }
      ]
    },
    "CombatEffectApplicatorTriggerData": {
      "type": "object",
      "properties": {
        "appliesWhen": {
          "description": "Specifies when an effect should be appled",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectApplicationTrigger"
            }
          ]
        },
        "applyEffectWhenMerged": {
          "description": "Optional. Specifies if the effect should be applied when the applicator is merged. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "customDescription": {
          "description": "Optional. Specifies a string which will be used as the description for this applicator. If set to an empty string, the applicator will have no description.",
          "type": "string"
        },
        "descriptionLang": {
          "description": "Optional. Specifies the ID of a language string which will be used as the description for this applicator",
          "type": "string"
        },
        "isNegative": {
          "description": "Optional. Specifies if this applicator's description should be formatted as negative. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "appliesWhen"
      ]
    },
    "TriggeredCombatEffectApplicatorData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/AnyCombatEffectApplicatorData"
        },
        {
          "$ref": "#/$defs/CombatEffectApplicatorTriggerData"
        }
      ],
      "unevaluatedProperties": false
    },
    "CombatEffectApplicatorModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds a new effect applicator to the combatEffects array. Removals are processed before additions.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          }
        },
        "removeEffect": {
          "description": "IDs of CombatEffects. Removes SingleCombatEffectApplicators that have an effect that matches the ID.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectID"
          }
        },
        "removeTable": {
          "description": "IDs of CombatEffectTables. Removes TableCombatEffectApplicators that have a table that matches the ID.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatEffectTableID"
          }
        }
      },
      "additionalProperties": false
    },
    "AttackData": {
      "description": "Data for constructing a SpecialAttack object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "defaultChance": {
          "description": "The default percentage chance that this attack is chosen",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        },
        "damage": {
          "description": "Array of damage that is reduced to determine the damage dealt per hit of this attack",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageData"
          }
        },
        "prehitEffects": {
          "description": "Effects that are applied before the attack rolls to hit",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/AnyCombatEffectApplicatorData"
              }
            ],
            "unevaluatedProperties": false
          }
        },
        "onhitEffects": {
          "description": "Effects that are applied only when the attack hits",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/$defs/SingleCombatEffectApplicatorData"
              },
              {
                "$ref": "#/$defs/TableCombatEffectApplicatorData"
              }
            ],
            "unevaluatedProperties": false
          }
        },
        "canNormalAttack": {
          "description": "Optional. If true, this attack will be replaced by a normal attack if any of its pre-hit or on-hit effects are active. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "cantMiss": {
          "description": "If the attack cannot miss the target",
          "type": "boolean"
        },
        "attackCount": {
          "description": "The number of times this attack procs",
          "type": "integer",
          "minimum": 1
        },
        "attackInterval": {
          "description": "The interval between attacks in [ms]",
          "type": "integer",
          "multipleOf": 50,
          "minimum": 50
        },
        "lifesteal": {
          "description": "The percentage of damage dealt by this attack that should heal the attacker",
          "type": "number",
          "minimum": 0
        },
        "consumesEffect": {
          "description": "Optional. If present this attack will remove the given effect from the target character, and increase its attack count by the effects paremeter value",
          "type": "object",
          "properties": {
            "effectID": {
              "description": "The ID of the CombatEffect to try and remove",
              "allOf": [
                {
                  "$ref": "#/$defs/CombatEffectID"
                }
              ]
            },
            "paramName": {
              "description": "The name of the parameter to increase the attacks hit count by",
              "type": "string"
            }
          },
          "required": [
            "effectID",
            "paramName"
          ],
          "additionalProperties": false
        },
        "usesRunesPerProc": {
          "description": "Optional. If the attack consumes spell rune costs per proc",
          "type": "boolean",
          "default": false
        },
        "usesPrayerPointsPerProc": {
          "description": "Optional. If the attack consumes prayer points per proc",
          "type": "boolean",
          "default": false
        },
        "usesPotionChargesPerProc": {
          "description": "Optional. If the attack consumes potion charges per proc",
          "type": "boolean",
          "default": false
        },
        "attackTypes": {
          "description": "Optional. If present, limits the combat styles that are allowed to use this special attack to the members of the array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AttackType"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "extraRuneConsumption": {
          "description": "Optional. If present this special attack will require these runes to be used",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RuneQuantity"
          },
          "minItems": 1
        },
        "isDragonbreath": {
          "description": "Optional. f the attack is considered to be dragonbreath. Utilized for modifiers that reduce damage from dragonbreath.",
          "type": "boolean",
          "default": false
        },
        "minAccuracy": {
          "description": "Optional. If present, the attack requires a minimum accuracy rating to always hit. Has no effect if cantMiss is false.",
          "type": "number"
        },
        "name": {
          "description": "The display name of the Attack",
          "type": "string"
        },
        "description": {
          "description": "The displayed description of the attack. Descriptions are automatically templated based on the attacks data.",
          "type": "string"
        },
        "descriptionGenerator": {
          "description": "Optional. A templated string that can be used to auto-generate a templated description string for this attack",
          "type": "string"
        }
      },
      "required": [
        "defaultChance",
        "damage",
        "prehitEffects",
        "onhitEffects",
        "cantMiss",
        "attackCount",
        "attackInterval",
        "lifesteal",
        "name",
        "description"
      ],
      "unevaluatedProperties": false
    },
    "CombatPassiveData": {
      "description": "Data for constructing a CombatPassive object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the Passive",
          "type": "string"
        },
        "modifiers": {
          "description": "Optional. Modifiers that are provided to the enemy by the Passive",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. CombatEffects merged with the enemy by the Passive",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "playerModifiers": {
          "description": "Optional. Modifiers that are provided to the player by the Passive",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "playerCombatEffects": {
          "description": "Optional. CombatEffects merged with the player by the Passive",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "conditionalModifiers": {
          "description": "Optional. Conditional Modifiers provided by the Passive",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConditionalModifierData"
          },
          "minItems": 1
        },
        "customDescription": {
          "description": "Optional. Specifies a custom description that overrides the description automatically generated from modifiers.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "unevaluatedProperties": false
    },
    "MonsterData": {
      "description": "Data for constructing a Monster object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the Monster",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description displayed under the Monster's name",
          "type": "string"
        },
        "media": {
          "description": "URI of the Image of the Monster",
          "type": "string",
          "format": "uri-reference"
        },
        "mediaAnimation": {
          "description": "Optional. URI of an animated image of the Monster",
          "type": "string",
          "format": "uri-reference"
        },
        "levels": {
          "description": "The combat levels of the Monster. Utilized to compute its stats.",
          "type": "object",
          "properties": {
            "Hitpoints": {
              "description": "Hitpoints level. Impacts maximum health.",
              "type": "integer",
              "minimum": 1
            },
            "Attack": {
              "description": "Attack level. Impacts melee accuracy.",
              "type": "integer",
              "minimum": 1
            },
            "Strength": {
              "description": "Strength level. Impacts melee max hit.",
              "type": "integer",
              "minimum": 1
            },
            "Defence": {
              "description": "Defence level. Impacts evasion ratings.",
              "type": "integer",
              "minimum": 1
            },
            "Ranged": {
              "description": "Ranged level. Impacts ranged accuracy and max hit.",
              "type": "integer",
              "minimum": 1
            },
            "Magic": {
              "description": "Magic level. Impacts magic accuracy, max hit and evasion rating",
              "type": "integer",
              "minimum": 1
            },
            "Corruption": {
              "description": "Optional. Corruption level. Allows this monster to use the Corruption mechanic",
              "type": "integer",
              "minimum": 1
            }
          },
          "required": [
            "Hitpoints",
            "Attack",
            "Strength",
            "Defence",
            "Ranged",
            "Magic"
          ],
          "unevaluatedProperties": false
        },
        "equipmentStats": {
          "description": "Equipment stats of the Monster. Used to calculate its stats.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyEquipStatData"
          }
        },
        "ignoreCompletion": {
          "description": "If true, this monster does not count for Completion.",
          "type": "boolean"
        },
        "attackType": {
          "description": "The combat style the monster should use. random specifies the monster chose a random style at the start of combat",
          "anyOf": [
            {
              "$ref": "#/$defs/AttackType"
            },
            {
              "type": "string",
              "const": "random"
            }
          ]
        },
        "specialAttacks": {
          "description": "Array of Special Attack IDs that the monster can use",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SpecialAttackID"
          }
        },
        "overrideSpecialChances": {
          "description": "Optional. If present, overrides the default chances of the special attacks this monster can use. Length must be identical to the length of specialAttacks.",
          "type": "array",
          "items": {
            "type": "number",
            "exclusiveMinimum": 0,
            "maximum": 100
          }
        },
        "combatEffects": {
          "description": "Optional. CombatEffects applied via the enemy at the specified times",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "passives": {
          "description": "Array of Combat Passive IDs that monster has",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          }
        },
        "lootChance": {
          "description": "Percent chance that this monster should drop an item from its loot table.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "lootTable": {
          "description": "Defines the items that should drop from this monster",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          }
        },
        "currencyDrops": {
          "description": "Optional. Defines the currencies that drop from this monster. Currencies always drop.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "currencyID": {
                "description": "The ID of the currency to drop",
                "allOf": [
                  {
                    "$ref": "#/$defs/CurrencyID"
                  }
                ]
              },
              "min": {
                "description": "The minimum amount of the currency to drop",
                "type": "integer",
                "minimum": 0
              },
              "max": {
                "description": "The minimum amount of the currency to drop",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "currencyID",
              "min",
              "max"
            ],
            "unevaluatedProperties": false
          }
        },
        "gpDrops": {
          "description": "Determines how much GP can drop from this monster",
          "type": "object",
          "properties": {
            "min": {
              "type": "integer",
              "minimum": 0
            },
            "max": {
              "type": "integer",
              "minimum": 1
            }
          },
          "deprecated": true,
          "required": [
            "min",
            "max"
          ],
          "unevaluatedProperties": false
        },
        "bones": {
          "description": "Optional. If present, the monster will always drop the specified item, outside of dungeons",
          "type": "object",
          "properties": {
            "itemID": {
              "description": "The id of the item to drop",
              "allOf": [
                {
                  "$ref": "#/$defs/AnyItemID"
                }
              ]
            },
            "quantity": {
              "description": "The quantity of the item to drop",
              "type": "integer",
              "minimum": 1
            }
          },
          "unevaluatedProperties": false
        },
        "canSlayer": {
          "description": "Determines if the monster is Eligible to be a slayer task",
          "type": "boolean"
        },
        "isBoss": {
          "description": "Determines if the monster is a boss",
          "type": "boolean"
        },
        "selectedSpell": {
          "description": "The ID of the Attack Spell this monster uses",
          "allOf": [
            {
              "$ref": "#/$defs/AttackSpellID"
            }
          ]
        },
        "pet": {
          "description": "Optional. Defines a pet that will be dropped upon the specified quantity of monster kills.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The ID of the pet to drop",
              "allOf": [
                {
                  "$ref": "#/$defs/PetID"
                }
              ]
            },
            "quantity": {
              "description": "The number of this monster that must be killed for the pet",
              "type": "integer",
              "minimum": 1
            }
          },
          "required": [
            "id",
            "quantity"
          ],
          "unevaluatedProperties": false
        },
        "barrierPercent": {
          "description": "Optional. If present, the monster starts with Barrier equal to this percent of its max hitpoints.",
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "damageType": {
          "description": "Optional. The ID of the damage type this Monster deals. Defaults to Normal.",
          "anyOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        }
      },
      "required": [
        "name",
        "media",
        "levels",
        "equipmentStats",
        "ignoreCompletion",
        "attackType",
        "specialAttacks",
        "passives",
        "lootChance",
        "lootTable",
        "canSlayer",
        "isBoss",
        "selectedSpell"
      ],
      "unevaluatedProperties": false
    },
    "MonsterModificationData": {
      "description": "Data for modifying a Monster object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the Monster to modify",
          "allOf": [
            {
              "$ref": "#/$defs/MonsterID"
            }
          ]
        },
        "levels": {
          "description": "The combat levels of the Monster. Utilized to compute its stats.",
          "type": "object",
          "properties": {
            "Hitpoints": {
              "description": "Hitpoints level. Impacts maximum health.",
              "type": "integer",
              "minimum": 1
            },
            "Attack": {
              "description": "Attack level. Impacts melee accuracy.",
              "type": "integer",
              "minimum": 1
            },
            "Strength": {
              "description": "Strength level. Impacts melee max hit.",
              "type": "integer",
              "minimum": 1
            },
            "Defence": {
              "description": "Defence level. Impacts evasion ratings.",
              "type": "integer",
              "minimum": 1
            },
            "Ranged": {
              "description": "Ranged level. Impacts ranged accuracy and max hit.",
              "type": "integer",
              "minimum": 1
            },
            "Magic": {
              "description": "Magic level. Impacts magic accuracy, max hit and evasion rating",
              "type": "integer",
              "minimum": 1
            }
          },
          "unevaluatedProperties": false
        },
        "equipmentStats": {
          "description": "Equipment stats of the Monster. Used to calculate its stats.",
          "allOf": [
            {
              "$ref": "#/$defs/EquipStatsModificationData"
            }
          ]
        },
        "attackType": {
          "description": "The combat style the monster should use. random specifies the monster chose a random style at the start of combat",
          "anyOf": [
            {
              "$ref": "#/$defs/AttackType"
            },
            {
              "type": "string",
              "const": "random"
            }
          ]
        },
        "specialAttacks": {
          "description": "Special Attacks that the monster can use",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "attackID": {
                    "$ref": "#/$defs/SpecialAttackID"
                  },
                  "chance": {
                    "description": "Override the default chance of the special attack happening",
                    "type": "number"
                  }
                },
                "required": [
                  "attackID"
                ],
                "unevaluatedProperties": false
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SpecialAttackID"
              }
            }
          }
        },
        "combatEffects": {
          "description": "Optional. CombatEffects applied via the enemy at the specified times",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectApplicatorModificationData"
            }
          ]
        },
        "passives": {
          "description": "Array of Combat Passive IDs that monster has",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatPassiveID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatPassiveID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "lootChance": {
          "description": "Percent chance that this monster should drop an item from its loot table.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "lootTable": {
          "description": "Defines the items that should drop from this monster",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/DropTableData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "currencyDrops": {
          "description": "Modifies the currencies that drop from this monster",
          "type": "object",
          "properties": {
            "add": {
              "description": "If the currency already drops from the monster, adjusts the min and max properties. Otherwise adds a new currency drop. Processed after remove.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "currencyID": {
                    "description": "The ID of the currency to drop",
                    "allOf": [
                      {
                        "$ref": "#/$defs/CurrencyID"
                      }
                    ]
                  },
                  "min": {
                    "description": "The minimum amount of the currency to drop",
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": {
                    "description": "The minimum amount of the currency to drop",
                    "type": "integer",
                    "minimum": 1
                  }
                },
                "required": [
                  "currencyID"
                ],
                "unevaluatedProperties": false
              }
            },
            "remove": {
              "description": "Removes currency drops from the monster that match the IDs in the array",
              "type": "array",
              "items": {
                "$ref": "#/$defs/CurrencyID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "gpDrops": {
          "description": "Determines how much GP can drop from this monster",
          "type": "object",
          "properties": {
            "min": {
              "type": "integer",
              "minimum": 0
            },
            "max": {
              "type": "integer",
              "minimum": 1
            }
          },
          "unevaluatedProperties": false,
          "deprecated": true
        },
        "bones": {
          "description": "The monster will always drop the specified item, outside of dungeons",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "itemID": {
              "description": "The id of the item to drop",
              "allOf": [
                {
                  "$ref": "#/$defs/AnyItemID"
                }
              ]
            },
            "quantity": {
              "description": "The quantity of the item to drop",
              "type": "integer",
              "minimum": 1
            }
          },
          "required": [
            "itemID",
            "quantity"
          ],
          "unevaluatedProperties": false
        },
        "canSlayer": {
          "description": "Determines if the monster is Eligible to be a slayer task",
          "type": "boolean"
        },
        "isBoss": {
          "description": "Determines if the monster is a boss",
          "type": "boolean"
        },
        "selectedSpell": {
          "description": "The ID of the Standard Magic Spell this monster uses",
          "allOf": [
            {
              "$ref": "#/$defs/AttackSpellID"
            }
          ]
        },
        "pet": {
          "description": "Defines a pet that will be dropped upon the specified quantity of monster kills.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "id": {
              "description": "The ID of the pet to drop",
              "allOf": [
                {
                  "$ref": "#/$defs/PetID"
                }
              ]
            },
            "quantity": {
              "description": "The number of this monster that must be killed for the pet",
              "type": "integer",
              "minimum": 1
            }
          },
          "required": [
            "id",
            "quantity"
          ],
          "unevaluatedProperties": false
        }
      },
      "required": [
        "id"
      ],
      "unevaluatedProperties": false
    },
    "CombatAreaCategoryData": {
      "description": "Data for constructing a CombatAreaCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the category",
          "type": "string"
        },
        "media": {
          "description": "A URI for the category's image",
          "type": "string",
          "format": "uri-reference"
        },
        "areas": {
          "description": "The IDs of the CombatAreas that belong to this category",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatAreaID"
          }
        }
      },
      "required": [
        "name",
        "media",
        "areas"
      ],
      "unevaluatedProperties": false
    },
    "CombatAreaCategoryModificationData": {
      "description": "Data for modifying a CombatAreaCategory object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the CombatAreaCategory to modify",
          "allOf": [
            {
              "$ref": "#/$defs/CombatAreaCategoryID"
            }
          ]
        },
        "areas": {
          "description": "Modifies the CombatAreas that belong to the category",
          "type": "object",
          "properties": {
            "add": {
              "description": "Adds new CombatAreas to the category in the order defined. Performed after remove.",
              "type": "array",
              "items": {
                "$ref": "#/$defs/InsertOrder"
              }
            },
            "remove": {
              "description": "Removes the CombatAreas from the area with the IDs in this array. Performed before add.",
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatAreaID"
              }
            }
          },
          "unevaluatedProperties": false
        }
      },
      "unevaluatedProperties": false
    },
    "CombatAreaData": {
      "description": "Data for constructing a CombatArea object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the area",
          "type": "string"
        },
        "media": {
          "description": "A URI for the area's image",
          "type": "string",
          "format": "uri-reference"
        },
        "monsterIDs": {
          "description": "An array of Monster IDs that can be fought in the area",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterID"
          },
          "minItems": 1
        },
        "difficulty": {
          "description": "Determines the difficulty badges that display on the area. A single entry will show only that badge, while 2 will show a range of difficulty between the two entries.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 15
          },
          "minItems": 1,
          "maxItems": 2
        },
        "entryRequirements": {
          "description": "An array of requirements that the player must meet to enter the area",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "gamemodeEntryRequirements": {
          "description": "Optional. Additional array of requirements that the player must meet to enter the area for specific gamemodes",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "gamemodeID": {
                "description": "The ID of the gamemode to roll for",
                "allOf": [
                  {
                    "$ref": "#/$defs/GamemodeID"
                  }
                ]
              },
              "entryRequirements": {
                "description": "An array of requirements that the player must meet to enter the area",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/AnyRequirementData"
                }
              }
            },
            "required": [
              "gamemodeID",
              "entryRequirements"
            ]
          }
        },
        "combatTriangleSet": {
          "description": "The ID of the combat triangle set to use while in this area. Defaults to Normal.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatTriangleSetID"
            }
          ]
        },
        "allowedDamageTypeIDs": {
          "description": "Optional. Sets damage types that the player is allowed to use in this area. Unset allows all damage types",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "overrideDamageType": {
          "description": "Optional. If set, this will override the damage types of all Monsters in the area with the set damage type.",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        },
        "allowedGamemodeIDs": {
          "description": "Optional. Set which gamemode IDs this area will display for. If empty, it will show for all gamemodes.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GamemodeID"
          }
        }
      },
      "required": [
        "name",
        "media",
        "monsterIDs",
        "difficulty",
        "entryRequirements"
      ]
    },
    "CombatAreaModificationData": {
      "description": "Data for modifying a CombatArea object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "monsters": {
          "description": "An array of Monster IDs that can be fought in the area",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "monsterID": {
                    "$ref": "#/$defs/MonsterID"
                  },
                  "insertAt": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "required": [
                  "monsterID"
                ],
                "unevaluatedProperties": false
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "monsterID": {
                    "$ref": "#/$defs/MonsterID"
                  },
                  "removeAt": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "required": [
                  "monsterID"
                ],
                "unevaluatedProperties": false
              }
            }
          },
          "unevaluatedProperties": false
        },
        "difficulty": {
          "description": "Determines the difficulty badges that display on the area. A single entry will show only that badge, while 2 will show a range of difficulty between the two entries.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 15
          },
          "minItems": 1,
          "maxItems": 2
        },
        "entryRequirements": {
          "description": "An array of requirements that the player must meet to enter the area",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "gamemodeEntryRequirements": {
          "description": "An array of requirements that the player must meet to enter the area for specific gamemodes.",
          "type": "object",
          "properties": {
            "gamemodeID": {
              "description": "The ID of the gamemode.",
              "allOf": [
                {
                  "$ref": "#/$defs/GamemodeID"
                }
              ]
            },
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "gamemodeID"
          ],
          "unevaluatedProperties": false
        },
        "allowedDamageTypeIDs": {
          "description": "An array of damage types that the player can use in the area",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/DamageTypeID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/DamageTypeID"
              }
            }
          }
        }
      }
    },
    "SlayerAreaData": {
      "description": "Data for constructing a SlayerArea object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatAreaData"
        }
      ],
      "properties": {
        "areaEffectDescription": {
          "description": "Describes the slayer area's effect. Templated by",
          "type": "string"
        },
        "areaEffect": {
          "description": "Optional. If present the area will provide the given modifiers/effect applicators to the player or enemy",
          "allOf": [
            {
              "$ref": "#/$defs/CombatAreaEffectData"
            }
          ]
        },
        "pet": {
          "description": "Optional. If present, killing monsters in the area has a chance to drop a pet",
          "allOf": [
            {
              "$ref": "#/$defs/PetChanceData"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "SlayerAreaModificationData": {
      "description": "Data for modifying a SlayerArea object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatAreaModificationData"
        }
      ],
      "properties": {
        "areaEffectDescription": {
          "description": "Describes the slayer area's effect. Set to null to clear the area's description.",
          "type": [
            "string",
            "null"
          ]
        },
        "areaEffect": {
          "description": "If present the area will provide the given modifiers/applicator to the player or enemy. Set to null to clear the area's effect.",
          "oneOf": [
            {
              "$ref": "#/$defs/CombatAreaEffectData"
            },
            {
              "type": "null"
            }
          ]
        },
        "pet": {
          "description": "Killing monsters in the area has a chance to drop a pet. Set to null to remove the pet drop.",
          "oneOf": [
            {
              "$ref": "#/$defs/PetChanceData"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "DungeonData": {
      "description": "Data for constructing a Dungeon object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatAreaData"
        }
      ],
      "properties": {
        "rewardItemIDs": {
          "description": "An array of item IDs that will be rewarded when the dungeon is completed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "oneTimeRewardID": {
          "description": "Optional. If present this item will be rewarded upon the first completion of the dungeon",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "dropBones": {
          "description": "If Monsters inside this dungeon should be allowed to drop their bone items",
          "type": "boolean"
        },
        "floors": {
          "description": "Optional. If present the dungeon's progres will visually display as completing different floors. Each element represents the number of monsters per floor.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          },
          "minItems": 1
        },
        "eventID": {
          "description": "Optional. ID of a Combat Event. If present, this dungeon will instead start the corresponding Combat Event instead of the standard behaviour.",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEventID"
            }
          ]
        },
        "unlockRequirement": {
          "description": "Optional. If present, this dungeon will require the requirements specified to be met first before it can be accessed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          },
          "minItems": 1
        },
        "pet": {
          "description": "Optional. Adds a Pet that is rolled for upon completing the dungeon",
          "allOf": [
            {
              "$ref": "#/$defs/PetChanceData"
            }
          ]
        },
        "fixedPetClears": {
          "description": "If true, the dungeons pet will be awarded when the dungeon has been completed a number of times equal to the weight property of the pet property, instead of rolling randomly",
          "type": "boolean"
        },
        "pauseOnBosses": {
          "description": "If combat should pause before each Boss monster in the dungeon",
          "type": "boolean"
        },
        "nonBossPassives": {
          "description": "Optional. If present the Combat Passives with the IDs given will be given to all non-boss monsters in the dungeon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "bossOnlyPassives": {
          "description": "Optional. If present the Combat Passives with the IDs given will be given to all isBoss = true monsters in the dungeon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "gamemodeRewardItemIDs": {
          "description": "Optional. An array of item IDs that will be rewarded when the dungeon is completed for the respective gamemode",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GamemodeRewardItemIDData"
          }
        },
        "showUnlockRequirements": {
          "description": "Optional. Whether to show the unlock requirements of the dungeon. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "hideIfLocked": {
          "description": "Optional. Whether to hide the dungeon element if it is locked. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "rewardItemIDs",
        "dropBones",
        "fixedPetClears",
        "pauseOnBosses"
      ],
      "unevaluatedProperties": false
    },
    "DungeonModificationData": {
      "description": "Data for modifying a Dungeon object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatAreaModificationData"
        }
      ],
      "properties": {
        "rewardItemIDs": {
          "description": "An array of item IDs that will be rewarded when the dungeon is completed",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "oneTimeRewardID": {
          "description": "This item will be rewarded upon the first completion of the dungeon. Set to null to remove the one time reward.",
          "oneOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            },
            {
              "type": "null"
            }
          ]
        },
        "dropBones": {
          "description": "If Monsters inside this dungeon should be allowed to drop their bone items",
          "type": "boolean"
        },
        "floors": {
          "description": "The dungeon's progres will visually display as completing different floors. Each element represents the number of monsters per floor. Set to null to remove the floors.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          },
          "minItems": 1
        },
        "eventID": {
          "description": "ID of a Combat Event. If present, this dungeon will instead start the corresponding Combat Event instead of the standard behaviour. Set to null to unassociate the dungeon from events.",
          "oneOf": [
            {
              "$ref": "#/$defs/CombatEventID"
            },
            {
              "type": "null"
            }
          ]
        },
        "unlockRequirement": {
          "description": "This dungeon will require the requirements specified to be completed first before it can be accessed",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "entryRequirements": {
          "description": "An array of requirements that the player must meet to enter the area",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "pet": {
          "description": "Determines the Pet that is rolled for upon completing the dungeon",
          "allOf": [
            {
              "$ref": "#/$defs/PetChanceData"
            }
          ]
        },
        "fixedPetClears": {
          "description": "If true, the dungeons pet will be awarded when the dungeon has been completed a number of times equal to the weight property of the pet property, instead of rolling randomly",
          "type": "boolean"
        },
        "pauseOnBosses": {
          "description": "If combat should pause before each Boss monster in the dungeon",
          "type": "boolean"
        },
        "nonBossPassives": {
          "description": "Add or remove Combat Passives by ID to be given to all non-boss monsters in the dungeon",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatPassiveID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CombatPassiveID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "gamemodeRewardItemIDs": {
          "description": "An array of item IDs that will be rewarded when the dungeon is completed for the specified gamemode",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/GamemodeRewardItemIDData"
              }
            }
          },
          "unevaluatedProperties": false
        }
      },
      "unevaluatedProperties": false
    },
    "StrongholdTierData": {
      "type": "object",
      "properties": {
        "requiredItems": {
          "description": "Items the player must have equipped to fight this tier of stronghold",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          }
        },
        "passives": {
          "description": "Passives given to the enemies for this tier of stronghold",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          }
        },
        "rewards": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsBase"
            }
          ],
          "properties": {
            "chance": {
              "description": "The chance to give rewards upon completing the stronghold",
              "type": "number",
              "minimum": 0,
              "maximum": 100
            }
          },
          "required": [
            "chance"
          ],
          "unevaluatedProperties": false
        }
      },
      "required": [
        "requiredItems",
        "passives",
        "rewards"
      ],
      "additionalProperties": false
    },
    "StrongholdData": {
      "description": "Data for constructing a Stronghold object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatAreaData"
        }
      ],
      "properties": {
        "tiers": {
          "type": "object",
          "properties": {
            "Standard": {
              "description": "Determines the requirements and rewards for the normal version of this stronghold",
              "allOf": [
                {
                  "$ref": "#/$defs/StrongholdTierData"
                }
              ]
            },
            "Augmented": {
              "description": "Determines the requirements and rewards for the augmented version of this stronghold",
              "allOf": [
                {
                  "$ref": "#/$defs/StrongholdTierData"
                }
              ]
            },
            "Superior": {
              "description": "Determines the requirements and rewards for the superior version of this stronghold",
              "allOf": [
                {
                  "$ref": "#/$defs/StrongholdTierData"
                }
              ]
            }
          },
          "required": [
            "Standard",
            "Augmented",
            "Superior"
          ]
        },
        "pet": {
          "description": "Optional. Defines a pet that can drop on Stronghold completion",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/PetChanceData"
            }
          ],
          "properties": {
            "fixedClears": {
              "description": "Optional. Specifies if this pet should be rewarded when the number of stronghold clears reaches weight instead of by chance. Defaults to false.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "bossOnlyPassives": {
          "description": "Optional. If present the Combat Passives with the IDs given will be given to all isBoss = true monsters in the stronghold",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "tiers"
      ]
    },
    "CombatEventData": {
      "description": "Data for constructing a CombatEvent object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "itemRewardIDs": {
          "description": "The IDs of the items that are rewarded at the end of a stage of the event",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 5,
          "maxItems": 5
        },
        "petID": {
          "description": "The ID of the pet rewarded upon completion of the event",
          "allOf": [
            {
              "$ref": "#/$defs/PetID"
            }
          ]
        },
        "slayerAreaIDs": {
          "description": "The IDs of the slayer areas that must be completed each stage of the event",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ValidID"
          },
          "minItems": 1
        },
        "passiveSelectionIDs": {
          "description": "The IDs of the combat passives that the player can select from between stages of the event",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          },
          "minItems": 8
        },
        "enemyPassives": {
          "description": "The IDs of the combat passives that are given to the monsters in the Slayer Areas during the event. Does not apply to the first/final boss monster of this event",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          }
        },
        "bossPassives": {
          "description": "The IDs of the combat passives that are given to the last monster from the Slayer Area during the event. Does not apply to the first/final boss monster of this event",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          }
        },
        "firstBossMonster": {
          "description": "The ID of the monster that serves as the boss for the first 4 stages of the event",
          "allOf": [
            {
              "$ref": "#/$defs/MonsterID"
            }
          ]
        },
        "finalBossMonster": {
          "description": "The ID of the monster that serves as the boss for 5th and last stage of the event",
          "allOf": [
            {
              "$ref": "#/$defs/MonsterID"
            }
          ]
        }
      },
      "required": [
        "itemRewardIDs",
        "petID",
        "slayerAreaIDs",
        "passiveSelectionIDs",
        "enemyPassives",
        "bossPassives",
        "firstBossMonster",
        "finalBossMonster"
      ],
      "unevaluatedProperties": false
    },
    "ObjectsToInsert": {
      "description": "The IDs of the objects to insert",
      "type": "array",
      "items": {
        "$ref": "#/$defs/ValidID"
      },
      "minItems": 1
    },
    "InsertStart": {
      "description": "Inserts objects at the start of the order",
      "type": "object",
      "properties": {
        "insertAt": {
          "type": "string",
          "const": "Start"
        },
        "ids": {
          "$ref": "#/$defs/ObjectsToInsert"
        }
      },
      "required": [
        "insertAt",
        "ids"
      ],
      "unevaluatedProperties": false
    },
    "InsertEnd": {
      "description": "Inserts objects at the end of the order",
      "type": "object",
      "properties": {
        "insertAt": {
          "type": "string",
          "const": "End"
        },
        "ids": {
          "$ref": "#/$defs/ObjectsToInsert"
        }
      },
      "required": [
        "insertAt",
        "ids"
      ],
      "unevaluatedProperties": false
    },
    "InsertBefore": {
      "description": "Inserts objects before the specified object",
      "type": "object",
      "properties": {
        "insertAt": {
          "type": "string",
          "const": "Before"
        },
        "beforeID": {
          "description": "The ID of the object to insert items before",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "ids": {
          "$ref": "#/$defs/ObjectsToInsert"
        }
      },
      "required": [
        "insertAt",
        "beforeID",
        "ids"
      ],
      "unevaluatedProperties": false
    },
    "InsertAfter": {
      "description": "Inserts objects after the specified object",
      "type": "object",
      "properties": {
        "insertAt": {
          "type": "string",
          "const": "After"
        },
        "afterID": {
          "description": "The ID of the object to insert items after",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "ids": {
          "$ref": "#/$defs/ObjectsToInsert"
        }
      },
      "required": [
        "insertAt",
        "afterID",
        "ids"
      ],
      "unevaluatedProperties": false
    },
    "InsertOrder": {
      "oneOf": [
        {
          "$ref": "#/$defs/InsertStart"
        },
        {
          "$ref": "#/$defs/InsertEnd"
        },
        {
          "$ref": "#/$defs/InsertBefore"
        },
        {
          "$ref": "#/$defs/InsertAfter"
        }
      ]
    },
    "CombatLevelSlayerTaskMonsterSelection": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "CombatLevel"
        },
        "minLevel": {
          "description": "The minimum monster combat level to select from",
          "type": "integer",
          "minimum": 1
        },
        "maxLevel": {
          "description": "Optional. The maximum monster combat level to select from. If unset, the combat level is uncapped",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "minLevel"
      ],
      "additionalProperties": false
    },
    "AbyssSlayerTaskMonsterSelectionData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Abyss"
        },
        "areaID": {
          "description": "The ID of the Abyss Area to select monsters from",
          "allOf": [
            {
              "$ref": "#/$defs/AbyssDepthID"
            }
          ]
        }
      },
      "required": [
        "type",
        "areaID"
      ],
      "additionalProperties": false
    },
    "AnySlayerTaskMonsterSelectionData": {
      "oneOf": [
        {
          "$ref": "#/$defs/CombatLevelSlayerTaskMonsterSelection"
        },
        {
          "$ref": "#/$defs/AbyssSlayerTaskMonsterSelectionData"
        }
      ]
    },
    "SlayerTaskCategoryData": {
      "description": "Data for constructing a SlayerTaskCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the category",
          "type": "string"
        },
        "reqToast": {
          "description": "The error message displayed when attempting to perform an action that requires task completions in this category",
          "type": "string"
        },
        "reqText": {
          "description": "The requires text to display for requirements that require task completions in this category",
          "type": "string"
        },
        "unlockText": {
          "description": "The unlock text to display for requirements that require task completions in this category",
          "type": "string"
        },
        "completionText": {
          "description": "The text to display in the offline modal for completing a task in this category",
          "type": "string"
        },
        "rollCost": {
          "description": "The currency costs to reroll or select a task in this category",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "extensionCost": {
          "description": "The currency costs to extend a task in this category",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "extensionMultiplier": {
          "description": "Multiplier to the number of monsters given on task extension",
          "type": "integer",
          "minimum": 1
        },
        "level": {
          "description": "The Slayer level required to select a task in this category",
          "type": "integer",
          "minimum": 0
        },
        "abyssalLevel": {
          "description": "Optional. The Abyssal Slayer Level required to select a task in this category. Also flags this category as abyssal",
          "type": "integer",
          "minimum": 0
        },
        "currencyRewards": {
          "description": "Defines the currencies awarded upon killing a monster from this category.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the currency to award",
                "allOf": [
                  {
                    "$ref": "#/$defs/CurrencyID"
                  }
                ]
              },
              "percent": {
                "description": "The percent of the enemies max hitpoints (in Standard Game mode) to award",
                "type": "number",
                "exclusiveMinimum": 0
              }
            },
            "required": [
              "id",
              "percent"
            ],
            "additionalProperties": false
          }
        },
        "monsterSelection": {
          "description": "Determines the monsters that can be selected for this category",
          "allOf": [
            {
              "$ref": "#/$defs/AnySlayerTaskMonsterSelectionData"
            }
          ]
        },
        "baseTaskLength": {
          "description": "Determines the base quantity of monsters that must be killed in a task",
          "type": "integer",
          "minimum": 1
        },
        "previousCategory": {
          "description": "Optional. The ID of the category previous to this one. Used to count the number of tasks completions for this category and below.",
          "allOf": [
            {
              "$ref": "#/$defs/SlayerTaskCategoryID"
            }
          ]
        }
      },
      "required": [
        "name",
        "reqToast",
        "reqText",
        "unlockText",
        "completionText",
        "rollCost",
        "extensionCost",
        "extensionMultiplier",
        "level",
        "currencyRewards",
        "monsterSelection",
        "baseTaskLength"
      ],
      "unevaluatedProperties": false
    },
    "PrayerData": {
      "description": "Data for constructing a ActivePrayer object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "level": {
          "description": "The Prayer level required to use the prayer",
          "type": "integer",
          "minimum": 1
        },
        "name": {
          "description": "The display name of the prayer",
          "type": "string"
        },
        "media": {
          "description": "A URI for the prayer's image",
          "type": "string",
          "format": "uri-reference"
        },
        "pointsPerPlayer": {
          "description": "The base number of prayer points to use when the Player makes an attack",
          "type": "integer",
          "minimum": 0
        },
        "pointsPerEnemy": {
          "description": "The base number of prayer points to use when the Enemy makes an attack",
          "type": "integer",
          "minimum": 0
        },
        "pointsPerRegen": {
          "description": "The base number of prayer points to use when the Player regenerates hitpoints",
          "type": "integer",
          "minimum": 0
        },
        "isUnholy": {
          "description": "Optional. Flags this prayer as Unholy, augmenting it from default mechanics. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "isAbyssal": {
          "description": "Optional. Flags this prayer as Abyssal, using Soul Points instead of Prayer Points. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "abyssalLevel": {
          "description": "Optional. The Prayer Abyssal level required to use the prayer",
          "type": "integer",
          "minimum": 1
        },
        "allowedDamageTypeIDs": {
          "description": "Optional. The IDs of Damage Types this prayer can be used with. Unset means it can be used with all damage types.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "level",
        "name",
        "media",
        "pointsPerPlayer",
        "pointsPerEnemy",
        "pointsPerRegen"
      ],
      "unevaluatedProperties": false
    },
    "BaseSpellData": {
      "description": "Data for constructing a BaseSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the spell",
          "type": "string"
        },
        "media": {
          "description": "URI for the spell's image",
          "type": "string",
          "format": "uri-reference"
        },
        "level": {
          "description": "The Magic level required to use the spell",
          "type": "integer",
          "minimum": 1
        },
        "runesRequired": {
          "description": "The base rune costs required to cast the spell",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RuneQuantity"
          }
        },
        "runesRequiredAlt": {
          "description": "Optional. Specifies the rune costs for the spell when using combination runes. If unset, the runesRequired property will be used",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RuneQuantity"
          }
        },
        "abyssalLevel": {
          "description": "Optional. The Abyssal Magic Level required to use the spell. Defaults to 0",
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "categories": {
          "description": "Optional. The ids of spell categories the spell belongs to",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SpellCategoryID"
          },
          "uniqueItems": true
        }
      },
      "required": [
        "name",
        "media",
        "level",
        "runesRequired"
      ]
    },
    "BaseSpellModificationData": {
      "description": "Data for modifying a BaseSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "level": {
          "description": "Optional. Changes the Magic level required to use the spell",
          "type": "integer",
          "minimum": 1
        },
        "runesRequired": {
          "description": "Optional. Adds/Removes rune costs required to cast the spell",
          "allOf": [
            {
              "$ref": "#/$defs/RuneQuantitiesModificationData"
            }
          ]
        },
        "runesRequiredAlt": {
          "description": "Optional. Adds/Removes rune costs for the spell when using combination runes",
          "allOf": [
            {
              "$ref": "#/$defs/RuneQuantitiesModificationData"
            }
          ]
        },
        "abyssalLevel": {
          "description": "Optional. Set the Abyssal Magic Level required to use the spell.",
          "type": "integer",
          "minimum": 0
        },
        "categories": {
          "description": "Optional. Add/Removes categories the spell belongs to",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SpellCategoryID"
              },
              "uniqueItems": true
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SpellCategoryID"
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      }
    },
    "CombatSpellData": {
      "description": "Data for constructing a CombatSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSpellData"
        }
      ],
      "properties": {
        "requiredItemID": {
          "description": "Optional. If present, the player must have the specified EquipmentItem equipped to use the spell",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentItemID"
            }
          ]
        },
        "requirements": {
          "description": "Requirements the player must meet to use this spell",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "allowedDamageTypeIDs": {
          "description": "Optional. The IDs of Damage Types this spell can be used with. Unset means it can be used with all damage types.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      }
    },
    "AttackSpellbookData": {
      "description": "Data for constructing an AttackSpellbook object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the spellbook",
          "type": "string"
        },
        "nameLang": {
          "description": "Optional. Language string ID to use for the name property",
          "type": "string"
        },
        "media": {
          "description": "URI of the spellbooks icon",
          "type": "string",
          "format": "uri-reference"
        },
        "spellNameLangPrefix": {
          "description": "Optional. Prefix used for the language string IDs of spell names in this book",
          "type": "string"
        },
        "allowCurses": {
          "description": "Optional. If Curse spells can be used alongside spells from this book. Defaults to true",
          "type": "boolean",
          "default": true
        },
        "allowAuroras": {
          "description": "Optional. If Aurora spells can be used alongside spells from this book. Defaults to true",
          "type": "boolean",
          "default": true
        },
        "allowDamageModifiers": {
          "description": "Optional. If the max hit from this spell can benefit from damage modifiers. Defaults to true",
          "type": "boolean",
          "default": true
        },
        "allowSpecialAttacks": {
          "description": "Optional. If special attacks can be used with spells from this book. Defaults to true",
          "type": "boolean",
          "default": true
        },
        "allowedDamageTypeIDs": {
          "description": "Optional. If present, spells from this book will only be allowed to be used with the given damage types",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeID"
          },
          "minItems": 1
        }
      },
      "required": [
        "name",
        "media"
      ],
      "unevaluatedProperties": false
    },
    "AttackSpellData": {
      "description": "Data for constructing an AttackSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatSpellData"
        }
      ],
      "properties": {
        "maxHit": {
          "description": "Optional. The base maximum hit used to calculate the player's max hit. 1/10th of the desired damage in Standard mode. Defaults to 0",
          "type": "number",
          "multipleOf": 0.1,
          "default": 0
        },
        "specialAttackID": {
          "description": "Optional. The ID of a special attack. If present, the player's special attack list will be replaced with this attack when using this spell.",
          "allOf": [
            {
              "$ref": "#/$defs/SpecialAttackID"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. Combat effect applicators that will be merged with the player when using the spell",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          }
        },
        "spellbook": {
          "description": "The ID of the spellbook this spell belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/AttackSpellbookID"
            }
          ]
        }
      },
      "required": [
        "spellbook"
      ],
      "unevaluatedProperties": false
    },
    "OldAttackSpellData": {
      "description": "Data for constructing an AttackSpell object with a predefined spellbook",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/AttackSpellData"
        }
      ],
      "unevaluatedProperties": false
    },
    "CurseSpellData": {
      "description": "Data for constructing a CurseSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatSpellData"
        }
      ],
      "properties": {
        "effectID": {
          "description": "The ID of the CombatEffect that is applied when the curse is cast",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectID"
            }
          ]
        }
      },
      "required": [
        "effectID"
      ],
      "unevaluatedProperties": false
    },
    "AuroraSpellData": {
      "description": "Data for constructing a AuroraSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CombatSpellData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "unevaluatedProperties": false
    },
    "AltMagicProduction": {
      "type": "string",
      "enum": [
        "GP",
        "Bar",
        "RandomGem",
        "RandomSuperiorGem",
        "PerfectFood",
        "RandomShards",
        "MagicXP",
        "AbyssalMagicXP"
      ]
    },
    "AltMagicSpellData": {
      "description": "Data for constructing a AltMagicSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSpellData"
        },
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "description": {
          "description": "The displayed description for the spell. Automatically templated.",
          "type": "string"
        },
        "baseExperience": {
          "description": "The base experience earned per cast of the spell",
          "type": "integer",
          "minimum": 0
        },
        "baseAbyssalExperience": {
          "description": "Optional. The base abyssal experience earned per cast of the spell",
          "type": "integer",
          "minimum": 0
        },
        "abyssalLevel": {
          "description": "Optional. The abyssal level required",
          "type": "integer",
          "minimum": 1
        },
        "fixedItemCosts": {
          "description": "Optional. Defines item costs for the spell that do not change",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        },
        "specialCost": {
          "description": "Defines the special costs for the spell.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The types of item(s) that should be consumed",
              "type": "string",
              "enum": [
                "AnyItem",
                "JunkItem",
                "BarIngredientsWithCoal",
                "BarIngredientsWithoutCoal",
                "None",
                "AnySuperiorGem",
                "AnyNormalFood"
              ]
            },
            "currency": {
              "description": "Optional. If present, only items that sell for this currency can be consumed",
              "allOf": [
                {
                  "$ref": "#/$defs/CurrencyID"
                }
              ]
            },
            "quantity": {
              "description": "The quantity of the item(s) that should be consumed",
              "type": "integer",
              "minimum": 1
            }
          },
          "required": [
            "type",
            "quantity"
          ],
          "unevaluatedProperties": false
        },
        "produces": {
          "description": "Defines what the spell produces. Can either be a special production, or a set itemID.",
          "oneOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            },
            {
              "$ref": "#/$defs/AltMagicProduction"
            }
          ]
        },
        "productionRatio": {
          "description": "Determines the quantity of resources produces by the spell. Effect depends on the produces property.",
          "type": "number"
        }
      },
      "required": [
        "description",
        "baseExperience",
        "specialCost",
        "produces",
        "productionRatio"
      ],
      "unevaluatedProperties": false
    },
    "AltMagicSpellModificationData": {
      "description": "Data for modifying an AltMagicSpell object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSpellModificationData"
        }
      ],
      "properties": {
        "baseExperience": {
          "description": "Optional. Changes the base experience earned per cast of the spell",
          "type": "integer",
          "minimum": 0
        },
        "baseAbyssalExperience": {
          "description": "Optional. Changes the base abyssal experience earned per cast of the spell",
          "type": "integer",
          "minimum": 0
        },
        "fixedItemCosts": {
          "description": "Optional. Adds/Removes item costs for the spell that do not change",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantitiesModificationData"
            }
          ]
        },
        "specialCost": {
          "description": "Optional. Modifies the special costs for the spell.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Optional. Changes the type of item(s) that should be consumed",
              "type": "string",
              "enum": [
                "AnyItem",
                "JunkItem",
                "BarIngredientsWithCoal",
                "BarIngredientsWithoutCoal",
                "None",
                "AnySuperiorGem",
                "AnyNormalFood"
              ]
            },
            "currency": {
              "description": "Optional. Sets the currency that items must sell for in order to be consumed",
              "allOf": [
                {
                  "$ref": "#/$defs/CurrencyID"
                }
              ]
            },
            "quantity": {
              "description": "Optional. Changes the quantity of the item(s) that should be consumed",
              "type": "integer",
              "minimum": 1
            }
          },
          "unevaluatedProperties": false
        },
        "produces": {
          "description": "Optional. Changes what the spell produces. Can either be a special production, or a set itemID.",
          "oneOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            },
            {
              "$ref": "#/$defs/AltMagicProduction"
            }
          ]
        },
        "productionRatio": {
          "description": "Optional. Changes the quantity of resources produces by the spell. Effect depends on the produces property.",
          "type": "number"
        }
      },
      "unevaluatedProperties": false
    },
    "PetData": {
      "description": "Data for constructing a Pet object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the Pet",
          "type": "string"
        },
        "media": {
          "description": "URI for the pet's image",
          "type": "string",
          "format": "uri-reference"
        },
        "hint": {
          "description": "Optional. If present, this will displayed as the hint for obtaining the pet instead of the autogenerated one.",
          "type": "string"
        },
        "langHint": {
          "description": "Optional. Language string ID for the hint property",
          "type": "string"
        },
        "skillID": {
          "description": "Optional. The ID of the skill that this pet is obtained from.",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "scaleChanceWithMasteryPool": {
          "description": "Determines if the chance to receive the pet should scale with the skill's mastery pool progress",
          "type": "boolean"
        },
        "ignoreCompletion": {
          "description": "If the pet should not count towards pet completion",
          "type": "boolean"
        },
        "activeInRaid": {
          "description": "If true, this pets bonuses will only apply in golbin raid",
          "type": "boolean"
        },
        "patreonName": {
          "description": "Optional. Specifies the name of the patreon who created this pet. Has no effect for modded pets.",
          "type": "string"
        },
        "customDescription": {
          "description": "Optional. Specifies a custom description that should be appended to the end of the pet's tooltip",
          "type": "string"
        },
        "langCustomDescription": {
          "description": "Optional. Language string ID for the customDescription property",
          "type": "string"
        },
        "realms": {
          "description": "Optional. Realms this pet can drop in. Unset means all realms.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "name",
        "media",
        "scaleChanceWithMasteryPool",
        "ignoreCompletion",
        "activeInRaid"
      ],
      "unevaluatedProperties": false
    },
    "PetModificationData": {
      "description": "Data for modifying a Pet object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IStatObjectModificationData"
        }
      ],
      "properties": {
        "id": {
          "description": "The id of the Pet to modify",
          "allOf": [
            {
              "$ref": "#/$defs/PetID"
            }
          ]
        }
      },
      "required": [
        "id"
      ],
      "unevaluatedProperties": false
    },
    "ShopCategoryData": {
      "description": "Data for constructing a ShopCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the category",
          "type": "string"
        },
        "media": {
          "description": "URI of the categories image in the shop",
          "type": "string",
          "format": "uri-reference"
        },
        "isGolbinRaid": {
          "description": "Optional. If set to true, this categories upgrades will only apply to golbin raid. Will also only show when accessing the raid shop. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "allowedGamemodeIDs": {
          "description": "Optional. Set which gamemode IDs this shop category will display for. If empty, it will show for all gamemodes.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GamemodeID"
          }
        }
      },
      "required": [
        "name",
        "media"
      ],
      "unevaluatedProperties": false
    },
    "ShopPurchaseData": {
      "description": "Data for constructing a ShopPurchase object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "customName": {
          "description": "Optional. Custom name for the purchase. Overrides the name generated by the purchase contents.",
          "type": "string"
        },
        "customDescription": {
          "description": "Optional. Custom description for the purchase. Overrides the description generated by the purchase contents. Is automatically templated.",
          "type": "string"
        },
        "media": {
          "description": "URI of the purchases image in the shop",
          "type": "string",
          "format": "uri-reference"
        },
        "category": {
          "description": "The id of the category in the shop this purchase belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/ShopCategoryID"
            }
          ]
        },
        "contains": {
          "description": "Determines what should be given to the player when the purchase is bought",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/IStatObjectData"
            }
          ],
          "properties": {
            "items": {
              "description": "Items that are added to the bank on purchase",
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemQuantity"
              }
            },
            "itemCharges": {
              "description": "Optional. Specifies an item with charges. If the player does not own the item, it will be added to their bank, otherwise only charges are granted",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the EquipmentItem to give charges to",
                  "allOf": [
                    {
                      "$ref": "#/$defs/EquipmentItemID"
                    }
                  ]
                },
                "quantity": {
                  "description": "The number of charges to grant per purchase",
                  "type": "integer",
                  "minimum": 1
                }
              },
              "required": [
                "id",
                "quantity"
              ]
            },
            "modifiers": {
              "description": "Optional. Specifies modifiers that should be given per quantity of the item purchased.",
              "allOf": [
                {
                  "$ref": "#/$defs/ModifierValuesRecordData"
                }
              ]
            },
            "combatEffects": {
              "description": "Optional. Effect applicators merged with the player with the chance scaled per quantity of the item purchased.",
              "type": "array",
              "items": {
                "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
              },
              "minItems": 1
            },
            "petID": {
              "description": "Optional. Specifies a pet that should be unlocked when the purchase is bought",
              "allOf": [
                {
                  "$ref": "#/$defs/PetID"
                }
              ]
            },
            "lootBox": {
              "description": "Optional. Specifies that the purchase contains a Golbin Raid crate",
              "type": "boolean"
            },
            "bankTab": {
              "description": "Optional. Specifies that the purchase contains a Bank Tab",
              "type": "boolean"
            }
          },
          "required": [
            "items"
          ],
          "unevaluatedProperties": false
        },
        "cost": {
          "description": "Determines the cost of purchasing this",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/ShopCost"
            }
          ]
        },
        "allowQuantityPurchase": {
          "description": "If the player is allowed to purchase multiple of this purchase at once",
          "type": "boolean"
        },
        "unlockRequirements": {
          "description": "Previous shop purchases that must be made before the item shows in the shop",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseRequirementData"
          }
        },
        "purchaseRequirements": {
          "description": "Requirements the player must meet to purchase this item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "defaultBuyLimit": {
          "description": "The default limit to the number of times the player may purchase this. If set to 0, the player may purchase it unlimited times",
          "type": "integer",
          "minimum": 0
        },
        "buyLimitOverrides": {
          "description": "Defines gamemode specific overrides to the defaultBuyLimit",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "gamemodeID": {
                "description": "The ID of the gamemode that should override the defaultBuyLimit",
                "allOf": [
                  {
                    "$ref": "#/$defs/GamemodeID"
                  }
                ]
              },
              "maximum": {
                "description": "The buy limit for the purchase for the specified gamemode. If set to 0, the player max purchase it unlimited times",
                "type": "integer",
                "minimum": 0
              }
            },
            "required": [
              "gamemodeID",
              "maximum"
            ],
            "unevaluatedProperties": false
          }
        },
        "showBuyLimit": {
          "description": "Determines if the shop purchase should still show in the shop when at its buy limit.",
          "type": "boolean"
        },
        "currentDescription": {
          "description": "Optional. Utilized for purchases that have modifiers, displays a summary of the first modifier's value formatted according to this value.",
          "type": "string",
          "enum": [
            "PercentIncrease",
            "PercentDecrease",
            "Increase",
            "Decrease",
            "SecondsIncrease",
            "SecondsDecrease"
          ]
        },
        "allowedGamemodeIDs": {
          "description": "Optional. Set which gamemode IDs this shop item will display for. If empty, it will show for all gamemodes.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GamemodeID"
          }
        }
      },
      "required": [
        "media",
        "category",
        "contains",
        "cost",
        "allowQuantityPurchase",
        "unlockRequirements",
        "purchaseRequirements",
        "defaultBuyLimit",
        "buyLimitOverrides",
        "showBuyLimit"
      ],
      "unevaluatedProperties": false
    },
    "ShopPurchaseModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "buyLimitOverrides": {
          "description": "Optional. Defines additional gamemode specific overrides to the defaultBuyLimit",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "gamemodeID": {
                "description": "The ID of the gamemode that should override the defaultBuyLimit",
                "allOf": [
                  {
                    "$ref": "#/$defs/GamemodeID"
                  }
                ]
              },
              "maximum": {
                "description": "The buy limit for the purchase for the specified gamemode. If set to 0, the player max purchase it unlimited times",
                "type": "integer",
                "minimum": 0
              }
            },
            "required": [
              "gamemodeID",
              "maximum"
            ],
            "unevaluatedProperties": false
          }
        },
        "purchaseRequirements": {
          "description": "Optional. Defines new gamemode specific overrides to the purchaseRequirements. Overwrites existing purchase requirements.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "gamemodeID": {
                "description": "The ID of the gamemode that should override the defaultBuyLimit",
                "allOf": [
                  {
                    "$ref": "#/$defs/GamemodeID"
                  }
                ]
              },
              "newRequirements": {
                "description": "Requirements the player must meet to purchase this item",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/AnyRequirementData"
                }
              }
            },
            "required": [
              "gamemodeID",
              "newRequirements"
            ],
            "unevaluatedProperties": false
          }
        },
        "cost": {
          "description": "Optional. Defines new gamemode specific overrides to the costs.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "gamemodeID": {
                "description": "The ID of the gamemode that should override the defaultBuyLimit",
                "allOf": [
                  {
                    "$ref": "#/$defs/GamemodeID"
                  }
                ]
              },
              "newCosts": {
                "description": "Adds to the cost of purchasing the shop item",
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/$defs/ShopCost"
                  }
                ]
              }
            },
            "required": [
              "gamemodeID",
              "newCosts"
            ],
            "unevaluatedProperties": false
          }
        }
      }
    },
    "ShopUpgradeChainData": {
      "description": "Data for constructing a ShopUpgradeChain object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "rootUpgradeID": {
          "description": "The ID of the highest shop purchase in the chain",
          "allOf": [
            {
              "$ref": "#/$defs/ShopPurchaseID"
            }
          ]
        },
        "chainName": {
          "description": "The display name of the upgrade chain",
          "type": "string"
        },
        "defaultName": {
          "description": "The name of the shop upgrade shown when none in the chain are owned",
          "type": "string"
        },
        "defaultMedia": {
          "description": "The media of the shop upgrade shown when none in the chain are owned",
          "type": "string"
        },
        "defaultDescription": {
          "description": "The description of the shop upgrade shown when none in the chain are owned",
          "type": "string"
        },
        "chainNameLang": {
          "description": "Optional. Language string ID to use for the chainName property",
          "type": "string"
        },
        "defaultNameLang": {
          "description": "Optional. Language string ID to use for the defaultName property",
          "type": "string"
        },
        "descriptionLang": {
          "description": "Optional. Language string ID to use for the defaultDescription property",
          "type": "string"
        }
      },
      "required": [
        "rootUpgradeID",
        "chainName",
        "defaultName",
        "defaultDescription"
      ],
      "unevaluatedProperties": false
    },
    "ShopUpgradeChainModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "rootUpgradeID": {
          "description": "Optional. Overwrites the highest shop purchase in the chain with the purchase with this ID.",
          "allOf": [
            {
              "$ref": "#/$defs/ShopPurchaseID"
            }
          ]
        }
      }
    },
    "ItemUpgradeData": {
      "description": "Data for constructing an ItemUpgrade object",
      "type": "object",
      "properties": {
        "itemCosts": {
          "description": "The items required to upgrade the item. Must contain the rootItemIDs",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        },
        "currencyCosts": {
          "description": "Currency costs required to upgrade the item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "gpCost": {
          "description": "The GP cost to upgrade the item",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "scCost": {
          "description": "The Slayer coin cost to upgrade the item",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "rootItemIDs": {
          "description": "The IDs of the items that should show the upgrade option in the bank",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        },
        "upgradedItemID": {
          "description": "The ID of the item that should be produced by this upgrade",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "isDowngrade": {
          "description": "Determines if the item should show as a Downgrade in the bank",
          "type": "boolean"
        },
        "quantity": {
          "description": "Optional. Determines the quantity of the upgradeItemID that is given per upgrade",
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "required": [
        "itemCosts",
        "rootItemIDs",
        "upgradedItemID",
        "isDowngrade"
      ],
      "unevaluatedProperties": false
    },
    "ItemUpgradeModificationData": {
      "description": "Data for modifying a Item Upgrades",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "itemCosts": {
          "description": "An array of Item Costs that are used to upgrade the item",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantitiesModificationData"
            }
          ]
        },
        "currencyCosts": {
          "description": "An array of Currency Costs that are used to upgrade the item",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantitiesModificationData"
            }
          ]
        },
        "rootItemIDs": {
          "description": "An array of Root Items that are used to upgrade the item",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              },
              "minItems": 1
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              },
              "minItems": 1
            }
          },
          "unevaluatedProperties": false
        }
      }
    },
    "ItemSynergyData": {
      "description": "Data for constructing an ItemSynergy object",
      "type": "object",
      "properties": {
        "itemIDs": {
          "description": "IDs of Equipment Items that must be worn together for the synergy to work. Also accepts ThrowingWeapon to specify any Javelin or Throwing Knife, and Melee2HWeapon to specify any 2-Handed Melee weapon",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/EquipmentItemID"
              },
              {
                "type": "string",
                "enum": [
                  "ThrowingWeapon",
                  "Melee2HWeapon"
                ]
              }
            ]
          },
          "minItems": 2,
          "maxItems": 15
        },
        "playerModifiers": {
          "description": "Optional. Modifiers provided to the player when the synergy is active",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Combat Modifiers provided to Enemies when the synergy is active",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "conditionalModifiers": {
          "description": "Optional. Conditional Modifiers provided when the synergy is active",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConditionalModifierData"
          },
          "minItems": 1
        },
        "equipmentStats": {
          "description": "Optional. Equipment stats provided to the player when the synergy is active",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyEquipStatData"
          },
          "minItems": 1
        },
        "combatEffects": {
          "description": "Optional. CombatEffects provided to the player in combat at the specified times.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        }
      },
      "required": [
        "itemIDs"
      ],
      "unevaluatedProperties": false,
      "minProperties": 2
    },
    "GolbinRaidData": {
      "description": "Data for the Golbin Raid minigame",
      "type": "object",
      "properties": {
        "bannedItems": {
          "description": "Items that should not show up in Golbin Raid",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "bannedPassiveItems": {
          "description": "Items that should not show up in the Passive slot in Golbin Raid",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          }
        },
        "crateItems": {
          "description": "Items that must be found in Golbin Crates before they show up in Raid",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "itemID": {
                "description": "The ID of the item in the crate",
                "allOf": [
                  {
                    "$ref": "#/$defs/AnyItemID"
                  }
                ]
              },
              "weight": {
                "description": "The weight of the item in golbin crates. Higher value indicates more common items",
                "type": "integer",
                "enum": [
                  35,
                  20,
                  10,
                  4,
                  1
                ]
              }
            },
            "required": [
              "itemID",
              "weight"
            ],
            "unevaluatedProperties": false
          }
        },
        "golbinPassives": {
          "description": "The IDs of CombatPassives that may randomly be given to Golbins",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CombatPassiveID"
          }
        },
        "startingWeapons": {
          "description": "Optional. Determines the starting weapons given. Used in conjunction with the ",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WeaponItemID"
          }
        },
        "startingFood": {
          "description": "Optional. Sets the starting food item of the player",
          "allOf": [
            {
              "$ref": "#/$defs/FoodItemID"
            }
          ]
        },
        "startingAmmo": {
          "description": "Optional. Sets the starting ammo of the player",
          "type": "object",
          "properties": {
            "id": {
              "description": "The ID of the ammo item",
              "allOf": [
                {
                  "$ref": "#/$defs/EquipmentItemID"
                }
              ]
            },
            "quantity": {
              "description": "The starting quantity of ammo",
              "type": "integer",
              "minimum": 1
            }
          },
          "required": [
            "id",
            "quantity"
          ],
          "unevaluatedProperties": false
        },
        "startingRunes": {
          "description": "Optional. Sets the starting runes of the player",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        },
        "randomModifiers": {
          "description": "Optional. Determines the random modifier selection",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "allOf": [
                  {
                    "$ref": "#/$defs/EnemyModifierKey"
                  }
                ]
              },
              "multiplier": {
                "type": "number"
              }
            },
            "required": [
              "key"
            ]
          }
        },
        "playerModifiers": {
          "description": "Optional. Modifiers that are always active on the player during raid",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        }
      },
      "required": [
        "bannedItems",
        "bannedPassiveItems",
        "crateItems",
        "golbinPassives"
      ],
      "unevaluatedProperties": false
    },
    "SteamAchievementData": {
      "description": "Data for constructing an SteamAchievement object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the achievement on steam",
          "type": "string"
        },
        "requirements": {
          "description": "The requirements the player must meet to unlock the achievement",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "requiredGamemodeID": {
          "description": "Optional. The ID of the gamemode that the player must be playing to unlock the achievement. If unset the achievement can be unlocked in any gamemode",
          "allOf": [
            {
              "$ref": "#/$defs/GamemodeID"
            }
          ]
        }
      },
      "required": [
        "id",
        "requirements"
      ],
      "unevaluatedProperties": false
    },
    "TutorialTaskData": {
      "description": "Data for constructing a TutorialTask object",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID used to pull the localization data for the tasks description",
          "type": "string"
        },
        "description": {
          "description": "A description of what needs to be done to finish the task",
          "type": "string"
        },
        "media": {
          "description": "URI of the image to display next to the task",
          "type": "string",
          "format": "uri-reference"
        },
        "eventMatcher": {
          "description": "Game event matcher that should progress the task",
          "allOf": [
            {
              "$ref": "#/$defs/GameEventMatcherData"
            }
          ]
        },
        "eventCount": {
          "description": "The number of times the event must happen to complete the task",
          "type": "integer",
          "minimum": 1
        },
        "countEventQuantity": {
          "description": "Whether the quantity of items made/equipped/purchased should be counted for the eventCount",
          "type": "boolean"
        }
      },
      "required": [
        "description",
        "media",
        "eventMatcher",
        "eventCount",
        "countEventQuantity"
      ],
      "unevaluatedProperties": false
    },
    "TutorialStageData": {
      "description": "Data for constructing a TutorialStage object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the stage",
          "type": "string"
        },
        "description": {
          "description": "The displayed description of the stage",
          "type": "string"
        },
        "tasks": {
          "description": "The tasks that must be completed to complete the stage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TutorialTaskData"
          },
          "minItems": 1
        },
        "taskPage": {
          "description": "The ID of the page that the task is completed on",
          "allOf": [
            {
              "$ref": "#/$defs/PageID"
            }
          ]
        },
        "skillUnlocks": {
          "description": "The IDs of the skills that are unlocked with the stage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          }
        },
        "rewards": {
          "description": "Rewards that are given upon completion of the stage",
          "type": "object",
          "properties": {
            "currencies": {
              "description": "Currencies given upon stage completion",
              "type": "array",
              "items": {
                "$ref": "#/$defs/CurrencyQuantity"
              }
            },
            "items": {
              "description": "Items given upon stage completion",
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemQuantity"
              }
            }
          },
          "required": [
            "currencies",
            "items"
          ],
          "unevaluatedProperties": false
        },
        "allowedShopPurchases": {
          "description": "ShopPurchases that the player is allowed to make during the stage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseID"
          }
        },
        "allowedMonsters": {
          "description": "Monsters that the player is allowed to fight during the stage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MonsterID"
          }
        },
        "bannedItemSales": {
          "description": "Items that the player is not allowed to sell during the stage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "allowCombat": {
          "description": "If the player is allowed to use combat during the stage",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "description",
        "tasks",
        "taskPage",
        "skillUnlocks",
        "rewards",
        "allowedShopPurchases",
        "allowedMonsters",
        "bannedItemSales",
        "allowCombat"
      ],
      "unevaluatedProperties": false
    },
    "PageSideBarItemOptions": {
      "type": "object",
      "properties": {
        "categoryID": {
          "description": "The ID of the sidebar category to add the item to",
          "type": "string"
        },
        "rootClass": {
          "type": "string"
        },
        "itemClass": {
          "type": "string"
        },
        "icon": {
          "type": "string",
          "format": "uri-reference"
        },
        "iconClass": {
          "type": "string"
        },
        "nameClass": {
          "type": "string"
        },
        "aside": {
          "type": "string"
        },
        "asideLangID": {
          "type": "string"
        },
        "asideClass": {
          "type": "string"
        },
        "ignoreToggle": {
          "type": "boolean"
        },
        "before": {
          "type": "string"
        },
        "after": {
          "type": "string"
        }
      },
      "required": [
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "PageSideBarSubItemOptions": {
      "type": "object",
      "properties": {
        "categoryID": {
          "description": "The ID of the sidebar category which contains the item to add the subItem to",
          "type": "string"
        },
        "itemID": {
          "description": "The Id of the sidebar item to add the subItem to",
          "type": "string"
        },
        "rootClass": {
          "type": "string"
        },
        "subitemClass": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameClass": {
          "type": "string"
        },
        "aside": {
          "type": "string"
        },
        "asideClass": {
          "type": "string"
        },
        "before": {
          "type": "string"
        },
        "after": {
          "type": "string"
        }
      },
      "required": [
        "categoryID",
        "itemID"
      ],
      "unevaluatedProperties": false
    },
    "PageData": {
      "description": "Data for constructing a Page object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "customName": {
          "description": "Optional. Specifies a custom name for the page to be used instead of the first skill name",
          "type": "string"
        },
        "media": {
          "description": "URI of the page's icon.",
          "type": "string",
          "format": "uri-reference"
        },
        "containerID": {
          "description": "The HTMLElement-id of the page's container in the DOM",
          "type": "string"
        },
        "headerBgClass": {
          "description": "The CSS class that is applied to the header of the game. Used to determine its background colour",
          "type": "string"
        },
        "hasGameGuide": {
          "description": "If the page has a corresponding game guide that can be shown by clicking its icon in the header",
          "type": "boolean"
        },
        "canBeDefault": {
          "description": "If the page can be set as a default page on load in the settings",
          "type": "boolean"
        },
        "action": {
          "description": "Optional. An action that is associated with the page.",
          "allOf": [
            {
              "$ref": "#/$defs/ActionID"
            }
          ]
        },
        "skills": {
          "description": "Optional. Skills that are associated with the page.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          },
          "minItems": 1
        },
        "sidebarItem": {
          "description": "Optional. If present this page will generate an item in the sidebar to change to it",
          "allOf": [
            {
              "$ref": "#/$defs/PageSideBarItemOptions"
            }
          ]
        },
        "sidebarSubItems": {
          "description": "Optional. If present this page will generate subitems in the sidebar to change to it",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PageSideBarSubItemOptions"
          },
          "minItems": 1
        },
        "skillSidebarCategoryID": {
          "description": "The sidebar category ID to place associated skills' sidebar item under",
          "type": "string"
        },
        "displayClass": {
          "description": "Optional. CSS class that is added/removed when the page container is shown/hidden. Useful for using d-flex on a container",
          "type": "string"
        }
      },
      "required": [
        "media",
        "containerID",
        "headerBgClass",
        "hasGameGuide",
        "canBeDefault"
      ],
      "unevaluatedProperties": false
    },
    "PageModificationData": {
      "description": "Data for modifying a Page object",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the Page to modify",
          "allOf": [
            {
              "$ref": "#/$defs/PageID"
            }
          ]
        },
        "skills": {
          "description": "Optional. Skills that are associated with the page.",
          "type": "object",
          "properties": {
            "add": {
              "description": "Adds skills to the page",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "skillID": {
                    "description": "The ID of the skill to add",
                    "allOf": [
                      {
                        "$ref": "#/$defs/SkillID"
                      }
                    ]
                  },
                  "insertAt": {
                    "description": "Optional. The index of the skills array to insert the skill at",
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "required": [
                  "skillID"
                ],
                "additionalProperties": false
              }
            },
            "remove": {
              "description": "Removes skills from the page",
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "LoreBookData": {
      "description": "Data for constructing a LoreBook object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "title": {
          "description": "The displayed title of the book",
          "type": "string"
        },
        "media": {
          "description": "URI of The displayed icon for the book",
          "type": "string",
          "format": "uri-reference"
        },
        "unlockRequirements": {
          "description": "Requirements the player must meet to read the book",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        }
      },
      "required": [
        "title",
        "media",
        "unlockRequirements"
      ],
      "unevaluatedProperties": false
    },
    "SkillCategoryData": {
      "description": "Data for constructing a SkillCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "media": {
          "description": "URI for the categories image",
          "type": "string",
          "format": "uri-reference"
        },
        "name": {
          "description": "Display name for the category",
          "type": "string"
        }
      },
      "required": [
        "media",
        "name"
      ]
    },
    "BasicSkillRecipeData": {
      "description": "Data for constructing a BasicSkillRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "baseExperience": {
          "description": "The base experience rewarded per action",
          "type": "integer",
          "minimum": 0
        },
        "level": {
          "description": "The skill level required to perform the action",
          "type": "integer",
          "minimum": 0
        },
        "baseAbyssalExperience": {
          "description": "Optional. The base abyssal experience rewarded per action",
          "type": "integer",
          "minimum": 0
        },
        "abyssalLevel": {
          "description": "Optional. The abyssal skill level required to perform the action",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "baseExperience",
        "level"
      ]
    },
    "BasicSkillRecipeModificationData": {
      "description": "Data for modifying a BasicSkillRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "baseExperience": {
          "description": "Optional. Changes the base experience rewarded per action",
          "type": "integer",
          "minimum": 0
        },
        "level": {
          "description": "Optional. Changes the skill level required to perform the action",
          "type": "integer",
          "minimum": 0
        },
        "baseAbyssalExperience": {
          "description": "Optional. Changes the base abyssal experience rewarded per action",
          "type": "integer",
          "minimum": 0
        },
        "abyssalLevel": {
          "description": "Optional. Changes the abyssal skill level required to perform the action",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "SingleProductRecipeData": {
      "description": "Data for constructing a SingleProductRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "productId": {
          "description": "The ID of the item that is produced",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "productId"
      ]
    },
    "SingleProductRecipeModificationData": {
      "description": "Data for modifying a SingleProductRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeModificationData"
        }
      ],
      "properties": {
        "productId": {
          "description": "Optional. Changes the item that is produced by the recipe",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      }
    },
    "ArtisanSkillRecipeData": {
      "description": "Data for constructing a ArtisanSkillRecipeData object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "itemCosts": {
          "description": "The base items required to peform the action",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "currencyCosts": {
          "description": "The base currencies required to perform the action",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "gpCost": {
          "description": "The base GP cost required to perform the action",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "scCost": {
          "description": "The base slayer coin cost required to perform the action",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        }
      },
      "required": [
        "itemCosts"
      ]
    },
    "ArtisanSkillRecipeModificationData": {
      "description": "Data for modifying a ArtisanSkillRecipeData object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeModificationData"
        }
      ],
      "properties": {
        "itemCosts": {
          "description": "Optional. Adds or removes item costs for the recipe",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantitiesModificationData"
            }
          ]
        },
        "currencyCosts": {
          "description": "Optional. Adds or removes currency costs for the recipe",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantitiesModificationData"
            }
          ]
        }
      }
    },
    "CategorizedArtisanRecipeData": {
      "description": "Data for constructing a CategorizedArtisanRecipeData object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "categoryID": {
          "description": "ID of the category this recipe belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "categoryID"
      ]
    },
    "CategorizedArtisanRecipeModificationData": {
      "description": "Data for modifying a CategorizedArtisanRecipeData object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "categoryID": {
          "description": "Optional. Changes the category this recipe belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      }
    },
    "SingleProductArtisanSkillRecipeData": {
      "description": "Data for constructing a SingleProductArtisanSkillRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CategorizedArtisanRecipeData"
        }
      ],
      "properties": {
        "productID": {
          "description": "ID of the item produced by this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "baseQuantity": {
          "description": "The base quantity of the item produced",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "productID",
        "baseQuantity"
      ]
    },
    "SingleProductArtisanSkillRecipeModificationData": {
      "description": "Data for modifying a SingleProductArtisanSkillRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CategorizedArtisanRecipeModificationData"
        }
      ],
      "properties": {
        "productID": {
          "description": "Optional. Changes the item produced by this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "baseQuantity": {
          "description": "Optional. Changes the base quantity of the item produced",
          "type": "integer",
          "minimum": 1
        }
      }
    },
    "WoodcuttingTreeData": {
      "description": "Data For constructing a WoodcuttingTree object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the tree",
          "type": "string"
        },
        "media": {
          "description": "URI of the trees image",
          "type": "string",
          "format": "uri-reference"
        },
        "baseInterval": {
          "description": "The base time it takes to cut the tree in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "randomProducts": {
          "description": "Optional. Determines which random products can drop from this tree. Defaults to skill defaults",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "requirements": {
          "description": "Optional. If present, these requirements must also be met to cut to tree, in addition to Woodcutting level.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        }
      },
      "required": [
        "name",
        "media",
        "baseInterval"
      ],
      "unevaluatedProperties": false
    },
    "WoodcuttingTreeModificationData": {
      "description": "Data For modifying a WoodcuttingTree object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeModificationData"
        }
      ],
      "properties": {
        "baseInterval": {
          "description": "Optional. Changes the base time it takes to cut the tree in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "randomProducts": {
          "description": "Optional. Adds or removes random products that can drop from this tree",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          }
        },
        "requirements": {
          "description": "Optional. Adds or removes requirements needed to cut this tree",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/RequirementsModificationData"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "RandomWoodcuttingProductData": {
      "description": "Data for constructing a RandomWoodcuttingProduct object",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the product",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "chance": {
          "description": "The base chance to gain the product",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "quantity": {
          "description": "The base quantity of the product to give",
          "type": "integer",
          "minimum": 1
        },
        "minChance": {
          "description": "Optional. The minimum value the chance can reach",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "itemID",
        "chance",
        "quantity"
      ],
      "unevaluatedProperties": false
    },
    "FishingAreaData": {
      "description": "Data for constructing a FishingArea object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the area",
          "type": "string"
        },
        "description": {
          "description": "Optional. Flavour text description of the area.",
          "type": "string"
        },
        "fishChance": {
          "description": "The base fish chance",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "junkChance": {
          "description": "The base junk chance",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "specialChance": {
          "description": "The base special chance",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "fishIDs": {
          "description": "The ids of fish that can be caught in this area",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishingActionID"
          },
          "minItems": 1
        },
        "requiredItemID": {
          "description": "Optional. If present this item must be equipped to fish in the area",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentItemID"
            }
          ]
        },
        "isSecret": {
          "description": "Optional. If present, the player must have read the Message in a bottle to fish in the area",
          "type": "boolean",
          "default": false
        },
        "poiRequirement": {
          "description": "Optional. If present the Cartography Point of Interest requirement must be met to access the area",
          "allOf": [
            {
              "$ref": "#/$defs/CartographyPOIDiscoveryRequirementData"
            }
          ]
        }
      },
      "required": [
        "name",
        "fishChance",
        "junkChance",
        "specialChance",
        "fishIDs"
      ],
      "unevaluatedProperties": false
    },
    "FishData": {
      "description": "Data For constructing a Fish object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeData"
        }
      ],
      "properties": {
        "strengthXP": {
          "description": "Base strength skill experience earned on a successful catch",
          "type": "integer",
          "minimum": 0
        },
        "baseMinInterval": {
          "description": "The base minimum interval to catch the fish in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "baseMaxInterval": {
          "description": "The base maximum interval to catch the fish in [ms]",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "strengthXP",
        "baseMinInterval",
        "baseMaxInterval"
      ],
      "unevaluatedProperties": false
    },
    "FishModificationData": {
      "description": "Data for modifying a Fish object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeModificationData"
        }
      ],
      "properties": {
        "strengthXP": {
          "description": "Optional. Changes the base strength skill experience earned on a successful catch",
          "type": "integer",
          "minimum": 0
        },
        "baseMinInterval": {
          "description": "Optional. Changes the base minimum interval to catch the fish in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "baseMaxInterval": {
          "description": "Optional. Changes the base maximum interval to catch the fish in [ms]",
          "type": "integer",
          "minimum": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FishingContestFishData": {
      "description": "Data For constructing a Fishing Contest Fish object",
      "type": "object",
      "properties": {
        "fishID": {
          "description": "ID of the Fish",
          "type": "string"
        },
        "level": {
          "description": "Required fishing level for this fish to appear in pool",
          "type": "integer",
          "minimum": 0
        },
        "minLength": {
          "description": "The base minimum length possible for the fish in [cm]",
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "description": "The base maximum length possible for the fish in [cm]",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "fishID",
        "minLength",
        "maxLength"
      ],
      "unevaluatedProperties": false
    },
    "FiremakingLogData": {
      "description": "Data For constructing a FiremakingLog object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "logID": {
          "description": "The Item ID of the log that should be burnt",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "baseInterval": {
          "description": "The base interval to burn a log in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "primaryProducts": {
          "description": "Optional. Defines which primary product items can be gained from this log. Defaults to skill data defaults",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "secondaryProducts": {
          "description": "Optional. Defines which secondary product items can be gained from this log. Defaults to skill data defaults",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "baseBonfireInterval": {
          "description": "The base interval that a bonfire lasts for in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "bonfireXPBonus": {
          "description": "The percent bonus to firemaking XP that a bonfire provides",
          "type": "integer",
          "minimum": 0
        },
        "bonfireAXPBonus": {
          "description": "Optional. The percent bonus to abyssal firemaking XP that a bonfire provides. Also re-themes the bonfire to abyssal, and makes normal bonuses that effect bonfires non-functional.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "logID",
        "baseInterval",
        "baseBonfireInterval",
        "bonfireXPBonus"
      ],
      "unevaluatedProperties": false
    },
    "FiremakingLogModificationData": {
      "description": "Data for modifying a FiremakingLog object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeModificationData"
        }
      ],
      "properties": {
        "logID": {
          "description": "Optional. Changes the log that should be burnt",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "baseInterval": {
          "description": "Optional. Changes the base interval to burn a log in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "primaryProducts": {
          "description": "Optional. Adds or removes primary products that can be gained from this log.",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          }
        },
        "secondaryProducts": {
          "description": "Optional. Adds or removes secondary products that can be gained from this log.",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          }
        },
        "baseBonfireInterval": {
          "description": "Optional. Changes the base interval that a bonfire lasts for in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "bonfireXPBonus": {
          "description": "Optional. Changes the percent bonus to firemaking XP that a bonfire provides",
          "type": "integer",
          "minimum": 0
        },
        "bonfireAXPBonus": {
          "description": "Optional. Changes the percent bonus to abyssal firemaking XP that a bonfire provides",
          "type": "integer",
          "minimum": 0
        }
      },
      "unevaluatedProperties": false
    },
    "FiremakingProductData": {
      "description": "Data for constructing a FiremakingProduct object",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the product",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "chance": {
          "description": "The base chance to gain the product",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "quantity": {
          "description": "The base quantity of the product to give",
          "type": "integer",
          "minimum": 1
        },
        "quantityScaling": {
          "description": "Optional. Defines a scaling factor for the base quantity depending on the log being burnt",
          "type": "object",
          "properties": {
            "type": {
              "description": "Which log property to scale with",
              "type": "string",
              "enum": [
                "BaseInterval",
                "AbyssalLevel"
              ]
            },
            "factor": {
              "description": "How much to increase the quantity per the type",
              "type": "number",
              "exclusiveMinimum": 0
            }
          },
          "required": [
            "type",
            "factor"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "itemID",
        "chance",
        "quantity"
      ],
      "unevaluatedProperties": false
    },
    "CookingCategoryData": {
      "description": "Data for constructing a CookingCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillCategoryData"
        }
      ],
      "properties": {
        "modifierName": {
          "description": "The name of this category as it appears in modifiers",
          "type": "string"
        },
        "modifierNameLang": {
          "description": "Optional. Language string ID to use for modifierName",
          "type": "string"
        },
        "shopUpgradeIDs": {
          "description": "Shop upgrades that improve the cooking for this category. Used to change the display of the category. Should be in order of highest to lowest tier upgrade.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseID"
          }
        },
        "upgradeRequired": {
          "description": "If an upgrade must be purchased to cook items in this category",
          "type": "boolean"
        }
      },
      "required": [
        "modifierName",
        "shopUpgradeIDs",
        "upgradeRequired"
      ],
      "unevaluatedProperties": false
    },
    "CookingCategoryModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "shopUpgradeIDs": {
          "description": "Shop upgrades that improve the cooking for this category. Used to change the display of the category. Should be in order of highest to lowest tier upgrade. Objects are prepended to the shopUpgrades array.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseID"
          },
          "minItems": 1
        }
      },
      "required": [
        "shopUpgradeIDs"
      ],
      "unevaluatedProperties": false
    },
    "CookingRecipeData": {
      "description": "Data for constructing a CookingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "perfectCookID": {
          "description": "The Item ID of the perfect version of the product",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "baseInterval": {
          "description": "The base interval to perform the action in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "subcategoryID": {
          "description": "Optional. The ID of a subcategory for this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "noMastery": {
          "description": "Optional. Flags the recipe as not participating in the mastery system.",
          "type": "boolean",
          "default": false
        },
        "discoveredItems": {
          "description": "Optional. An array of Item IDs that player has to have found first, before being able to cook this recipe",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        }
      },
      "required": [
        "perfectCookID",
        "baseInterval"
      ],
      "unevaluatedProperties": false
    },
    "CookingRecipeModificationData": {
      "description": "Data for modifying a CookingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "perfectCookID": {
          "description": "Optional. Changes the Perfect Item for this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "baseInterval": {
          "description": "Optional. Changes the base interval to perform the action in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "subcategoryID": {
          "description": "Optional. Changes the subcategory for this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "MiningRockType": {
      "type": "string",
      "enum": [
        "Ore",
        "Essence",
        "Gem",
        "AbyssalOre",
        "AbyssalGem",
        "Outcrop",
        "AbyssalEssence"
      ]
    },
    "MiningCategoryData": {
      "description": "Data for constructing a MiningCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of this category",
          "type": "string"
        },
        "badgeClass": {
          "description": "The css class to apply to the mining rock menus category display",
          "type": "string"
        },
        "givesGemVeins": {
          "description": "Optional. If rocks in this category should roll for gem veins when mined. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "givesAbyssalGemVeins": {
          "description": "Optional. If rocks in this category should roll for abyssal gem veins when mined. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "name",
        "badgeClass"
      ],
      "unevaluatedProperties": false
    },
    "MiningRockData": {
      "description": "Data For constructing a MiningRock object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the rock",
          "type": "string"
        },
        "media": {
          "description": "URI of the rocks image",
          "type": "string",
          "format": "uri-reference"
        },
        "baseRespawnInterval": {
          "description": "The base time it takes for the rock to respawn in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "baseQuantity": {
          "description": "The base quantity of items received per action",
          "type": "integer",
          "minimum": 1
        },
        "totalMasteryRequired": {
          "description": "Optional. If present the player required a total mastery level for mining greater than or equal to this to mine it.",
          "type": "integer",
          "minimum": 1
        },
        "hasPassiveRegen": {
          "description": "Determines if the rock should respawn when depleted and have passive HP regeneration",
          "type": "boolean"
        },
        "giveGems": {
          "description": "If the rock can benefit from modifiers that increase the chance to obtain gems",
          "type": "boolean"
        },
        "superiorGemChance": {
          "description": "Optional. The base % chance to give a superior gem. If undefined, the rock cannot give a superior gem.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "shopItemPurchased": {
          "description": "Optional. The ID of a ShopPurchase that is required to mine this rock",
          "allOf": [
            {
              "$ref": "#/$defs/ShopPurchaseID"
            }
          ]
        },
        "fixedMaxHP": {
          "description": "Optional. If present, fixes the maximum HP of this mining node to the specified value.",
          "type": "integer",
          "minimum": 1
        },
        "type": {
          "description": "Deprecated. Use category instead. The type of rock this mining node is.",
          "allOf": [
            {
              "$ref": "#/$defs/MiningRockType"
            }
          ],
          "deprecated": true
        },
        "category": {
          "description": "The id of the category this mining node belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/MiningCategoryID"
            }
          ]
        },
        "gemVeinWeight": {
          "description": "Optional. If present, this rock is eligible to be rolled as a gem vein and have it's HP increase. Higher weight indicates a higher chance to be selected.",
          "type": "integer",
          "minimum": 1
        },
        "abyssalGemChance": {
          "description": "Optional. The base % chance to give an abyssal gem. If undefined, the rock cannot give an abyssal gem.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "abyssalGemVeinWeight": {
          "description": "Optional. If present, this rock is eligible to be rolled as an abyssal gem vein and have it's HP increase. Higher weight indicates a higher chance to be selected.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "name",
        "media",
        "baseRespawnInterval",
        "baseQuantity",
        "hasPassiveRegen",
        "giveGems",
        "category"
      ],
      "unevaluatedProperties": false
    },
    "MiningRockModificationData": {
      "description": "Data For modifying a MiningRock object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeModificationData"
        }
      ],
      "properties": {
        "baseRespawnInterval": {
          "description": "Optional. Changes the base time it takes for the rock to respawn in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "baseQuantity": {
          "description": "Optional. Changes the base quantity of items received per action",
          "type": "integer",
          "minimum": 1
        },
        "totalMasteryRequired": {
          "description": "Optional. Sets the total mining mastery level required to mine this rock",
          "type": "integer",
          "minimum": 1
        },
        "hasPassiveRegen": {
          "description": "Optional. Sets whether the rock should respawn when depleted and have passive HP regeneration",
          "type": "boolean"
        },
        "giveGems": {
          "description": "Optional. Sets if the rock can benefit from modifiers that increase the chance to obtain gems",
          "type": "boolean"
        },
        "superiorGemChance": {
          "description": "Optional. Sets The base % chance to give a superior gem.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "shopItemPurchased": {
          "description": "Optional. Sets the ShopPurchase that is required to mine this rock",
          "allOf": [
            {
              "$ref": "#/$defs/ShopPurchaseID"
            }
          ]
        },
        "fixedMaxHP": {
          "description": "Optional. Sets a fixed maximum HP for this rock",
          "type": "integer",
          "minimum": 1
        },
        "category": {
          "description": "Optional. Changes the category this mining node belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/MiningCategoryID"
            }
          ]
        },
        "gemVeinWeight": {
          "description": "Optional. Sets the weight of rolling this rock as a gem vein. Higher weight indicates a higher chance to be selected.",
          "type": "integer",
          "minimum": 1
        },
        "abyssalGemChance": {
          "description": "Optional. Sets the base % chance to gain an abyssal gem from this rock",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "abyssalGemVeinWeight": {
          "description": "Optional. Sets the weight of rolling this rock as an abyssal gem vein. Higher weight indicates a higher chance to be selected.",
          "type": "integer",
          "minimum": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SmithingRecipeData": {
      "description": "Data for constructing a SmithingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "subcategoryID": {
          "description": "Optional. The Id of the subcategory this recipe belong to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "SmithingRecipeModificationData": {
      "description": "Data for modifying a SmithingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "subcategoryID": {
          "description": "Optional. Changes the subcategory this recipe belong to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "ThievingNPCData": {
      "description": "Data For constructing a ThievingNPC object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the NPC",
          "type": "string"
        },
        "media": {
          "description": "URI of the NPC's image",
          "type": "string",
          "format": "uri-reference"
        },
        "perception": {
          "description": "Value of the NPCs perception stat. Higher values indicate a more difficult target to steal from",
          "type": "integer",
          "minimum": 1
        },
        "maxHit": {
          "description": "The maximum damage the NPC hits the player for when they fail a pickpocket attempt. 1/10th of the damage value in Normal Mode.",
          "type": "number",
          "minimum": 0,
          "multipleOf": 0.1
        },
        "maxGP": {
          "description": "Deprecated, use currencyDrops instead. The base maximum GP that the NPC can drop",
          "type": "integer",
          "minimum": 1,
          "deprecated": true
        },
        "currencyDrops": {
          "description": "Determines the maximum amounts of currencies that can drop from this NPC",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "uniqueDrop": {
          "description": "Optional. Defines an item that rarely drops from this NPC",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantity"
            }
          ]
        },
        "lootTable": {
          "description": "Defines the common drops of this NPC",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          }
        },
        "allowedDamageTypeIDs": {
          "description": "Optional. If present, pickpocketing will only be allowed to be used with the given damage types",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeID"
          },
          "minItems": 1
        }
      },
      "required": [
        "name",
        "media",
        "perception",
        "maxHit",
        "currencyDrops",
        "lootTable"
      ],
      "unevaluatedProperties": false
    },
    "ThievingNPCModificationData": {
      "description": "Data for modifying a ThievingNPC object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeModificationData"
        }
      ],
      "properties": {
        "perception": {
          "description": "Optional. Changes the value of the NPCs perception stat. Higher values indicate a more difficult target to steal from",
          "type": "integer",
          "minimum": 1
        },
        "maxHit": {
          "description": "Optional. Changes the maximum damage the NPC hits the player for when they fail a pickpocket attempt. 1/10th of the damage value in Normal Mode.",
          "type": "number",
          "minimum": 0,
          "multipleOf": 0.1
        },
        "currencyDrops": {
          "description": "Adds or removes currencies that can drop from the NPC",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantitiesModificationData"
            }
          ]
        },
        "uniqueDrop": {
          "description": "Optional. Changes the Unique item dropped from the NPC",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantity"
            }
          ]
        },
        "lootTable": {
          "description": "Optional. Adds or removes items from the NPCs common drop table",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/DropTableData"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "unevaluatedProperties": false
        },
        "allowedDamageTypeIDs": {
          "description": "Optional. Adds or removes allowed damage types from NPCs",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/DamageTypeID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "unevaluatedProperties": false
        }
      },
      "required": [
        "name",
        "media",
        "perception",
        "maxHit",
        "currencyDrops",
        "lootTable"
      ],
      "unevaluatedProperties": false
    },
    "ThievingAreaData": {
      "description": "Data For constructing a ThievingArea object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of this area",
          "type": "string"
        },
        "npcIDs": {
          "description": "The IDs of Thieving NPCs that are located in this area",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "uniqueDrops": {
          "description": "Defines the area unique drops that can be obtained from npcs in this area",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        }
      },
      "required": [
        "name",
        "npcIDs",
        "uniqueDrops"
      ],
      "unevaluatedProperties": false
    },
    "GeneralThievingRareData": {
      "description": "Data for constructing a GeneralThievingRare object",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the item that should drop",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "chance": {
          "description": "The percentage chance that the item can drop from an NPC",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        },
        "npcs": {
          "description": "Optional. If present, this drop is limited to the NPCs with the IDs in this array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingActionID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "realms": {
          "description": "Optional. If present, this drop is limited to the realms with the IDs in this array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "itemID",
        "chance"
      ],
      "unevaluatedProperties": false
    },
    "FarmingCategoryData": {
      "description": "Data for constructing a FarmingCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillCategoryData"
        }
      ],
      "properties": {
        "returnSeeds": {
          "description": "If actions in this category should have a chance to return seeds on harvest",
          "type": "boolean"
        },
        "scaleXPWithQuantity": {
          "description": "If the xp gained from harvesting crops in the category should scale with the quantity of items harvested",
          "type": "boolean"
        },
        "harvestMultiplier": {
          "description": "Multiplier to the quantity of items gained when harvesting for recipes in this category",
          "type": "integer",
          "minimum": 1
        },
        "masteryXPDivider": {
          "description": "Divisor applied to the mastery XP gained when harvesting crops in this category.",
          "type": "integer",
          "minimum": 1
        },
        "giveXPOnPlant": {
          "description": "If experience should be granted when planting a recipe in this category",
          "type": "boolean"
        },
        "description": {
          "description": "Flavour text displayed on the category button",
          "type": "string"
        },
        "seedNotice": {
          "description": "Text displayed regarding the seed cost to plant recipes in this category. Shown when selecting a seed to plant.",
          "type": "string"
        },
        "singularName": {
          "description": "Singular form of the display name of this category. e.g. Herb",
          "type": "string"
        }
      },
      "required": [
        "returnSeeds",
        "scaleXPWithQuantity",
        "harvestMultiplier",
        "masteryXPDivider",
        "giveXPOnPlant",
        "description",
        "seedNotice",
        "singularName"
      ],
      "unevaluatedProperties": false
    },
    "FarmingPlotData": {
      "description": "Data for constructing a FarmingPlot object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "categoryID": {
          "description": "The ID of the farming category of seeds that can be planted in this plot",
          "allOf": [
            {
              "$ref": "#/$defs/FarmingCategoryID"
            }
          ]
        },
        "level": {
          "description": "The farming skill level required to unlock this plot",
          "type": "integer",
          "minimum": 1
        },
        "gpCost": {
          "description": "The GP cost required to purchase this plot. If this is set to 0 and itemCosts are undefined, the plot will automatically be unlocked when the level requirement is met.",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "currencyCosts": {
          "description": "Optional. If present, defines currencies requred to purchase this plot. If this and itemCosts are undefined the plot will automatically be unlocked when the level requirement is met.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          },
          "minItems": 1
        },
        "itemCosts": {
          "description": "Optional. If present, defines items requred to purchase this plot. If this and currencyCosts are undefined the plot will automatically be unlocked when the level requirement is met.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        },
        "abyssalLevel": {
          "description": "Optional. The abyssal farming level required to unlock this plot",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "categoryID",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "FarmingRecipeData": {
      "description": "Data for constructing a FarmingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeData"
        }
      ],
      "properties": {
        "baseInterval": {
          "description": "The base time that it takes for the crop to grow in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "categoryID": {
          "description": "The ID of the Farming category this recipe belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/FarmingCategoryID"
            }
          ]
        },
        "seedCost": {
          "description": "The seeds required to plant this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantity"
            }
          ]
        },
        "grownMedia": {
          "description": "Optional. URI of image to display when the crop is fully grown",
          "type": "string",
          "format": "uri-reference"
        },
        "grownName": {
          "description": "Optional. Overrides the display name of the grown crop from this recipe's product's name",
          "type": "string"
        },
        "grownNameLang": {
          "description": "Optional. Language string Id to use for the grownName property",
          "type": "string"
        },
        "baseQuantity": {
          "description": "Optional. The base quantity produced. Defaults to 5",
          "type": "integer",
          "minimum": 1,
          "default": 5
        }
      },
      "required": [
        "baseInterval",
        "categoryID",
        "seedCost"
      ],
      "unevaluatedProperties": false
    },
    "FletchingRecipeData": {
      "description": "Data for constructing a FletchingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "subcategoryID": {
          "description": "Optional. Manually sets a subcategory for this recipe. Will be overridden by automatic assignment if applicable",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "alternativeCosts": {
          "description": "Optional. Defines additional costs for the recipe that the player must select one of",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "itemCosts": {
                "description": "The additional items required",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/AnyItemQuantity"
                },
                "minItems": 1
              },
              "quantityMultiplier": {
                "description": "Provides a multiplier to the base quantity of items made when crafting the recipe with these costs",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "itemCosts",
              "quantityMultiplier"
            ],
            "unevaluatedProperties": false
          },
          "minItems": 2
        }
      },
      "unevaluatedProperties": false
    },
    "FletchingRecipeModificationData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "subcategoryID": {
          "description": "Optional. Changes the subcategory for this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "alternativeCosts": {
          "description": "Optional. Defines new additional costs for the recipe that the player must select one of",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "itemCosts": {
                "description": "The additional items required",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/AnyItemQuantity"
                },
                "minItems": 1
              },
              "quantityMultiplier": {
                "description": "Provides a multiplier to the base quantity of items made when crafting the recipe with these costs",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "itemCosts",
              "quantityMultiplier"
            ],
            "unevaluatedProperties": false
          }
        }
      },
      "unevaluatedProperties": false
    },
    "CraftingRecipeData": {
      "description": "Data for constructing a CraftingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "subcategoryID": {
          "description": "Optional. Manually sets a subcategory for this recipe. Will be overridden by automatic assignment if applicable",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "CraftingRecipeModificationData": {
      "description": "Data for modifying a CraftingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "subcategoryID": {
          "description": "Optional. Changes the subcategory for this recipe",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "RunecraftingRecipeData": {
      "description": "Data for constructing a RunecraftingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "subcategories": {
          "description": "Optional. The ids of subcategories this recipe belongs to",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ValidID"
          }
        }
      },
      "unevaluatedProperties": false
    },
    "RunecraftingRecipeModificationData": {
      "description": "Data for modifying a RunecraftingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "subcategories": {
          "description": "Adds or removes subcategories from the recipe",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ValidID"
              }
            }
          },
          "unevaluatedProperties": false
        }
      },
      "unevaluatedProperties": false
    },
    "HerbloreRecipeData": {
      "description": "Data for constructing a HerbloreRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CategorizedArtisanRecipeData"
        }
      ],
      "properties": {
        "potionIDs": {
          "description": "The IDs of potion items that can be obtained at each tier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PotionItemID"
          },
          "minItems": 4,
          "maxItems": 4
        },
        "name": {
          "description": "The display name of the potion",
          "type": "string"
        }
      },
      "required": [
        "potionIDs",
        "name"
      ],
      "unevaluatedProperties": false
    },
    "HerbloreRecipeModificationData": {
      "description": "Data for modifying a HerbloreRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/CategorizedArtisanRecipeModificationData"
        }
      ],
      "properties": {
        "potionIDs": {
          "description": "Changes the potion items obtained at each tier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PotionItemID"
          },
          "minItems": 4,
          "maxItems": 4
        }
      },
      "unevaluatedProperties": false
    },
    "BaseAgilityObjectData": {
      "description": "Data for constructing a BaseAgilityObject object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the obstacle or pillar",
          "type": "string"
        },
        "itemCosts": {
          "description": "Items required to build the obstacle/pillar",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "currencyCosts": {
          "description": "Optional. Currencies required to build the obstacle/pillar",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "gpCost": {
          "description": "Deprecated. GP required to build the obstacle/pillar",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "scCost": {
          "description": "Deprecated. Slayer coins required to build the obstacle/pillar",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "modifiers": {
          "description": "Modifiers provided to the player by the obstacle/pillar",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. Effect Applicators merged with the player when this obstacle/pillar is active",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "enemyModifiers": {
          "description": "Optional. Modifiers provided to the enemy when this obstacle/pillar is active",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        }
      },
      "required": [
        "name",
        "itemCosts",
        "modifiers"
      ]
    },
    "BaseAgilityObjectModificationData": {
      "description": "Data for modifying a BaseAgilityObject object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "itemCosts": {
          "description": "Optional. Adds/removes items required to build the obstacle/pillar",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantitiesModificationData"
            }
          ]
        },
        "currencyCosts": {
          "description": "Optional. Adds/removes currencies required to build the obstacle/pillar",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantitiesModificationData"
            }
          ]
        },
        "modifiers": {
          "description": "Optional. Changes the modifiers provided to the player by the obstacle/pillar",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesModificationData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. Changes the effect Applicators merged with the player when this obstacle/pillar is active",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectApplicatorModificationData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Changes the modifiers provided to the enemy when this obstacle/pillar is active",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesModificationData"
            }
          ]
        }
      }
    },
    "AgilityObstacleData": {
      "description": "Data for constructing a AgilityObstacle object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseAgilityObjectData"
        }
      ],
      "properties": {
        "media": {
          "description": "URI of the obstacles image",
          "type": "string",
          "format": "uri-reference"
        },
        "category": {
          "description": "The tier of the agility obstacle. 0 indexed.",
          "type": "integer",
          "minimum": 0,
          "maximum": 14
        },
        "baseInterval": {
          "description": "The base time it takes to complete the obstacle in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "skillRequirements": {
          "description": "Non-Agility Skill levels the player is required to have before building this obstacle",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/SkillLevelRequirementData"
              },
              {
                "$ref": "#/$defs/AbyssalLevelRequirementData"
              }
            ]
          }
        },
        "baseExperience": {
          "description": "The base Agility experience granted when completing the obstacle",
          "type": "integer",
          "minimum": 0
        },
        "currencyRewards": {
          "description": "Optional. Currencies granted when completing the obstacle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "gpReward": {
          "description": "The base GP granted when completing the obstacle",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "scReward": {
          "description": "The base slayer coins granted when completing the obstacle",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "itemRewards": {
          "description": "Items granted when completing the obstacle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "baseAbyssalExperience": {
          "description": "Optional. The base Agility abyssal experience granted when completing the obstacle",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "media",
        "category",
        "baseInterval",
        "skillRequirements",
        "baseExperience",
        "itemRewards"
      ],
      "unevaluatedProperties": false
    },
    "AgilityObstacleModificationData": {
      "description": "Data for modifying an AgilityObstacle object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseAgilityObjectModificationData"
        }
      ],
      "properties": {
        "category": {
          "description": "Optional. Changes the tier of the agility obstacle. 0 indexed.",
          "type": "integer",
          "minimum": 0,
          "maximum": 14
        },
        "baseInterval": {
          "description": "Optional. Changes the base time it takes to complete the obstacle in [ms]",
          "type": "integer",
          "minimum": 1
        },
        "skillRequirements": {
          "description": "Optional. Adds/Removes non-Agility Skill levels the player is required to have before building this obstacle",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/SkillLevelRequirementData"
                  },
                  {
                    "$ref": "#/$defs/AbyssalLevelRequirementData"
                  }
                ]
              }
            },
            "remove": {
              "description": "Removes the skill level requirements with a matching skill IDs",
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          }
        },
        "baseExperience": {
          "description": "Optional. Changes the base Agility experience granted when completing the obstacle",
          "type": "integer",
          "minimum": 0
        },
        "currencyRewards": {
          "description": "Optional. Adds/Removes currencies granted when completing the obstacle",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyQuantitiesModificationData"
            }
          ]
        },
        "itemRewards": {
          "description": "Optional. Adds/Removes items granted when completing the obstacle",
          "type": "array",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantitiesModificationData"
            }
          ]
        },
        "baseAbyssalExperience": {
          "description": "Optional. Changes the base Agility abyssal experience granted when completing the obstacle",
          "type": "integer",
          "minimum": 0
        }
      },
      "unevaluatedProperties": false
    },
    "AgilityPillarData": {
      "description": "Data for constructing a AgilityPillar object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseAgilityObjectData"
        }
      ],
      "properties": {
        "slot": {
          "description": "The index of the slot that the pillar belongs to. 0 indexed.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "slot"
      ],
      "unevaluatedProperties": false
    },
    "AgilityPillarModificationData": {
      "description": "Data for modifying an AgilityPillar object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseAgilityObjectModificationData"
        }
      ],
      "properties": {
        "slot": {
          "description": "Optional. Changes the index of the slot that the pillar belongs to. 0 indexed.",
          "type": "integer",
          "minimum": 0
        }
      },
      "unevaluatedProperties": false
    },
    "AgilityObstacleSlot": {
      "type": "object",
      "properties": {
        "level": {
          "description": "The Agility level required to build obstacles/pillars in this slot",
          "type": "integer",
          "minimum": 1
        },
        "abyssalLevel": {
          "description": "Optional. The Abyssal Agility level required to build obstacles/pillars in this slot",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "level"
      ]
    },
    "AgilityPillarSlot": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/AgilityObstacleSlot"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the type of pillar",
          "type": "string"
        },
        "nameLang": {
          "description": "Optional. ID of language string to use for the name property",
          "type": "string"
        },
        "obstacleCount": {
          "description": "The number of obstacles that must be sequentially built for this pillar slot to be active",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "name",
        "obstacleCount"
      ],
      "unevaluatedProperties": false
    },
    "AgilityCourseData": {
      "description": "Data for constructing an AgilityCourse object",
      "type": "object",
      "properties": {
        "realm": {
          "description": "The ID of the realm this course belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "obstacleSlots": {
          "description": "Determines how many obstacles exist in this course, as well as their level/abyssal level requirements",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/AgilityObstacleSlot"
              }
            ],
            "unevaluatedProperties": false
          }
        },
        "pillarSlots": {
          "description": "Determines how many passive pillars exist in this course, as well as their level/abyssal level requirements, and obstacle requirements",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityPillarSlot"
          }
        }
      },
      "required": [
        "realm",
        "obstacleSlots",
        "pillarSlots"
      ],
      "unevaluatedProperties": false
    },
    "SummoningCategoryData": {
      "description": "Data for constructing a SummoningCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SkillCategoryData"
        }
      ],
      "properties": {
        "type": {
          "description": "Determines the functionality when selecting this category. Defaults to Tablet.",
          "type": "string",
          "enum": [
            "Mark",
            "Tablet",
            "Synergy"
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "SummoningRecipeData": {
      "description": "Data for constructing a SummoningRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeData"
        }
      ],
      "properties": {
        "markMedia": {
          "description": "URI of the Summoning marks media shown on the Marks tab",
          "type": "string",
          "format": "uri-reference"
        },
        "nonShardItemCosts": {
          "description": "The IDs of non shard items that are options to make the Summoning Tablet. Quantity required is determined by the item's sale price. If left empty, the recipe has no non-shard item cost.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "tier": {
          "description": "The tier of the summoning mark",
          "type": "integer",
          "minimum": 1,
          "maximum": 5
        },
        "skillIDs": {
          "description": "The IDs of skills that this mark can be obtained from",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          }
        },
        "maxMarkLevel": {
          "description": "Optional. Defines the maximum Summoning Mark level this familiar can reach. Defaults to 6.",
          "type": "integer",
          "minimum": 1,
          "maximum": 6
        }
      },
      "required": [
        "markMedia",
        "nonShardItemCosts",
        "tier",
        "skillIDs"
      ],
      "unevaluatedProperties": false
    },
    "SummoningRecipeModificationData": {
      "description": "Data for modifying a SummoningRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductArtisanSkillRecipeModificationData"
        }
      ],
      "properties": {
        "nonShardItemCosts": {
          "description": "Optional. Adds/Removes the non shard items that are options to make the Summoning Tablet",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "additionalProperties": false
        },
        "tier": {
          "description": "Optional. Changes the tier of the summoning mark",
          "type": "integer",
          "minimum": 1,
          "maximum": 5
        },
        "skillIDs": {
          "description": "Optional. Adds/Removes skills that this mark can be obtained from",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          },
          "additionalProperties": false
        },
        "maxMarkLevel": {
          "description": "Optional. Changes the maximum Summoning Mark level this familiar can reach",
          "type": "integer",
          "minimum": 1,
          "maximum": 6
        }
      },
      "unevaluatedProperties": false
    },
    "SummoningSynergyData": {
      "description": "The data required to construct a SummoningSynergy object",
      "type": "object",
      "properties": {
        "summonIDs": {
          "description": "The IDs of the two summoning actions that are required for the synergy",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SummoningActionID"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "customDescription": {
          "description": "Displayed description for the synergies effect",
          "type": "string"
        },
        "modifiers": {
          "description": "Modifiers given to the player when the synergy is active",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Combat Modifiers given to the enemy when the synergy is active",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "conditionalModifiers": {
          "description": "Optional. Conditional modifiers that are active when the synergy is active",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConditionalModifierData"
          },
          "minItems": 1
        },
        "combatEffects": {
          "description": "Optional. CombatEffects provided to the player in combat at the specified times.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "consumesOn": {
          "description": "Game event matchers that determine when the synergy tablets should be consumed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GameEventMatcherData"
          },
          "minItems": 1
        }
      },
      "required": [
        "summonIDs",
        "modifiers",
        "consumesOn"
      ],
      "unevaluatedProperties": false
    },
    "AstrologyModifierData": {
      "description": "Data for constructing a AstrologyModifier object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "maxCount": {
          "description": "The maximum number of times this modifier can be bought",
          "type": "integer",
          "minimum": 1
        },
        "costs": {
          "description": "The quantity of stardust required to buy each level of the modifier. Must have a length of at least maxCount",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          },
          "minItems": 1
        },
        "unlockRequirements": {
          "description": "Optional. Requirements the player must meet before being able to use study this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        }
      },
      "required": [
        "maxCount",
        "costs"
      ],
      "unevaluatedProperties": false
    },
    "AstrologyModifierModificationData": {
      "description": "Data for modifying an AstrologyModifier object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IStatObjectModificationData"
        }
      ],
      "properties": {
        "index": {
          "description": "The index of the modifier to modify",
          "type": "integer",
          "minimum": 0
        },
        "maxCount": {
          "description": "Optional. Sets the maximum number of times this modifier can be bought",
          "type": "integer",
          "minimum": 1
        },
        "costs": {
          "description": "Optional. Modifies/Adds the quantity of stardust required to buy each level of the modifier.",
          "type": "object",
          "properties": {
            "modify": {
              "description": "Modifies the quantity of stardust required to buy a level of the modifier",
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "minimum": 0
                },
                "value": {
                  "type": "integer",
                  "minimum": 1
                }
              },
              "required": [
                "index",
                "value"
              ]
            },
            "add": {
              "description": "Adds new costs to buy a level of the modifier",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 1
              }
            }
          },
          "additionalProperties": false
        },
        "unlockRequirements": {
          "description": "Optional. Adds/removes requirements the player must meet before being able to study this constellation",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            },
            "remove": {
              "description": "Removes all requirements of the given types",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "required": [
        "index"
      ],
      "unevaluatedProperties": false
    },
    "AstrologyRecipeData": {
      "description": "Data for constructing a AstrologyRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the constellation",
          "type": "string"
        },
        "media": {
          "description": "The URI of the constellations image",
          "type": "string",
          "format": "uri-reference"
        },
        "skillIDs": {
          "description": "The skills associated with this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillID"
          }
        },
        "randomItems": {
          "description": "Optional. Specifies the random items that can be received from this constellation. Defaults to startdust + golden stardust",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          }
        },
        "canLocateMeteorites": {
          "description": "Optional. Whether this constellation can locate Meteorites. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "canLocateStarfalls": {
          "description": "Optional. Whether this constellation can locate Starfalls. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "standardModifiers": {
          "description": "The standard modifiers of this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyModifierData"
          },
          "minItems": 0,
          "maxItems": 3
        },
        "uniqueModifiers": {
          "description": "The unique modifiers of this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyModifierData"
          },
          "minItems": 0,
          "maxItems": 3
        },
        "abyssalModifiers": {
          "description": "Optional. The abyssal modifiers of this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyModifierData"
          },
          "minItems": 0,
          "maxItems": 4
        },
        "masteryXPModifier": {
          "description": "Optional. The key of an mastery XP modifier that depends on the number of max level modifiers",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierID"
            }
          ]
        }
      },
      "required": [
        "name",
        "media",
        "skillIDs",
        "standardModifiers",
        "uniqueModifiers"
      ],
      "unevaluatedProperties": false
    },
    "AstrologyRecipeModificationData": {
      "description": "Data for modifying an AstrologyRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeModificationData"
        }
      ],
      "properties": {
        "skillIDs": {
          "description": "Optional. Adds/Removes skills associated with this constellation",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/SkillID"
              }
            }
          },
          "additionalProperties": false
        },
        "randomItems": {
          "description": "Optional. Adds/Removes random items that can be received from this constellation. Defaults to startdust + golden stardust",
          "type": "object",
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyItemID"
              }
            }
          },
          "additionalProperties": false
        },
        "canLocateMeteorites": {
          "description": "Optional. Sets whether this constellation can locate Meteorites.",
          "type": "boolean"
        },
        "canLocateStarfalls": {
          "description": "Optional. Sets whether this constellation can locate Starfalls.",
          "type": "boolean"
        },
        "standardModifiers": {
          "description": "Optional. Modifies the standard modifiers of this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyModifierModificationData"
          }
        },
        "uniqueModifiers": {
          "description": "Optional. Modifies the unique modifiers of this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyModifierModificationData"
          }
        },
        "abyssalModifiers": {
          "description": "Optional. Modifies the abyssal modifiers of this constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyModifierModificationData"
          }
        },
        "masteryXPModifier": {
          "description": "Optional. Sets the mastery XP modifier that depends on the number of max level modifiers in this constellation",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "TownshipBuildingCostData": {
      "type": "object",
      "properties": {
        "biomeID": {
          "description": "The ID of the biome costs apply to",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipBiomeID"
            }
          ]
        },
        "cost": {
          "description": "The resource costs to apply",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipResourceQuantity"
          }
        }
      },
      "required": [
        "biomeID",
        "cost"
      ],
      "unevaluatedProperties": false
    },
    "TownshipResourceQuantity": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the resource",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipResourceID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the resource",
          "type": "number"
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "unevaluatedProperties": false
    },
    "TownshipResourceData": {
      "description": "Data for constructing a TownshipResource object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the resource",
          "type": "string"
        },
        "media": {
          "description": "URI of the resources image",
          "type": "string",
          "format": "uri-reference"
        },
        "type": {
          "description": "The type of the resource. Currency for GP. Raw otherwise.",
          "type": "string",
          "enum": [
            "Currency",
            "Raw"
          ]
        },
        "startingAmount": {
          "description": "The amount of this resource the player starts with",
          "type": "integer",
          "minimum": 0
        },
        "storageType": {
          "description": "Optional. The storage this resources uses. Defaults to Normal.",
          "type": "string",
          "enum": [
            "Normal",
            "Soul"
          ]
        }
      },
      "required": [
        "name",
        "media",
        "type",
        "startingAmount"
      ],
      "unevaluatedProperties": false
    },
    "TownshipBiomeData": {
      "description": "Data for constructing a TownshipBiome object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the biome",
          "type": "string"
        },
        "media": {
          "description": "URI of the biomes image",
          "type": "string",
          "format": "uri-reference"
        },
        "tier": {
          "description": "The Tier of Biome. Determines Population and level requirements to build in it.",
          "type": "integer",
          "minimum": 1,
          "maximum": 8
        },
        "abyssalTier": {
          "description": "Optional. The Abyssal Tier of the Biome. Determines Fortification and Abyssal Level requirements to build in it.",
          "type": "integer",
          "minimum": 0,
          "maximum": 7,
          "default": 0
        },
        "requirements": {
          "description": "The requirements that must be met to construct inside this biome",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          },
          "minItems": 1
        }
      },
      "required": [
        "name",
        "media",
        "tier"
      ],
      "unevaluatedProperties": false
    },
    "TownshipBuildingProvidesData": {
      "type": "object",
      "properties": {
        "biomeID": {
          "description": "The ID of the TownshipBiome where these stats are provided",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipBiomeID"
            }
          ]
        },
        "population": {
          "description": "Base Population provided by the building",
          "type": "integer",
          "minimum": 0
        },
        "happiness": {
          "description": "Base Happiness provided by the building",
          "type": "number"
        },
        "education": {
          "description": "Base Education provided by the building",
          "type": "number",
          "minimum": 0
        },
        "storage": {
          "description": "Resource storage cap provided by the building",
          "type": "integer",
          "minimum": 0
        },
        "resources": {
          "description": "Resource production provided by the building",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipResourceQuantity"
          }
        },
        "worship": {
          "description": "Optional. Base worship provided by the building",
          "type": "integer",
          "minimum": 1
        },
        "fortification": {
          "description": "Optional. Base Fortification provided by the building",
          "type": "number",
          "minimum": 0
        },
        "soulStorage": {
          "description": "Optional. Base soul storage cap provided by the building",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "biomeID",
        "population",
        "happiness",
        "education",
        "storage",
        "resources"
      ],
      "unevaluatedProperties": false
    },
    "TownshipBuildingData": {
      "description": "Data for constructing a TownshipBuilding object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the building",
          "type": "string"
        },
        "media": {
          "description": "URI of the buildings image",
          "type": "string",
          "format": "uri-reference"
        },
        "tier": {
          "description": "The tier of the building. Determines Township Level and population requirements.",
          "type": "integer",
          "minimum": 1,
          "maximum": 8
        },
        "upgradesFrom": {
          "description": "Optional. The ID of the TownshipBuilding this upgrades from",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipBuildingID"
            }
          ]
        },
        "cost": {
          "description": "The township resource costs to build the building per biome",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipBuildingCostData"
          }
        },
        "provides": {
          "description": "The stats that this building provides to the town",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipBuildingProvidesData"
          }
        },
        "biomes": {
          "description": "The IDs of TownshipBiomes that this building can be built in",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipBiomeID"
          },
          "minItems": 1
        },
        "maxUpgrades": {
          "description": "The maximum number of times this building can be upgraded",
          "type": "integer",
          "minimum": 1
        },
        "canDegrade": {
          "description": "Optional. Whether the building degrades over time",
          "type": "boolean"
        },
        "abyssalTier": {
          "description": "Optional. The Abyssal Tier of the Building. Determines Fortification and Abyssal Level requirements to build this building",
          "type": "integer",
          "minimum": 0,
          "maximum": 7,
          "default": 0
        },
        "requirements": {
          "description": "The requirements that must be met to construct this building",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          },
          "minItems": 1
        }
      },
      "required": [
        "name",
        "media",
        "tier",
        "cost",
        "provides",
        "biomes",
        "maxUpgrades"
      ],
      "unevaluatedProperties": false
    },
    "TownshipWorshipData": {
      "description": "Data for constructing a TownshipWorship object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the worship",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "media": {
          "description": "URI of the worships image",
          "type": "string",
          "format": "uri-reference"
        },
        "modifiers": {
          "description": "Modifiers that are always provided by this worship",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "isHidden": {
          "description": "If this worship should be hidden from the player",
          "type": "boolean"
        },
        "checkpoints": {
          "description": "Modifiers that are provided as each worship checkpoint is reached",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierValuesRecordData"
          },
          "minItems": 5,
          "maxItems": 5
        },
        "unlockRequirements": {
          "description": "Requirements the player must meet before being able to use this worship",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "statueName": {
          "description": "The display name of the statue building when this worship is selected",
          "type": "string"
        },
        "statueMedia": {
          "description": "The URI of the statue buildings image when this worship is selected",
          "type": "string",
          "format": "uri-reference"
        },
        "seasonMultiplier": {
          "description": "Defines seasons where the positive modifiers of this worship are multiplied by a value",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipWorshipSeasonMultiplierData"
          }
        }
      },
      "required": [
        "name",
        "description",
        "media",
        "modifiers",
        "isHidden",
        "checkpoints",
        "unlockRequirements",
        "statueName",
        "statueMedia",
        "seasonMultiplier"
      ],
      "unevaluatedProperties": false
    },
    "TownshipWorshipSeasonMultiplierData": {
      "type": "object",
      "properties": {
        "seasonID": {
          "description": "The ID of the TownshipSeason the multiplier applies to",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipSeasonID"
            }
          ]
        },
        "multiplier": {
          "description": "The value to multiply the positive modifiers of the worship by",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "seasonID",
        "multiplier"
      ],
      "unevaluatedProperties": false
    },
    "TownshipTaskGoalsData": {
      "description": "The requirements for completing the task",
      "type": "object",
      "properties": {
        "items": {
          "description": "Items that must be handed in to complete the task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "monsters": {
          "description": "Monsters that must be killed to complete the task",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the monster that must be killed",
                "allOf": [
                  {
                    "$ref": "#/$defs/MonsterID"
                  }
                ]
              },
              "quantity": {
                "description": "The number of times the mosnter must be killed",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "id",
              "quantity"
            ],
            "unevaluatedProperties": false
          }
        },
        "skillXP": {
          "description": "Skill XP that must be earned to complete the task",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the skill that must earn XP",
                "allOf": [
                  {
                    "$ref": "#/$defs/SkillID"
                  }
                ]
              },
              "quantity": {
                "description": "The amount of skill XP that must be earned",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "id",
              "quantity"
            ],
            "unevaluatedProperties": false
          }
        },
        "buildings": {
          "description": "Township Buildings that must be actively built to complete the task",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The id of the building that must be built",
                "allOf": [
                  {
                    "$ref": "#/$defs/TownshipBuildingID"
                  }
                ]
              },
              "quantity": {
                "description": "The number of buildings that must be built",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "id",
              "quantity"
            ],
            "unevaluatedProperties": false
          }
        },
        "monsterWithItems": {
          "description": "Monsters that must be killed while the specified items are equipped to complete the task",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "monsterID": {
                "description": "The ID of the Monster that must be killed",
                "allOf": [
                  {
                    "$ref": "#/$defs/MonsterID"
                  }
                ]
              },
              "itemIDs": {
                "description": "The IDs of EquipmentItems that the player must wear",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/EquipmentItemID"
                }
              },
              "quantity": {
                "description": "The number of times the monster must be killed",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "monsterID",
              "itemIDs",
              "quantity"
            ],
            "unevaluatedProperties": false
          }
        },
        "numPOIs": {
          "description": "Total number of POIs to discover to complete the task",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "worldMapID": {
                "description": "The ID of the World Map",
                "allOf": [
                  {
                    "$ref": "#/$defs/WorldMapID"
                  }
                ]
              },
              "quantity": {
                "description": "The number of Points of Interest to discover",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "worldMapID",
              "quantity"
            ],
            "unevaluatedProperties": false
          }
        },
        "numRefinements": {
          "description": "Total number of dig site refinements required complete the task",
          "type": "number",
          "minimum": 1
        }
      },
      "minProperties": 1,
      "unevaluatedProperties": false
    },
    "TownshipTaskRewardsData": {
      "description": "The rewards given for completing the task",
      "type": "object",
      "properties": {
        "gp": {
          "description": "GP awarded upon completion of the task",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "slayerCoins": {
          "description": "Slayer coins awarded upon completion of the task",
          "type": "integer",
          "minimum": 0,
          "deprecated": true
        },
        "currencies": {
          "description": "Currencies awarded upon completion of the task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          }
        },
        "items": {
          "description": "Items awarded upon completion of the task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          }
        },
        "skillXP": {
          "description": "Skill experience awarded upon completion of the task",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the skill to grant XP",
                "allOf": [
                  {
                    "$ref": "#/$defs/SkillID"
                  }
                ]
              },
              "quantity": {
                "description": "The amount of skill XP rewarded",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "id",
              "quantity"
            ],
            "unevaluatedProperties": false
          }
        },
        "townshipResources": {
          "description": "Township resources awarded upon completion of the task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipResourceQuantity"
          }
        }
      },
      "required": [
        "items",
        "skillXP",
        "townshipResources"
      ],
      "unevaluatedProperties": false
    },
    "TownshipTaskCategoryData": {
      "description": "Data for constructing a TownshipTaskCategory object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the category",
          "type": "string"
        },
        "nameLang": {
          "description": "Optional. ID of language string to use for the name property",
          "type": "string"
        },
        "media": {
          "description": "URI of the categories icon",
          "type": "string",
          "format": "uri-reference"
        },
        "bgClass": {
          "description": "CSS class used for the background colour of task menus",
          "type": "string"
        }
      },
      "required": [
        "name",
        "media",
        "bgClass"
      ],
      "unevaluatedProperties": false
    },
    "BaseTownshipTaskData": {
      "description": "Data for constructing a BaseTownshipTask object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "description": {
          "description": "Optional. A description of the task",
          "type": "string"
        },
        "goals": {
          "$ref": "#/$defs/TownshipTaskGoalsData"
        },
        "rewards": {
          "$ref": "#/$defs/TownshipTaskRewardsData"
        }
      },
      "required": [
        "goals",
        "rewards"
      ]
    },
    "TownshipTaskData": {
      "description": "Data for constructing a TownshipTask object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseTownshipTaskData"
        },
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "properties": {
        "category": {
          "description": "The category of the task. This is used to group tasks together",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipTaskCategoryID"
            }
          ]
        }
      },
      "required": [
        "category"
      ],
      "unevaluatedProperties": false
    },
    "TownshipCasualTaskData": {
      "description": "Data for constructing a TownshipCasualTask object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseTownshipTaskData"
        }
      ],
      "properties": {
        "requirements": {
          "description": "Requirements the player must meet before starting the task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        }
      },
      "required": [
        "requirements"
      ],
      "unevaluatedProperties": false
    },
    "TownshipSeasonData": {
      "description": "Data for constructing a TownshipSeason object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the season",
          "type": "string"
        },
        "media": {
          "description": "The URI of the seasons image",
          "type": "string",
          "format": "uri-reference"
        },
        "order": {
          "description": "Determines the order in which this season occurs",
          "type": "integer",
          "minimum": 0
        },
        "seasonLength": {
          "description": "The number of Township Ticks (1 hour) that the season lasts",
          "type": "integer",
          "minimum": 1
        },
        "disableWorshipChange": {
          "description": "If the player should be unable to change their current worship while the season is active",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "media",
        "order",
        "seasonLength",
        "disableWorshipChange"
      ],
      "unevaluatedProperties": false
    },
    "TownshipItemConversionData": {
      "type": "object",
      "properties": {
        "toTownship": {
          "description": "Defines conversions from Items to TownshipResources",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipResourceItemConversionData"
          }
        },
        "fromTownship": {
          "description": "Defines conversions from TownshipResources to Items",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipResourceItemConversionData"
          }
        }
      },
      "required": [
        "toTownship",
        "fromTownship"
      ],
      "unevaluatedProperties": false
    },
    "TownshipResourceItemConversionData": {
      "type": "object",
      "properties": {
        "resourceID": {
          "description": "The ID of the TownshipResource that can be converted",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipResourceID"
            }
          ]
        },
        "items": {
          "description": "Item conversions that are possible with the resource",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipSingleItemConversionData"
          }
        }
      },
      "required": [
        "resourceID",
        "items"
      ],
      "unevaluatedProperties": false
    },
    "TownshipSingleItemConversionData": {
      "description": "Data for constructing a TownshipItemConversion object",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the Item that can be converted",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "unlockRequirements": {
          "description": "Requirements the player must meet before unlocking this conversion",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "baseCost": {
          "description": "Optional. Set a custom conversion rate for this Item",
          "type": "number",
          "minimum": 1
        }
      },
      "required": [
        "itemID",
        "unlockRequirements"
      ],
      "unevaluatedProperties": false
    },
    "PointData": {
      "type": "object",
      "properties": {
        "x": {
          "description": "x-coordinate or width",
          "type": "number"
        },
        "y": {
          "description": "y-coordinate or height",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "unevaluatedProperties": false
    },
    "HexCoordData": {
      "type": "object",
      "properties": {
        "q": {
          "description": "q - axial coordinate",
          "type": "number"
        },
        "r": {
          "description": "r - axial coordinate",
          "type": "number"
        }
      },
      "required": [
        "q",
        "r"
      ],
      "unevaluatedProperties": false
    },
    "FastTravelGroupData": {
      "description": "Data for constructing a FastTravelGroup object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the group",
          "type": "string"
        },
        "media": {
          "description": "URI of the icon to display for discovered pois in this group on the world map",
          "type": "string",
          "format": "uri-reference"
        }
      },
      "required": [
        "name",
        "media"
      ],
      "unevaluatedProperties": false
    },
    "HexColour": {
      "type": "string",
      "pattern": "[0-9A-F]{6}"
    },
    "PointOfInterestData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "coords": {
          "description": "Axial Hex Coordinates of POIs location",
          "allOf": [
            {
              "$ref": "#/$defs/HexCoordData"
            }
          ]
        },
        "name": {
          "description": "English display name of POI",
          "type": "string"
        },
        "description": {
          "description": "English description of POI",
          "type": "string"
        },
        "media": {
          "description": "URI of POIs image to be displayed in the hex overview",
          "type": "string",
          "format": "uri-reference"
        },
        "activeStats": {
          "description": "Optional. Stats provided to the player if they are located at the point of interest",
          "allOf": [
            {
              "$ref": "#/$defs/IStatObjectData"
            }
          ]
        },
        "fastTravel": {
          "description": "Optional. If present allows fast travel between this POI and other POIs that share the same group",
          "type": "object",
          "properties": {
            "groupID": {
              "description": "ID of the FastTravelGroup this poi belongs to",
              "type": "string"
            },
            "unlockCosts": {
              "description": "Optional. One time costs to unlock fast traveling to this poi",
              "allOf": [
                {
                  "$ref": "#/$defs/FixedCostsData"
                }
              ]
            }
          },
          "required": [
            "groupID"
          ]
        },
        "discoveryRewards": {
          "description": "Optional. GP, Slayer Coins or Items given when the POI is discovered",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsData"
            }
          ]
        },
        "discoveryModifiers": {
          "description": "Optional. Temporary modifiers given to the player, that last a number of moves on the world map, when the POI is discovered",
          "type": "object",
          "properties": {
            "moves": {
              "description": "The number of moves on the world map the player must make until these modifiers expire",
              "type": "integer",
              "minimum": 1,
              "maximum": 255
            },
            "modifiers": {
              "description": "The modifiers that are temporarily given to the player",
              "allOf": [
                {
                  "$ref": "#/$defs/ModifierValuesRecordData"
                }
              ]
            }
          },
          "required": [
            "moves",
            "modifiers"
          ]
        },
        "hidden": {
          "description": "Optional. If present, the POI will be hidden from the player until they meet the requirements and are located at the hex and are wearing the specified items.",
          "type": "object",
          "properties": {
            "requirements": {
              "description": "Requirements the player must meet before discovering this hidden POI",
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            },
            "itemsWorn": {
              "description": "IDs of the equipment items the player must wear to discover this hidden POI",
              "type": "array",
              "items": {
                "$ref": "#/$defs/EquipmentItemID"
              }
            },
            "showMarker": {
              "description": "If a marker should be shown on the map when the requirements are met",
              "type": "boolean"
            }
          },
          "required": [
            "requirements",
            "itemsWorn",
            "showMarker"
          ]
        }
      },
      "required": [
        "coords",
        "name",
        "description",
        "media"
      ]
    },
    "OtherPOIData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/PointOfInterestData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "Other"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "DigSitePOIData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/PointOfInterestData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "DigSite"
        },
        "digSiteID": {
          "description": "ID of the Archaeology Dig Site this POI links to",
          "type": "string",
          "allOf": [
            {
              "$ref": "#/$defs/ArchaeologyDigSiteID"
            }
          ]
        }
      },
      "required": [
        "type",
        "digSiteID"
      ],
      "unevaluatedProperties": false
    },
    "WatchtowerData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/PointOfInterestData"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "Watchtower"
        },
        "towerRange": {
          "description": "Range in hexes around the tower to reveal the map",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "type",
        "towerRange"
      ],
      "unevaluatedProperties": false
    },
    "PortalPOIData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/PointOfInterestData"
        }
      ],
      "properties": {
        "originWorldMap": {
          "description": "ID of the World Map that this portal resides in",
          "allOf": [
            {
              "$ref": "#/$defs/WorldMapID"
            }
          ]
        }
      },
      "required": [
        "originWorldMap"
      ],
      "unevaluatedProperties": false
    },
    "AnyPoiData": {
      "description": "Data for constructing AnyPointOfInterest",
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/OtherPOIData"
        },
        {
          "$ref": "#/$defs/DigSitePOIData"
        },
        {
          "$ref": "#/$defs/WatchtowerData"
        }
      ]
    },
    "HexData": {
      "description": "Data for constructing a Hex object",
      "type": "object",
      "properties": {
        "coordinates": {
          "description": "Axial coordinates of the hex",
          "allOf": [
            {
              "$ref": "#/$defs/HexCoordData"
            }
          ]
        },
        "maxSurveyLevel": {
          "description": "Maximum Survey level of the hex",
          "type": "integer",
          "minimum": 1
        },
        "maxMasteryLevel": {
          "description": "Maximum Mastery level of the hex",
          "type": "integer",
          "minimum": 1
        },
        "requirements": {
          "description": "Requirements the player must meet in order to survey this hex",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          },
          "uniqueItems": true
        },
        "travelCost": {
          "description": "Costs required for the player to travel to this hex",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsData"
            }
          ]
        },
        "isWater": {
          "description": "If the hex is considered to be water",
          "type": "boolean"
        }
      },
      "required": [
        "coordinates",
        "maxSurveyLevel",
        "maxMasteryLevel",
        "requirements",
        "travelCost",
        "isWater"
      ],
      "unevaluatedProperties": false
    },
    "WorldMapMasteryBonusData": {
      "description": "Data for constructing a WorldMapMasteryBonus object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "masteredHexes": {
          "description": "The number of hexes that must be mastered to receive the bonus",
          "type": "integer",
          "minimum": 0
        },
        "pets": {
          "description": "Optional. The IDs of pets that are unlocked when reaching this bonus",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PetID"
          },
          "minItems": 1
        },
        "gp": {
          "description": "Optional. GP to give to the player when reaching this bonus",
          "type": "integer",
          "minimum": 1,
          "deprecated": true
        },
        "sc": {
          "description": "Optional. Slayer Coins to give to the player when reaching this bonus",
          "type": "integer",
          "minimum": 1,
          "deprecated": true
        },
        "currencies": {
          "description": "Optional. Currencies to give to the player when reaching this bonus",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          },
          "minItems": 1
        },
        "items": {
          "description": "Optional. Items to give to the player when reaching this bonus",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        }
      },
      "required": [
        "masteredHexes"
      ],
      "unevaluatedProperties": false
    },
    "WorldMapData": {
      "description": "Data for constructing a WorldMap object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the World Map",
          "type": "string"
        },
        "bgTiles": {
          "description": "Determines the images that will be used as tiles for the map background",
          "type": "object",
          "properties": {
            "dimensions": {
              "description": "Defines the number of tiles in the x and y direction",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/PointData"
                }
              ]
            },
            "tileSize": {
              "description": "The size in pixels of an individual tile",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/PointData"
                }
              ]
            },
            "tilePath": {
              "description": "The path to the root folder that contains each map tile texture. High quality files should be tile_${i}_${j}@1x.png, Medium should be tile_${i}_${j}@1x.basis and Low should be tile_${i}_${j}@0.5x.basis",
              "type": "string",
              "format": "uri-reference"
            }
          },
          "required": [
            "dimensions",
            "tileSize",
            "tilePath"
          ],
          "unevaluatedProperties": false
        },
        "worldSize": {
          "description": "Height and Width of the world in pixels",
          "allOf": [
            {
              "$ref": "#/$defs/PointData"
            }
          ]
        },
        "hexScale": {
          "description": "Height and Width scaling of hexes in the map. Scales the height and width of a unit hexagon.",
          "allOf": [
            {
              "$ref": "#/$defs/PointData"
            }
          ]
        },
        "hexBorderColour": {
          "description": "The hex colour representation that is used for hex borders",
          "allOf": [
            {
              "$ref": "#/$defs/HexColour"
            }
          ]
        },
        "activePOIBorderColour": {
          "description": "The hex colour representation that is used for the border of hexes with active points of interest",
          "allOf": [
            {
              "$ref": "#/$defs/HexColour"
            }
          ]
        },
        "origin": {
          "description": "Determines the origin of the map that hex coordinates are computed relative to.",
          "allOf": [
            {
              "$ref": "#/$defs/PointData"
            }
          ]
        },
        "startingLocation": {
          "description": "Determines the players starting location on the map",
          "allOf": [
            {
              "$ref": "#/$defs/HexCoordData"
            }
          ]
        },
        "fastTravelGroups": {
          "description": "Registers FastTravelGroups for this map",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FastTravelGroupData"
          }
        },
        "pointsOfInterest": {
          "description": "Registers PointsOfInterest for this map",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyPoiData"
          }
        },
        "hexes": {
          "description": "Data for Hex objects for this map",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HexData"
          }
        },
        "masteryBonuses": {
          "description": "Data for WorldMapMasteryBonus objects for this map",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WorldMapMasteryBonusData"
          }
        }
      },
      "required": [
        "name",
        "bgTiles",
        "worldSize",
        "hexScale",
        "hexBorderColour",
        "activePOIBorderColour",
        "origin",
        "startingLocation",
        "fastTravelGroups",
        "pointsOfInterest",
        "hexes",
        "masteryBonuses"
      ],
      "unevaluatedProperties": false
    },
    "WorldMapPortalData": {
      "type": "object",
      "properties": {
        "portalA": {
          "description": "Point of interest data for the first portal",
          "allOf": [
            {
              "$ref": "#/$defs/PortalPOIData"
            }
          ]
        },
        "portalB": {
          "description": "Point of interest data for the second portal",
          "allOf": [
            {
              "$ref": "#/$defs/PortalPOIData"
            }
          ]
        }
      },
      "required": [
        "portalA",
        "portalB"
      ],
      "unevaluatedProperties": false
    },
    "FixedCostsBase": {
      "type": "object",
      "properties": {
        "gp": {
          "description": "GP to give/take from the player",
          "type": "integer",
          "deprecated": true
        },
        "sc": {
          "description": "Slayer Coins to give/take from the player",
          "type": "integer",
          "deprecated": true
        },
        "currencies": {
          "description": "Currencies to give/take from the player",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          },
          "minItems": 1
        },
        "items": {
          "description": "Items to give/take from the player",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        }
      }
    },
    "FixedCostsData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/FixedCostsBase"
        }
      ],
      "minProperties": 1,
      "unevaluatedProperties": false
    },
    "AnyItemQuantityZero": {
      "description": "Same as FixedCostsData, but allows quantity of zero",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of any Item",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the item",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "additionalProperties": false
    },
    "CurrencyQuantityZero": {
      "description": "Same as FixedCostsData, but allows quantity of zero",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the currency",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the currency",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "additionalProperties": false
    },
    "FixedCostsDataZero": {
      "description": "Same as FixedCostsData, but allows quantities of zero",
      "type": "object",
      "properties": {
        "gp": {
          "description": "GP to give/take from the player",
          "type": "integer",
          "deprecated": true
        },
        "sc": {
          "description": "Slayer Coins to give/take from the player",
          "type": "integer",
          "deprecated": true
        },
        "currencies": {
          "description": "Currencies to give/take from the player",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantityZero"
          },
          "minItems": 1
        },
        "items": {
          "description": "Items to give/take from the player",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantityZero"
          },
          "minItems": 1
        }
      }
    },
    "RandomTravelEventData": {
      "description": "Data for constructing a RandomTravelEvent object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "weight": {
          "description": "Weight of event occuring relative to other events",
          "type": "integer",
          "minimum": 1
        },
        "description": {
          "description": "English description to display to the player of event",
          "type": "string"
        },
        "rewards": {
          "description": "Optional rewards to give to the player if the event is rolled",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsDataZero"
            }
          ]
        },
        "itemsRequired": {
          "description": "Items that the player must have in the bank for the event to trigger. Items are consumed when the event triggers.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        },
        "tempBonuses": {
          "description": "Temporary modifiers given to the player when the event triggers. Modifiers are removed when the player moves to a new hex.",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        }
      },
      "required": [
        "weight",
        "description"
      ],
      "unevaluatedProperties": false
    },
    "PaperMakingRecipeData": {
      "description": "Data for constructing a PaperMakingRecipe object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SingleProductRecipeData"
        }
      ],
      "properties": {
        "baseQuantity": {
          "description": "Base quantity of paper to make",
          "type": "integer",
          "minimum": 1
        },
        "costs": {
          "description": "Base costs to make this paper recipe",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsData"
            }
          ]
        }
      },
      "required": [
        "baseQuantity",
        "costs"
      ],
      "unevaluatedProperties": false
    },
    "DigSiteArtefactData": {
      "type": "object",
      "properties": {
        "tiny": {
          "description": "Determines the drops when digging for tiny artefacts",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          }
        },
        "small": {
          "description": "Determines the drops when digging for small artefacts",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          }
        },
        "medium": {
          "description": "Determines the drops when digging for medium artefacts",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          }
        },
        "large": {
          "description": "Determines the drops when digging for large artefacts",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          }
        }
      },
      "required": [
        "tiny",
        "small",
        "medium",
        "large"
      ],
      "unevaluatedProperties": false
    },
    "ArchaeologyDigSiteData": {
      "description": "Data for constructing an ArchaeologyDigSite object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the Dig Site",
          "type": "string"
        },
        "media": {
          "description": "URI for the dig site's image in archaeology",
          "type": "string",
          "format": "uri-reference"
        },
        "artefacts": {
          "description": "Defines the drops from the digsite when digging for different types of artefact",
          "allOf": [
            {
              "$ref": "#/$defs/DigSiteArtefactData"
            }
          ]
        },
        "mapCreationCost": {
          "description": "Determines the cost to create a map of this dig site in Cartography",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsData"
            }
          ]
        },
        "mapUpgradeCost": {
          "description": "Determines the costs to upgrade a map of this dig site in Cartography for each tier of map",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FixedCostsData"
          },
          "minItems": 3,
          "maxItems": 3
        },
        "containsDigSiteRequirement": {
          "description": "If this Dig Site contains an item required to locate a different one",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "media",
        "artefacts",
        "mapCreationCost",
        "mapUpgradeCost",
        "containsDigSiteRequirement"
      ],
      "unevaluatedProperties": false
    },
    "ArtefactType": {
      "type": "string",
      "enum": [
        "tiny",
        "small",
        "medium",
        "large"
      ]
    },
    "ArchaeologyToolData": {
      "description": "Data for constructing an ArchaeologyDigSite object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the tool",
          "type": "string"
        },
        "description": {
          "description": "Currently unused description of the tool",
          "type": "string"
        },
        "media": {
          "description": "URI of the tools image",
          "type": "string",
          "format": "uri-reference"
        },
        "artefactType": {
          "description": "Determines the type of artefact that is found when using this tool",
          "allOf": [
            {
              "$ref": "#/$defs/ArtefactType"
            }
          ]
        },
        "upgradeChainID": {
          "description": "The ID of the ShopUpgradeChain associated with this tool. Used to determine display name and description.",
          "allOf": [
            {
              "$ref": "#/$defs/ShopUpgradeChainID"
            }
          ]
        }
      },
      "required": [
        "name",
        "description",
        "media",
        "artefactType",
        "upgradeChainID"
      ],
      "unevaluatedProperties": false
    },
    "ArchaeologyMuseumRewardData": {
      "description": "Data for constructing a ArchaeologyMuseumReward object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "museumCount": {
          "description": "The number of items that must be donated to the museum to receive the reward",
          "type": "integer",
          "minimum": 0
        },
        "pets": {
          "description": "Optional. The IDs of pets that are unlocked when reaching this reward",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PetID"
          },
          "minItems": 1
        },
        "gp": {
          "description": "Optional. GP to give to the player when reaching this reward",
          "type": "integer",
          "minimum": 1,
          "deprecated": true
        },
        "sc": {
          "description": "Optional. Slayer Coins to give to the player when reaching this reward",
          "type": "integer",
          "minimum": 1,
          "deprecated": true
        },
        "currencies": {
          "description": "Optional. Currencies to give to the player when reaching this reward",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CurrencyQuantity"
          },
          "minItems": 1
        },
        "items": {
          "description": "Optional. Items to give to the player when reaching this reward",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemQuantity"
          },
          "minItems": 1
        }
      },
      "required": [
        "museumCount"
      ],
      "unevaluatedProperties": false
    },
    "HarvestingVeinData": {
      "description": "Data for constructing a HarvestingVein object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BasicSkillRecipeData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the vein",
          "type": "string"
        },
        "media": {
          "description": "URI of the veins image",
          "type": "string",
          "format": "uri-reference"
        },
        "baseQuantity": {
          "description": "The base quantity of the item to reward to the player",
          "type": "integer",
          "minimum": 1
        },
        "shopItemPurchased": {
          "description": "Optional. Shop Purchase that musted be owned to harvest this vein",
          "allOf": [
            {
              "$ref": "#/$defs/ShopPurchaseID"
            }
          ]
        },
        "products": {
          "description": "Table of products that are selected from",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "itemID": {
                "description": "The item to give",
                "allOf": [
                  {
                    "$ref": "#/$defs/AnyItemID"
                  }
                ]
              },
              "minIntensityPercent": {
                "description": "The minimum amount of HP the vein must have to award this product when selected",
                "type": "integer",
                "minimum": 0
              },
              "weight": {
                "description": "The relative weight of selecting this product",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "itemID",
              "minIntensityPercent",
              "weight"
            ]
          }
        },
        "uniqueProduct": {
          "description": "The unique product that has a chance to be awarded from this vein",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemQuantity"
            }
          ]
        }
      },
      "required": [
        "name",
        "media",
        "baseQuantity",
        "products",
        "uniqueProduct"
      ],
      "unevaluatedProperties": false
    },
    "CorruptionEffectTableData": {
      "description": "Data for constructing a CorruptionEffectTableRow object",
      "type": "object",
      "properties": {
        "effectID": {
          "description": "The ID of the effect to apply",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectID"
            }
          ]
        },
        "startsUnlocked": {
          "description": "Optional. Determines if this effect starts unlocked. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "minMonsterLevel": {
          "description": "The minimum Combat Level a monster must have to roll this as a new effect",
          "type": "integer",
          "minimum": 0
        },
        "customDescription": {
          "description": "The description of the effect",
          "type": "string"
        },
        "langStringID": {
          "description": "The lang ID for the description of the effect",
          "type": "string"
        }
      },
      "required": [
        "effectID",
        "minMonsterLevel",
        "customDescription"
      ],
      "additionalProperties": false
    },
    "FixedSkillDropChance": {
      "description": "A Fixed chance that the item should drop",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Fixed"
        },
        "chance": {
          "description": "The percent chance that the item should drop",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "type",
        "chance"
      ],
      "unevaluatedProperties": false
    },
    "ScalingChance": {
      "type": "object",
      "properties": {
        "baseChance": {
          "description": "The base percent chance that the item should drop",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "scalingFactor": {
          "description": "The amount the chance should increase per level",
          "type": "number",
          "exclusiveMinimum": 0
        },
        "maxChance": {
          "description": "The maximum percent chance that the item should drop",
          "type": "number",
          "exclusiveMinimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "baseChance",
        "scalingFactor",
        "maxChance"
      ]
    },
    "LevelScalingSkillDropChance": {
      "description": "A linearly scaling chance that an item should drop that scales with skill level",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ScalingChance"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "LevelScaling"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "TotalMasteryScalingSkillDropChance": {
      "description": "A linearly scaling chance that an item should drop that scales with total mastery level",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ScalingChance"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "TotalMasteryScaling"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "RareSkillDropChance": {
      "oneOf": [
        {
          "$ref": "#/$defs/FixedSkillDropChance"
        },
        {
          "$ref": "#/$defs/LevelScalingSkillDropChance"
        },
        {
          "$ref": "#/$defs/TotalMasteryScalingSkillDropChance"
        }
      ]
    },
    "RareSkillDropData": {
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The ID of the item to drop",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "altItemID": {
          "description": "Optional. The ID of an alternative item to drop if the player has the allowSignetDrops modifier.",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "quantity": {
          "description": "The quantity of the item to give per drop",
          "type": "integer",
          "minimum": 1
        },
        "chance": {
          "description": "Determines how the chance to obtain the drop is calculated",
          "allOf": [
            {
              "$ref": "#/$defs/RareSkillDropChance"
            }
          ]
        },
        "requirements": {
          "description": "Requirements that the Player must meet for the item to drop",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "gamemodes": {
          "description": "Optional. Determines the gamemodes this drop is exclusive to",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GamemodeID"
          }
        },
        "realms": {
          "description": "Optional. Determines the realms this drop can drop from. Unset means all realms.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RealmID"
          }
        }
      },
      "required": [
        "itemID",
        "quantity",
        "chance",
        "requirements"
      ],
      "unevaluatedProperties": false
    },
    "MinibarData": {
      "type": "object",
      "properties": {
        "defaultItems": {
          "description": "The IDs of equipment items that should be added to the minibar item selection when they are found for the first time",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          }
        },
        "upgrades": {
          "description": "The IDs of Shop purchases that should be displayed in the minibar",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopPurchaseID"
          }
        },
        "pets": {
          "description": "The ID of pets that should be displayed in the minibar",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PetID"
          }
        }
      },
      "required": [
        "defaultItems",
        "upgrades",
        "pets"
      ],
      "unevaluatedProperties": false
    },
    "MilestoneLike": {
      "type": "object",
      "properties": {
        "level": {
          "description": "The skill level the milestone is met at",
          "type": "integer",
          "minimum": 1
        },
        "name": {
          "description": "The display name of the milestone",
          "type": "string"
        },
        "media": {
          "description": "The URI of the milestones image",
          "type": "string",
          "format": "uri-reference"
        }
      },
      "required": [
        "level",
        "name",
        "media"
      ]
    },
    "CustomSkillMilestoneData": {
      "description": "Defines a fully custom milestone for a skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MilestoneLike"
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "Custom"
        },
        "abyssalLevel": {
          "description": "Optional. Setting this above 0 will cause this milestone to appear in the abyssal milestones for the skill.",
          "type": "integer",
          "minimum": 0
        },
        "milestoneID": {
          "description": "Optional. Used to grab the description from localization",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "unevaluatedProperties": false
    },
    "EquipItemMilestoneData": {
      "description": "Defines a milestone for being able to equip an item",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "EquipItem"
        },
        "itemID": {
          "description": "The ID of the equipment item to show as a milestone",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentItemID"
            }
          ]
        }
      },
      "required": [
        "type",
        "itemID"
      ],
      "unevaluatedProperties": false
    },
    "MilestoneData": {
      "oneOf": [
        {
          "$ref": "#/$defs/CustomSkillMilestoneData"
        },
        {
          "$ref": "#/$defs/EquipItemMilestoneData"
        }
      ]
    },
    "BaseSkillData": {
      "description": "Basic data shared between all skills",
      "type": "object",
      "properties": {
        "pets": {
          "description": "The IDs of pets that are possible to be obtained when completing a skill action",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PetID"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "rareDrops": {
          "description": "Rare drops that may be obtained on performing an action in the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RareSkillDropData"
          },
          "minItems": 1
        },
        "minibar": {
          "description": "Data for the skilling minibar for this skill. Has no effect for skills that don't have a minibar",
          "allOf": [
            {
              "$ref": "#/$defs/MinibarData"
            }
          ]
        },
        "customMilestones": {
          "description": "Custom Milestones that are unlocked as the skill levels up",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MilestoneData"
          },
          "minItems": 1
        },
        "ancientRelicSets": {
          "description": "Optional. Defines sets of ancient relics that can be obtained from this skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AncientRelicSetData"
          },
          "minItems": 1
        },
        "ancientRelics": {
          "description": "Optional. Ancient Relic drops that may be obtained on performing an action in the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AncientRelicDropData"
          },
          "minItems": 5,
          "deprecated": true
        },
        "completedAncientRelic": {
          "description": "Optional. The Ancient Relic that is activated when all 5 skill relics are obtained",
          "allOf": [
            {
              "$ref": "#/$defs/AncientRelicID"
            }
          ],
          "deprecated": true
        },
        "skillTrees": {
          "description": "Optional. Defines a Skill Tree for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillTreeData"
          }
        },
        "unlockRequirements": {
          "description": "Optional. Requirements that must be met to unlock the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "hasAbyssalLevels": {
          "description": "Optional. Whether this Skill has Abyssal Levels.",
          "type": "boolean"
        },
        "headerUpgradeChains": {
          "description": "Optional. Shop upgrade chains that should show in the skill's header",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ShopUpgradeChainID"
          }
        },
        "headerItemCharges": {
          "description": "Optional. Items with charges that should show in the skill's header",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentItemID"
          }
        },
        "standardLevelRealm": {
          "description": "Optional. Sets a realm that this skills standard levels are tied to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "abyssalLevelRealm": {
          "description": "Optional. Sets a realm that this skills standard levels are tied to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        }
      }
    },
    "BaseSkillModificationData": {
      "description": "Basic data modifications for all skills",
      "type": "object",
      "properties": {}
    },
    "MasteryLevelUnlockData": {
      "description": "Data for constructing a MasteryLevelUnlock object",
      "type": "object",
      "properties": {
        "descriptionID": {
          "description": "Optional. Determines the localization ID for the unlock",
          "type": "integer"
        },
        "description": {
          "description": "Displayed description for the unlock",
          "type": "string"
        },
        "level": {
          "description": "The mastery level the unlock occurs at",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "description",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "MasteryLevelBonusData": {
      "description": "Data for constructing a MasteryLevelBonus object",
      "type": "object",
      "properties": {
        "modifiers": {
          "description": "The base modifiers to apply for this bonus. Action scoped modifiers should specify a default action that will be replaced.",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "autoScopeToAction": {
          "description": "If the modifiers of this bonus should be scoped to the mastery action. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "level": {
          "description": "The mastery level at which this bonus is applies, or starts to be applied for scaling bonuses",
          "type": "integer",
          "minimum": 1
        },
        "levelScalingSlope": {
          "description": "Optional. If present this bonus will scale up every X levels, X being equal to this value.",
          "type": "integer",
          "minimum": 1
        },
        "levelScalingMax": {
          "description": "Optional. If present this bonus will stop scaling up at this level",
          "type": "integer",
          "minimum": 1
        },
        "filter": {
          "description": "Optional. Filter to apply based on the action. Acceptable values depend on the skill.",
          "type": "string"
        }
      },
      "required": [
        "modifiers",
        "level"
      ],
      "unevaluatedProperties": false
    },
    "MasteryPoolBonusData": {
      "description": "Data for constructing a MasteryPoolBonus object",
      "type": "object",
      "properties": {
        "realm": {
          "description": "The ID of the Realm that this bonus belongs to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "modifiers": {
          "description": "The modifiers provided to the player when this bonus is active",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "percent": {
          "description": "The percent that the mastery pool must be full to for this bonus to be active",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "realm",
        "modifiers",
        "percent"
      ],
      "unevaluatedProperties": false
    },
    "MasterySkillData": {
      "description": "Basic data shared between all Mastery skills",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillData"
        }
      ],
      "properties": {
        "masteryLevelUnlocks": {
          "description": "Optional. Data for mastery level unlocks for this skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MasteryLevelUnlockData"
          },
          "minItems": 1
        },
        "masteryLevelBonuses": {
          "description": "Optional. Defines mastery level bonuses that are provided by this skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MasteryLevelBonusData"
          },
          "minItems": 1
        },
        "masteryPoolBonuses": {
          "description": "Optional. Defines mastery pool bonuses (checkpoints) that are provided by this skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MasteryPoolBonusData"
          },
          "minItems": 1
        }
      }
    },
    "MasterySkillModificationData": {
      "description": "Data modifications shared between all Mastery skills",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillModificationData"
        }
      ],
      "properties": {}
    },
    "MagicSkillData": {
      "description": "Data for the Magic Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "spellCategories": {
          "description": "Defines new categories for spells",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillSubcategoryData"
          },
          "minItems": 1
        },
        "altSpells": {
          "description": "Optional. Defines new Alt Magic spells",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AltMagicSpellData"
          },
          "minItems": 1
        },
        "randomShards": {
          "description": "Optional. Adds drops to the random shard table",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DropTableData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "MagicModificationData": {
      "description": "Data modifications for the Magic Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillModificationData"
        }
      ],
      "properties": {
        "altSpells": {
          "description": "Optional. Modifies the Alt Magic spells registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AltMagicSpellModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "WoodcuttingSkillData": {
      "description": "Data for the Woodcutting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "trees": {
          "description": "Defines new trees for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WoodcuttingTreeData"
          },
          "minItems": 1
        },
        "defaultRandomProducts": {
          "description": "Determines the default random products given by trees",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        },
        "randomProducts": {
          "description": "Defines information on the random products gained from trees",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RandomWoodcuttingProductData"
          },
          "minItems": 1
        },
        "bannedJewleryIDs": {
          "description": "Sets items that cannot drop as a random jewelry item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "WoodcuttingModificationData": {
      "description": "Data modifications for the Woodcutting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "trees": {
          "description": "Optional. Modifies the Trees registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WoodcuttingTreeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FishingSkillData": {
      "description": "Data for the Fishing Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "fish": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishData"
          },
          "minItems": 1
        },
        "areas": {
          "description": "Defines new fishing areas",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishingAreaData"
          },
          "minItems": 1
        },
        "junkItemIDs": {
          "description": "Defines Junk items that can drop",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        },
        "specialItems": {
          "description": "Defines Special items that drop from specific realms",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "realmID": {
                "description": "The ID of the realm these special items should drop from",
                "allOf": [
                  {
                    "$ref": "#/$defs/RealmID"
                  }
                ]
              },
              "drops": {
                "description": "The drops to add to the table",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/DropTableData"
                },
                "minItems": 1
              }
            },
            "required": [
              "realmID",
              "drops"
            ],
            "additionalProperties": false
          },
          "minItems": 1
        },
        "easterEgg": {
          "type": "object",
          "properties": {
            "originalID": {
              "$ref": "#/$defs/AnyItemID"
            },
            "equippedID": {
              "$ref": "#/$defs/EquipmentItemID"
            },
            "rewardID": {
              "$ref": "#/$defs/AnyItemID"
            }
          },
          "required": [
            "originalID",
            "equippedID",
            "rewardID"
          ],
          "unevaluatedProperties": false
        },
        "fishingContestFish": {
          "description": "Optional. Defined Fishing Contest fish data",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishingContestFishData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FishingModificationData": {
      "description": "Data modifications for the Fishing Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "fish": {
          "description": "Optional. Modifies the Fish registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FishModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FiremakingSkillData": {
      "description": "Data for the Firemaking Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "logs": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FiremakingLogData"
          },
          "minItems": 1
        },
        "primaryProducts": {
          "description": "Optional. Defines the base quantities and chances for primary products",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FiremakingProductData"
          },
          "minItems": 1
        },
        "secondaryProducts": {
          "description": "Optional. Defines the base quantities and chances for secondary products",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FiremakingProductData"
          },
          "minItems": 1
        },
        "defaultPrimaryProducts": {
          "description": "Optional. Defines default primary products that logs should give",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        },
        "defaultSecondaryProducts": {
          "description": "Optional. Defines default secondary products that logs should give",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FiremakingModificationData": {
      "description": "Data modifications for the Firemaking Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "logs": {
          "description": "Optional. Modifies the FiremakingLogs registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FiremakingLogModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "CookingSkillData": {
      "description": "Data for the Cooking Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingCategoryData"
          },
          "minItems": 1
        },
        "subcategories": {
          "description": "Defines new subcategories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillSubcategoryData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingRecipeData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "CookingModificationData": {
      "description": "Data modifications for the Cooking Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Modifies the CookingCategories registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingCategoryModificationData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Modifies the CookingRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CookingRecipeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "MiningSkillData": {
      "description": "Data for the Mining Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for rocks",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MiningCategoryData"
          },
          "minItems": 1
        },
        "rockData": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MiningRockData"
          },
          "minItems": 1
        },
        "coalItemID": {
          "description": "Sets the item that should drop as Coal Ore",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "runestoneItemID": {
          "description": "Sets the item that should drop as Runestone",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "MiningModificationData": {
      "description": "Data modifications for the Mining Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "rockData": {
          "description": "Optional. Modifies the MiningRocks registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MiningRockModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SmithingSkillData": {
      "description": "Data for the Smithing Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SkillCategoryData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "subcategories": {
          "description": "Defines new subcategories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillSubcategoryData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SmithingRecipeData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SmithingModificationData": {
      "description": "Data modifications for the Smithing Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Optional. Modifies the SmithingRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SmithingRecipeModificationData"
          }
        }
      },
      "unevaluatedProperties": false
    },
    "ThievingSkillData": {
      "description": "Data for the Thieving Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "npcs": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingNPCData"
          },
          "minItems": 1
        },
        "areas": {
          "description": "Defines new areas for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingAreaData"
          },
          "minItems": 1
        },
        "generalRareItems": {
          "description": "Defines rare items that can be dropped from any thieving target",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GeneralThievingRareData"
          },
          "minItems": 1
        },
        "entLeprechaunItem": {
          "description": "Sets the item that should drop from the Ent + Leprechaun synergy",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "bearLeprechaunItem": {
          "description": "Sets the item that should drop from the Bear + Leprechaun synergy",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "easterEgg": {
          "type": "object",
          "properties": {
            "equippedID": {
              "$ref": "#/$defs/EquipmentItemID"
            },
            "positionedID": {
              "$ref": "#/$defs/AnyItemID"
            },
            "rewardID": {
              "$ref": "#/$defs/AnyItemID"
            }
          },
          "required": [
            "equippedID",
            "positionedID",
            "rewardID"
          ],
          "unevaluatedProperties": false
        }
      },
      "unevaluatedProperties": false
    },
    "ThievingModificationData": {
      "description": "Data modifications for the Thieving Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "npcs": {
          "description": "Optional. Modifies the ThievingNPCs registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ThievingNPCModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FarmingSkillData": {
      "description": "Data for the Farming Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingCategoryData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingRecipeData"
          },
          "minItems": 1
        },
        "plots": {
          "description": "Defines new farming plots",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FarmingPlotData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FarmingModificationData": {
      "description": "Data modifications for the Farming Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {}
    },
    "FletchingSkillData": {
      "description": "Data for the Fletching Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SkillCategoryData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "subcategories": {
          "description": "Defines new subcategories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillSubcategoryData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FletchingRecipeData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "FletchingModificationData": {
      "description": "Data modifications for the Fletching Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Optional. Modifies the FletchingRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FletchingRecipeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "CraftingSkillData": {
      "description": "Data for the Crafting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SkillCategoryData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "subcategories": {
          "description": "Defines new subcategories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillSubcategoryData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CraftingRecipeData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "CraftingModificationData": {
      "description": "Data modifications for the Crafting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Optional. Modifies the CrafingRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CraftingRecipeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "RunecraftingSkillData": {
      "description": "Data for the Runecrafting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SkillCategoryData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "subcategories": {
          "description": "Defines new subcategories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillSubcategoryData"
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/RunecraftingRecipeData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "elementalRuneIDs": {
          "description": "Defines elemental runes that can be randomly given via the increasedChanceForElementalRune modifier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        },
        "comboRuneIDs": {
          "description": "Defines combo runes that can be randomly given via the summoningSynergy_10_18 modifier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyItemID"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "RunecraftingModificationData": {
      "description": "Data modifications for the Runecrafting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Modifies the RunecraftingRecipes registered to the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/RunecraftingRecipeModificationData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "HerbloreSkillData": {
      "description": "Data for the Herblore Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SkillCategoryData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HerbloreRecipeData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "HerbloreModificationData": {
      "description": "Data modifications for the Herblore Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Optional. Modifies the HerbloreRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HerbloreRecipeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "AgilitySkillData": {
      "description": "Data for the Agility Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "courses": {
          "description": "Defines AgilityCourses for the skill. Only one course can be defined per realm",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityCourseData"
          },
          "minItems": 1
        },
        "pillars": {
          "description": "Defines new passive pillars for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityPillarData"
          },
          "minItems": 1
        },
        "obstacles": {
          "description": "Defines new obstacles for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityObstacleData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "AgilityModificationData": {
      "description": "Data modifications for the Agility Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "pillars": {
          "description": "Optional. Modifies the AgilityPillars registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityObstacleModificationData"
          },
          "minItems": 1
        },
        "obstacles": {
          "description": "Optional. Modifies the AgilityObstacles registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AgilityPillarModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SummoningSkillData": {
      "description": "Data for the Summoning Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "categories": {
          "description": "Defines new categories for the skill",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/$defs/SummoningCategoryData"
              }
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        },
        "recipes": {
          "description": "Defines new actions for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SummoningRecipeData"
          },
          "minItems": 1
        },
        "synergies": {
          "description": "Defines new summoning synergies",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SummoningSynergyData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SummoningModificationData": {
      "description": "Data modifications for the Summoning Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Optional. Modifies the SummoningRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SummoningRecipeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "AstrologySkillData": {
      "description": "Data for the Summoning Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Defines new constellations for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyRecipeData"
          },
          "minItems": 1
        },
        "baseRandomItemChances": {
          "description": "Optional. Defines the base chances of recieving a random item from a constellation",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ItemChanceData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "AstrologyModificationData": {
      "description": "Data modifications for the Astrology Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "recipes": {
          "description": "Modifies the AstrologyRecipes registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AstrologyRecipeModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "TownshipSkillData": {
      "description": "Data for the Township Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillData"
        }
      ],
      "properties": {
        "resources": {
          "description": "Defines new resources for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipResourceData"
          },
          "minItems": 1
        },
        "biomes": {
          "description": "Defines new biomes for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipBiomeData"
          },
          "minItems": 1
        },
        "buildings": {
          "description": "Defines new buildings for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipBuildingData"
          },
          "minItems": 1
        },
        "worships": {
          "description": "Defines new worships for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipWorshipData"
          },
          "minItems": 1
        },
        "buildingDisplayOrder": {
          "description": "Defines the display order of buildings in the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1
        },
        "resourceDisplayOrder": {
          "description": "Defines the display order of resources in the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/InsertOrder"
          },
          "minItems": 1
        },
        "taskCategories": {
          "description": "Defines new task categories for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipTaskCategoryData"
          },
          "minItems": 1
        },
        "tasks": {
          "description": "Defines new tasks for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipTaskData"
          },
          "minItems": 1
        },
        "casualTasks": {
          "description": "Defines new casual tasks for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipCasualTaskData"
          },
          "minItems": 1
        },
        "seasons": {
          "description": "Defines new seasons for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipSeasonData"
          },
          "minItems": 1
        },
        "itemConversions": {
          "description": "Defines new trader options for the skill",
          "allOf": [
            {
              "$ref": "#/$defs/TownshipItemConversionData"
            }
          ]
        }
      },
      "unevaluatedProperties": false
    },
    "TownshipModificationData": {
      "description": "Data modifications for the Township Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillModificationData"
        }
      ],
      "properties": {
        "seasons": {
          "description": "Optional. Modifies the Seasons registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TownshipSeasonModificationData"
          },
          "minItems": 1
        }
      }
    },
    "TownshipSeasonModificationData": {
      "description": "Data for modifying a TownshipSeason object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "modifiers": {
          "description": "Optional. Changes the modifiers provided to the player by the season",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesModificationData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. Changes the effect Applicators merged with the player when this season is active",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectApplicatorModificationData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Changes the modifiers provided to the enemy when this season is active",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesModificationData"
            }
          ]
        }
      }
    },
    "CartographySkillData": {
      "description": "Data for the Cartography Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillData"
        }
      ],
      "properties": {
        "worldMaps": {
          "description": "Defines new world maps for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WorldMapData"
          },
          "minItems": 1
        },
        "mapPortals": {
          "description": "Defines pairs of map portal points of interest, that allow travelling between World Maps",
          "type": "array",
          "items": {
            "$ref": "#/$defs/WorldMapPortalData"
          }
        },
        "travelEvents": {
          "description": "Defines new random travel events for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/RandomTravelEventData"
          },
          "minItems": 1
        },
        "refinementSlotCosts": {
          "description": "Defines the costs of refinement slots for Dig Site Maps. Elements are appended to the cost array",
          "type": "array",
          "items": {
            "$ref": "#/$defs/FixedCostsData"
          },
          "minItems": 1
        },
        "paperRecipes": {
          "description": "Defines new recipes for paper for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PaperMakingRecipeData"
          },
          "minItems": 1
        },
        "refinementModifiers": {
          "description": "Defines random modifiers that can be chosen as refinements for dig site maps",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierValuesArrayData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "CartographyModificationData": {
      "description": "Data modifications for the Cartography Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillModificationData"
        }
      ],
      "properties": {}
    },
    "ArchaeologySkillData": {
      "description": "Data for the Archaeology Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "digSites": {
          "description": "Defines new ArchaeologyDigSites for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArchaeologyDigSiteData"
          },
          "minItems": 1
        },
        "tools": {
          "description": "Defines new Archaeology Tools for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArchaeologyToolData"
          },
          "minItems": 1
        },
        "museumRewards": {
          "description": "Data for Museum Reward objects for Archaeology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArchaeologyMuseumRewardData"
          }
        }
      },
      "unevaluatedProperties": false
    },
    "ArchaeologyModificationData": {
      "description": "Data modifications for the Archaeology Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {}
    },
    "CorruptionSkillData": {
      "description": "Data for the Corruption Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillData"
        }
      ],
      "properties": {
        "enemyApplicator": {
          "description": "Defines the effect applicator for the enemy applying corruption to themselves",
          "allOf": [
            {
              "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
            }
          ]
        },
        "playerApplicator": {
          "description": "Defines the effect applicator for the player applying corruption to themselves",
          "allOf": [
            {
              "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
            }
          ]
        },
        "corruptionEffects": {
          "description": "Defines new Corruption effects that may be applied when the corruption bar fills",
          "type": "array",
          "items": {
            "$ref": "#/$defs/CorruptionEffectTableData"
          }
        }
      },
      "unevaluatedProperties": false
    },
    "CorruptionModificationData": {
      "description": "Data modifications for the Corruption Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseSkillModificationData"
        }
      ],
      "properties": {}
    },
    "HarvestingSkillData": {
      "description": "Data for the Harvesting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "veinData": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/$defs/HarvestingVeinData"
          }
        }
      },
      "unevaluatedProperties": false
    },
    "HarvestingModificationData": {
      "description": "Data modifications for the Harvesting Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {}
    },
    "AnySkillData": {
      "type": "object",
      "discriminator": {
        "propertyName": "skillID"
      },
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Attack"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Strength"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Defence"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Hitpoints"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Ranged"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Magic"
            },
            "data": {
              "$ref": "#/$defs/MagicSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Prayer"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Slayer"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Woodcutting"
            },
            "data": {
              "$ref": "#/$defs/WoodcuttingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Fishing"
            },
            "data": {
              "$ref": "#/$defs/FishingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Firemaking"
            },
            "data": {
              "$ref": "#/$defs/FiremakingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Cooking"
            },
            "data": {
              "$ref": "#/$defs/CookingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Mining"
            },
            "data": {
              "$ref": "#/$defs/MiningSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Smithing"
            },
            "data": {
              "$ref": "#/$defs/SmithingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Thieving"
            },
            "data": {
              "$ref": "#/$defs/ThievingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Farming"
            },
            "data": {
              "$ref": "#/$defs/FarmingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Fletching"
            },
            "data": {
              "$ref": "#/$defs/FletchingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Crafting"
            },
            "data": {
              "$ref": "#/$defs/CraftingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Runecrafting"
            },
            "data": {
              "$ref": "#/$defs/RunecraftingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Herblore"
            },
            "data": {
              "$ref": "#/$defs/HerbloreSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Agility"
            },
            "data": {
              "$ref": "#/$defs/AgilitySkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Summoning"
            },
            "data": {
              "$ref": "#/$defs/SummoningSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Astrology"
            },
            "data": {
              "$ref": "#/$defs/AstrologySkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorD:Township"
            },
            "data": {
              "$ref": "#/$defs/TownshipSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorAoD:Cartography"
            },
            "data": {
              "$ref": "#/$defs/CartographySkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorAoD:Archaeology"
            },
            "data": {
              "$ref": "#/$defs/ArchaeologySkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorItA:Corruption"
            },
            "data": {
              "$ref": "#/$defs/CorruptionSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "melvorItA:Harvesting"
            },
            "data": {
              "$ref": "#/$defs/HarvestingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill to provide data with",
              "type": "string",
              "const": "sailing:Sailing"
            },
            "data": {
              "$ref": "#/$defs/SailingSkillData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        }
      ]
    },
    "AnySkillModificationData": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Attack"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Strength"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Defence"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Hitpoints"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Ranged"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Magic"
            },
            "data": {
              "$ref": "#/$defs/MagicModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Prayer"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Slayer"
            },
            "data": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/$defs/BaseSkillModificationData"
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Woodcutting"
            },
            "data": {
              "$ref": "#/$defs/WoodcuttingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Fishing"
            },
            "data": {
              "$ref": "#/$defs/FishingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Firemaking"
            },
            "data": {
              "$ref": "#/$defs/FiremakingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Cooking"
            },
            "data": {
              "$ref": "#/$defs/CookingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Mining"
            },
            "data": {
              "$ref": "#/$defs/MiningModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Smithing"
            },
            "data": {
              "$ref": "#/$defs/SmithingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Thieving"
            },
            "data": {
              "$ref": "#/$defs/ThievingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Farming"
            },
            "data": {
              "$ref": "#/$defs/FarmingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Fletching"
            },
            "data": {
              "$ref": "#/$defs/FletchingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Crafting"
            },
            "data": {
              "$ref": "#/$defs/CraftingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Runecrafting"
            },
            "data": {
              "$ref": "#/$defs/RunecraftingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Herblore"
            },
            "data": {
              "$ref": "#/$defs/HerbloreModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Agility"
            },
            "data": {
              "$ref": "#/$defs/AgilityModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Summoning"
            },
            "data": {
              "$ref": "#/$defs/SummoningModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Astrology"
            },
            "data": {
              "$ref": "#/$defs/AstrologyModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorD:Township"
            },
            "data": {
              "$ref": "#/$defs/TownshipModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorAoD:Cartography"
            },
            "data": {
              "$ref": "#/$defs/CartographyModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorAoD:Archaeology"
            },
            "data": {
              "$ref": "#/$defs/ArchaeologyModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorItA:Harvesting"
            },
            "data": {
              "$ref": "#/$defs/HarvestingModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "const": "melvorItA:Corruption"
            },
            "data": {
              "$ref": "#/$defs/CorruptionModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "unevaluatedProperties": false
        },
        {
          "type": "object",
          "properties": {
            "skillID": {
              "description": "The ID of the skill whose data should be modified",
              "type": "string",
              "allOf": [
                {
                  "$ref": "#/$defs/ValidID"
                }
              ],
              "not": {
                "type": "string",
                "enum": [
                  "melvorD:Attack",
                  "melvorD:Strength",
                  "melvorD:Defence",
                  "melvorD:Hitpoints",
                  "melvorD:Ranged",
                  "melvorD:Magic",
                  "melvorD:Prayer",
                  "melvorD:Slayer",
                  "melvorD:Woodcutting",
                  "melvorD:Fishing",
                  "melvorD:Firemaking",
                  "melvorD:Cooking",
                  "melvorD:Mining",
                  "melvorD:Smithing",
                  "melvorD:Thieving",
                  "melvorD:Farming",
                  "melvorD:Fletching",
                  "melvorD:Crafting",
                  "melvorD:Runecrafting",
                  "melvorD:Herblore",
                  "melvorD:Agility",
                  "melvorD:Summoning",
                  "melvorD:Astrology",
                  "melvorD:Township",
                  "melvorAoD:Cartography",
                  "melvorAoD:Archaeology",
                  "melvorItA:Harvesting",
                  "melvorItA:Corruption"
                ]
              }
            },
            "data": {
              "$ref": "#/$defs/BaseSkillModificationData"
            }
          },
          "required": [
            "skillID",
            "data"
          ],
          "additionalProperties": false
        }
      ]
    },
    "AncientRelicData": {
      "description": "Data for Ancient Relics",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the Ancient Relic",
          "type": "string"
        },
        "skillID": {
          "description": "The skill associated with the Ancient Relic",
          "anyOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "number": {
          "description": "The number of the ancient relic.",
          "type": "number"
        }
      },
      "required": [
        "name"
      ],
      "unevaluatedProperties": false
    },
    "AncientRelicDropData": {
      "description": "Data for Ancient Relics drops via Skills",
      "type": "object",
      "properties": {
        "relicID": {
          "description": "The ID of the Ancient Relic",
          "allOf": [
            {
              "$ref": "#/$defs/AncientRelicID"
            }
          ]
        },
        "requirements": {
          "description": "Requirements the player must meet to locate this Ancient Relic",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "chance": {
          "description": "Determines how the chance to obtain the drop is calculated",
          "allOf": [
            {
              "$ref": "#/$defs/RareSkillDropChance"
            }
          ]
        }
      },
      "required": [
        "relicID",
        "requirements",
        "chance"
      ],
      "unevaluatedProperties": false
    },
    "AncientRelicSetData": {
      "description": "Data for constructing an AncientRelicSet object",
      "type": "object",
      "properties": {
        "realmID": {
          "description": "The ID of the Realm these relics can drop from",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "relicDrops": {
          "description": "The relics that can drop from this set",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AncientRelicDropData"
          },
          "minItems": 5,
          "maxItems": 5
        },
        "completedRelicID": {
          "description": "The ID of the relic obtained when all of the relicDrops in this set have been found",
          "allOf": [
            {
              "$ref": "#/$defs/AncientRelicID"
            }
          ]
        },
        "levelUpUnlocks": {
          "description": "Optional. Levels in a skill that a random drop from this set is unlocked at.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          }
        },
        "abyssalLevelUpUnlocks": {
          "description": "Optional. Levels in a skill that a random drop from this set is unlocked at.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "required": [
        "realmID",
        "relicDrops",
        "completedRelicID"
      ],
      "unevaluatedProperties": false
    },
    "AncientRelicID": {
      "anyOf": [
        {
          "$ref": "#/$defs/ValidID"
        },
        {
          "type": "string",
          "enum": [
            "melvorAoD:WoodcuttingRelic1",
            "melvorAoD:WoodcuttingRelic2",
            "melvorAoD:WoodcuttingRelic3",
            "melvorAoD:WoodcuttingRelic4",
            "melvorAoD:WoodcuttingRelic5",
            "melvorAoD:WoodcuttingRelic6",
            "melvorAoD:FishingRelic1",
            "melvorAoD:FishingRelic2",
            "melvorAoD:FishingRelic3",
            "melvorAoD:FishingRelic4",
            "melvorAoD:FishingRelic5",
            "melvorAoD:FishingRelic6",
            "melvorAoD:FiremakingRelic1",
            "melvorAoD:FiremakingRelic2",
            "melvorAoD:FiremakingRelic3",
            "melvorAoD:FiremakingRelic4",
            "melvorAoD:FiremakingRelic5",
            "melvorAoD:FiremakingRelic6",
            "melvorAoD:CookingRelic1",
            "melvorAoD:CookingRelic2",
            "melvorAoD:CookingRelic3",
            "melvorAoD:CookingRelic4",
            "melvorAoD:CookingRelic5",
            "melvorAoD:CookingRelic6",
            "melvorAoD:MiningRelic1",
            "melvorAoD:MiningRelic2",
            "melvorAoD:MiningRelic3",
            "melvorAoD:MiningRelic4",
            "melvorAoD:MiningRelic5",
            "melvorAoD:MiningRelic6",
            "melvorAoD:SmithingRelic1",
            "melvorAoD:SmithingRelic2",
            "melvorAoD:SmithingRelic3",
            "melvorAoD:SmithingRelic4",
            "melvorAoD:SmithingRelic5",
            "melvorAoD:SmithingRelic6",
            "melvorAoD:ThievingRelic1",
            "melvorAoD:ThievingRelic2",
            "melvorAoD:ThievingRelic3",
            "melvorAoD:ThievingRelic4",
            "melvorAoD:ThievingRelic5",
            "melvorAoD:ThievingRelic6",
            "melvorAoD:FarmingRelic1",
            "melvorAoD:FarmingRelic2",
            "melvorAoD:FarmingRelic3",
            "melvorAoD:FarmingRelic4",
            "melvorAoD:FarmingRelic5",
            "melvorAoD:FarmingRelic6",
            "melvorAoD:FletchingRelic1",
            "melvorAoD:FletchingRelic2",
            "melvorAoD:FletchingRelic3",
            "melvorAoD:FletchingRelic4",
            "melvorAoD:FletchingRelic5",
            "melvorAoD:FletchingRelic6",
            "melvorAoD:CraftingRelic1",
            "melvorAoD:CraftingRelic2",
            "melvorAoD:CraftingRelic3",
            "melvorAoD:CraftingRelic4",
            "melvorAoD:CraftingRelic5",
            "melvorAoD:CraftingRelic6",
            "melvorAoD:RunecraftingRelic1",
            "melvorAoD:RunecraftingRelic2",
            "melvorAoD:RunecraftingRelic3",
            "melvorAoD:RunecraftingRelic4",
            "melvorAoD:RunecraftingRelic5",
            "melvorAoD:RunecraftingRelic6",
            "melvorAoD:HerbloreRelic1",
            "melvorAoD:HerbloreRelic2",
            "melvorAoD:HerbloreRelic3",
            "melvorAoD:HerbloreRelic4",
            "melvorAoD:HerbloreRelic5",
            "melvorAoD:HerbloreRelic6",
            "melvorAoD:AgilityRelic1",
            "melvorAoD:AgilityRelic2",
            "melvorAoD:AgilityRelic3",
            "melvorAoD:AgilityRelic4",
            "melvorAoD:AgilityRelic5",
            "melvorAoD:AgilityRelic6",
            "melvorAoD:SummoningRelic1",
            "melvorAoD:SummoningRelic2",
            "melvorAoD:SummoningRelic3",
            "melvorAoD:SummoningRelic4",
            "melvorAoD:SummoningRelic5",
            "melvorAoD:SummoningRelic6",
            "melvorAoD:AstrologyRelic1",
            "melvorAoD:AstrologyRelic2",
            "melvorAoD:AstrologyRelic3",
            "melvorAoD:AstrologyRelic4",
            "melvorAoD:AstrologyRelic5",
            "melvorAoD:AstrologyRelic6",
            "melvorAoD:TownshipRelic1",
            "melvorAoD:TownshipRelic2",
            "melvorAoD:TownshipRelic3",
            "melvorAoD:TownshipRelic4",
            "melvorAoD:TownshipRelic5",
            "melvorAoD:TownshipRelic6",
            "melvorAoD:AttackRelic1",
            "melvorAoD:AttackRelic2",
            "melvorAoD:AttackRelic3",
            "melvorAoD:AttackRelic4",
            "melvorAoD:AttackRelic5",
            "melvorAoD:AttackRelic6",
            "melvorAoD:StrengthRelic1",
            "melvorAoD:StrengthRelic2",
            "melvorAoD:StrengthRelic3",
            "melvorAoD:StrengthRelic4",
            "melvorAoD:StrengthRelic5",
            "melvorAoD:StrengthRelic6",
            "melvorAoD:DefenceRelic1",
            "melvorAoD:DefenceRelic2",
            "melvorAoD:DefenceRelic3",
            "melvorAoD:DefenceRelic4",
            "melvorAoD:DefenceRelic5",
            "melvorAoD:DefenceRelic6",
            "melvorAoD:HitpointsRelic1",
            "melvorAoD:HitpointsRelic2",
            "melvorAoD:HitpointsRelic3",
            "melvorAoD:HitpointsRelic4",
            "melvorAoD:HitpointsRelic5",
            "melvorAoD:HitpointsRelic6",
            "melvorAoD:RangedRelic1",
            "melvorAoD:RangedRelic2",
            "melvorAoD:RangedRelic3",
            "melvorAoD:RangedRelic4",
            "melvorAoD:RangedRelic5",
            "melvorAoD:RangedRelic6",
            "melvorAoD:MagicRelic1",
            "melvorAoD:MagicRelic2",
            "melvorAoD:MagicRelic3",
            "melvorAoD:MagicRelic4",
            "melvorAoD:MagicRelic5",
            "melvorAoD:MagicRelic6",
            "melvorAoD:PrayerRelic1",
            "melvorAoD:PrayerRelic2",
            "melvorAoD:PrayerRelic3",
            "melvorAoD:PrayerRelic4",
            "melvorAoD:PrayerRelic5",
            "melvorAoD:PrayerRelic6",
            "melvorAoD:SlayerRelic1",
            "melvorAoD:SlayerRelic2",
            "melvorAoD:SlayerRelic3",
            "melvorAoD:SlayerRelic4",
            "melvorAoD:SlayerRelic5",
            "melvorAoD:SlayerRelic6",
            "melvorAoD:ArchaeologyRelic1",
            "melvorAoD:ArchaeologyRelic2",
            "melvorAoD:ArchaeologyRelic3",
            "melvorAoD:ArchaeologyRelic4",
            "melvorAoD:ArchaeologyRelic5",
            "melvorAoD:ArchaeologyRelic6",
            "melvorAoD:CartographyRelic1",
            "melvorAoD:CartographyRelic2",
            "melvorAoD:CartographyRelic3",
            "melvorAoD:CartographyRelic4",
            "melvorAoD:CartographyRelic5",
            "melvorAoD:CartographyRelic6"
          ]
        }
      ]
    },
    "SkillTreeData": {
      "description": "Data For constructing a SkillTree object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the Skill Tree",
          "type": "string"
        },
        "nameLang": {
          "description": "Optional. Language string ID to use for the name property",
          "type": "string"
        },
        "media": {
          "description": "URI of the skill tree image",
          "type": "string",
          "format": "uri-reference"
        },
        "unlockRequirements": {
          "description": "These requirements must be met to unlock the Skill Tree.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "nodes": {
          "description": "The nodes for the Skill Tree",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SkillTreeNodeData"
          }
        }
      },
      "required": [
        "id",
        "name",
        "media",
        "unlockRequirements",
        "nodes"
      ],
      "unevaluatedProperties": false
    },
    "SkillTreeNodeData": {
      "description": "Data For constructing a SkillTreeNode object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        },
        {
          "$ref": "#/$defs/IStatObjectData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the Node",
          "type": "string"
        },
        "costs": {
          "description": "The costs to unlock this node",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/FixedCostsBase"
            }
          ],
          "properties": {
            "points": {
              "description": "Optional. Skill Point cost for unlock the Node. Uses Skill Tree Points from the tree it is attached to.",
              "type": "integer",
              "minimum": 0
            }
          },
          "unevaluatedProperties": true
        },
        "parents": {
          "description": "Optional. The IDs of the nodes which are parents to this one. If not defined, this is considered a root node of the tree",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ValidID"
          },
          "minItems": 1
        },
        "requirements": {
          "description": "These requirements must be met to unlock the Node.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        }
      },
      "required": [
        "name",
        "costs"
      ],
      "unevaluatedProperties": false
    },
    "SkillTreeNodeRequirementData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "SkillTreeNode"
        },
        "skillID": {
          "description": "The ID of the Skill that the node must be unlocked in",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "nodeIDs": {
          "description": "The IDs of the Nodes that must be unlocked",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ValidID"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "type",
        "skillID",
        "nodeIDs"
      ],
      "unevaluatedProperties": false
    },
    "AttackTypeMultiplier": {
      "type": "object",
      "properties": {
        "melee": {
          "type": "number",
          "minimum": 0
        },
        "ranged": {
          "type": "number",
          "minimum": 0
        },
        "magic": {
          "type": "number",
          "minimum": 0
        }
      },
      "required": [
        "melee",
        "ranged",
        "magic"
      ],
      "additionalProperties": false
    },
    "NestedAttackTypeMultiplier": {
      "type": "object",
      "properties": {
        "melee": {
          "$ref": "#/$defs/AttackTypeMultiplier"
        },
        "ranged": {
          "$ref": "#/$defs/AttackTypeMultiplier"
        },
        "magic": {
          "$ref": "#/$defs/AttackTypeMultiplier"
        }
      },
      "required": [
        "melee",
        "ranged",
        "magic"
      ],
      "additionalProperties": false
    },
    "CombatTriangleData": {
      "type": "object",
      "properties": {
        "damageModifier": {
          "description": "Determines how player damage dealt against Enemies is multiplied. Indexed by Player Attack type, then by Enemy Attack Type.",
          "allOf": [
            {
              "$ref": "#/$defs/NestedAttackTypeMultiplier"
            }
          ]
        },
        "reductionModifier": {
          "description": "Determines how player damage reduction is multiplied. Indexed by Player Attack type, then by Enemy Attack Type.",
          "allOf": [
            {
              "$ref": "#/$defs/NestedAttackTypeMultiplier"
            }
          ]
        }
      },
      "required": [
        "damageModifier",
        "reductionModifier"
      ]
    },
    "CombatTriangleSetData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "Display name of the triangle set",
          "type": "string"
        },
        "media": {
          "description": "URI of icon to display for this triangle set",
          "type": "string",
          "format": "uri-reference"
        },
        "Standard": {
          "description": "Determines the combat triangle when playing Gamemodes that use the Standard Triangle",
          "allOf": [
            {
              "$ref": "#/$defs/CombatTriangleData"
            }
          ]
        },
        "Hardcore": {
          "description": "Determines the combat triangle when playing Gamemodes that use the Hardcore Triangle",
          "allOf": [
            {
              "$ref": "#/$defs/CombatTriangleData"
            }
          ]
        },
        "InvertedHardcore": {
          "description": "Determines the combat triangle when playing Gamemodes that use the Inverted Hardcore Triangle",
          "allOf": [
            {
              "$ref": "#/$defs/CombatTriangleData"
            }
          ]
        }
      },
      "required": [
        "name",
        "media",
        "Standard",
        "Hardcore",
        "InvertedHardcore"
      ],
      "unevaluatedProperties": false
    },
    "EquipmentGridPosition": {
      "type": "object",
      "properties": {
        "col": {
          "description": "The column in the grid. Must be between [0, 4]",
          "type": "integer",
          "minimum": 0,
          "maximum": 4
        },
        "row": {
          "description": "The row in the grid. Must be an integer. 0 is where the Helmet slot is placed.",
          "type": "integer"
        }
      },
      "required": [
        "col",
        "row"
      ],
      "additionalProperties": false
    },
    "EquipmentSlotData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "allowQuantity": {
          "description": "If this slot allows a quantity of an item to be equipped to it",
          "type": "boolean"
        },
        "emptyMedia": {
          "description": "The icon to display when the slot is empty",
          "type": "string",
          "format": "uri-reference"
        },
        "emptyName": {
          "description": "The name to show when the slot is empty",
          "type": "string"
        },
        "providesEquipStats": {
          "description": "If items equipped in this slot provide equipment stats",
          "type": "boolean"
        },
        "gridPosition": {
          "description": "Determines the position of this slot in the equipment grid",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentGridPosition"
            }
          ]
        },
        "alternativePositions": {
          "description": "Optional. Alternative positions to place this slot in if the initial grid position is already used.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EquipmentGridPosition"
          }
        },
        "requirements": {
          "description": "Optional. Requirements the player must meet to use this slot. Ignored in Golbin Raid.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        }
      },
      "required": [
        "allowQuantity",
        "emptyMedia",
        "emptyName",
        "providesEquipStats",
        "gridPosition"
      ],
      "unevaluatedProperties": false
    },
    "EquipmentSlotModificationData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the Equipment Slot to modify",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "allowQuantity": {
          "description": "If this slot allows a quantity of an item to be equipped to it",
          "type": "boolean"
        },
        "providesEquipStats": {
          "description": "If items equipped in this slot provide equipment stats",
          "type": "boolean"
        },
        "gridPosition": {
          "description": "Determines the position of this slot in the equipment grid",
          "allOf": [
            {
              "$ref": "#/$defs/EquipmentGridPosition"
            }
          ]
        },
        "requirements": {
          "description": "Optional. Requirements the player must meet to use this slot. Ignored in Golbin Raid.",
          "type": "object",
          "properties": {
            "remove": {
              "description": "Removes all requirements of the given types",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AnyRequirementData"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "DamageTypeModificationData": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the Damage Type to modify",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "resistanceCap": {
          "description": "Set the resistance cap",
          "type": "number"
        },
        "immuneTo": {
          "description": "Optional. Specifies what damage types this is immune to.",
          "type": "object",
          "properties": {
            "remove": {
              "description": "Removes imunity to all of the given damage types",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "add": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "RealmsData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The name of the Realm",
          "type": "string"
        },
        "media": {
          "description": "The icon that is displayed for the Realm",
          "type": "string",
          "format": "uri-reference"
        },
        "unlockRequirements": {
          "description": "These requirements must be met to unlock the Realm.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "showIfLocked": {
          "description": "Optional. Whether to display this Realm at all if locked. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "ignoreCompletion": {
          "description": "Optional. Whether mastery actions ignore completion. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "name",
        "media",
        "unlockRequirements"
      ],
      "unevaluatedProperties": false
    },
    "DamageTypeData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The name of the damage type",
          "type": "string"
        },
        "media": {
          "description": "The icon that is displayed for the damage type and resistance",
          "type": "string",
          "format": "uri-reference"
        },
        "resistanceName": {
          "description": "Custom name for the resistance to this damage type",
          "type": "string"
        },
        "resistanceCap": {
          "description": "The max allowed resistance from gear and stats",
          "type": "number"
        },
        "immuneTo": {
          "description": "List of damage type IDs that this damage type is immune to",
          "type": "array",
          "items": {
            "$ref": "#/$defs/DamageTypeID"
          }
        },
        "spanClass": {
          "description": "The class that is used for damage type text spans",
          "type": "string"
        },
        "onlyShowIfUsing": {
          "description": "Optional. If this damage type should only be displayed to the player if using. ",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "name",
        "media",
        "resistanceName",
        "resistanceCap"
      ],
      "unevaluatedProperties": false
    },
    "ModifierScopeData": {
      "type": "object",
      "properties": {
        "skillID": {
          "description": "Optional. The ID of the skill this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "damageTypeID": {
          "description": "Optional. The ID of the damage type this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        },
        "realmID": {
          "description": "Optional. The ID of the realm this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "currencyID": {
          "description": "Optional. The ID of the currency this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "categoryID": {
          "description": "Optional. The ID of the skill category this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "actionID": {
          "description": "Optional. The ID of the skill action this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "subcategoryID": {
          "description": "Optional. the ID of the skill subcategory this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "itemID": {
          "description": "Optional. The ID of the item this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "effectGroupID": {
          "description": "Optional. The ID of the combat effect group this scope applies to",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectGroupID"
            }
          ]
        }
      }
    },
    "ModifierAliasData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModifierScopeData"
        }
      ],
      "properties": {
        "key": {
          "description": "The old modifier key that is an alias for this modifier",
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "unevaluatedProperties": false
    },
    "ModifierDescriptionData": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The template string to use for the description",
          "type": "string"
        },
        "lang": {
          "description": "Optional. ID of the language string to use in lieu text",
          "type": "string"
        },
        "above": {
          "description": "Optional. If present, the value of the modifier must be above this for this description to be used",
          "type": "number"
        },
        "below": {
          "description": "Optional. If present, the value of the modifier must be below this for this description to be used",
          "type": "number"
        },
        "includeSign": {
          "description": "Optional. If a `+/-` sign should be included before the `${value}`. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "inverted": {
          "description": "Optional. If present, this description's positive/negative formatting will be opposite to the modifier's. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "scope": {
          "type": "object",
          "description": "Optional. If present, this description will only apply to modifiers within the given scope",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierScopeData"
            }
          ]
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false
    },
    "ModifierScopeOptions": {
      "type": "object",
      "properties": {
        "skill": {
          "description": "Optional. If this scoping applies to a specific skill. Defaults to false.",
          "type": "boolean"
        },
        "damageType": {
          "description": "Optional. If this scoping applies to a specific damage type. Defaults to false.",
          "type": "boolean"
        },
        "realm": {
          "description": "Optional. If this scoping applies to a specific realm. Defaults to false.",
          "type": "boolean"
        },
        "currency": {
          "description": "Optional. If this scoping applies to a specific currency. Defaults to false.",
          "type": "boolean"
        },
        "category": {
          "description": "Optional. If this scoping applies to a specific skill category. Requires the skill scope. Defaults to false.",
          "type": "boolean"
        },
        "action": {
          "description": "Optional. If this scoping applies to a specific skill action. Requires the skill scope. Defaults to false.",
          "type": "boolean"
        },
        "subcategory": {
          "description": "Optional. If this scoping applies to a specific skill subcategory. Requires the skill scope. Defaults to false.",
          "type": "boolean"
        },
        "item": {
          "description": "Optional. If this scoping applies to a specific Item",
          "type": "boolean"
        },
        "effectGroup": {
          "description": "Optional. If this scoping applies to a specific combat effect group",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ModifierScopingData": {
      "type": "object",
      "properties": {
        "scopes": {
          "description": "The specific scopes allowed by this modifier",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierScopeOptions"
            }
          ]
        },
        "scopeSource": {
          "description": "Optional. Determines the source for action and category scopes for this scoping.",
          "oneOf": [
            {
              "$ref": "#/$defs/ModifierScopeSourceID"
            }
          ]
        },
        "descriptions": {
          "description": "The descriptions to use for the modifier in this scope",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierDescriptionData"
          }
        },
        "posAliases": {
          "description": "Optional. Aliases for positive values in this scope. Used for backwards compatability with old data format",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierAliasData"
          }
        },
        "negAliases": {
          "description": "Optional. Aliases for negative values in this scope. Used for backwards compatability with old data format",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierAliasData"
          }
        }
      },
      "required": [
        "scopes",
        "descriptions"
      ],
      "additionalProperties": false
    },
    "ModifierScopingModificationData": {
      "type": "object",
      "properties": {
        "scopes": {
          "description": "Determines which scope to modify, or add if it does not already exist",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierScopeOptions"
            }
          ]
        },
        "descriptions": {
          "description": "Optional. Descriptions to add to this scope. Required if adding a new scope.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierDescriptionData"
          }
        },
        "posAliases": {
          "description": "Optional. Aliases for positive values to add to this scope",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierAliasData"
          }
        },
        "negAliases": {
          "description": "Optional. Aliases for negative values to add to this scope",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierAliasData"
          }
        }
      },
      "required": [
        "scopes"
      ],
      "additionalProperties": false
    },
    "ModifierData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "inverted": {
          "description": "Optional. If negative values of this modifier should be treated as positive and vice versa. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "allowPositive": {
          "description": "Optional. If this modifier is allowed to have positive values. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "allowNegative": {
          "description": "Optional. If this modifier is allowed to have negative values. Defaults to true.",
          "type": "boolean",
          "default": true
        },
        "isCombat": {
          "description": "Optional. If this modifier causes a change in combat stats when changed. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "allowEnemy": {
          "description": "Optional. If this modifier can be applied to enemies in combat. Defaults to false.",
          "type": "boolean",
          "default": false
        },
        "modifyValue": {
          "description": "Optional. An expression that is applied to the modifier's value before it is described",
          "type": "string",
          "default": true
        },
        "allowedScopes": {
          "description": "Determines which scopes this modifier can belong to",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierScopingData"
          },
          "minItems": 1
        }
      },
      "required": [
        "allowedScopes"
      ],
      "unevaluatedProperties": false
    },
    "ModifierModificationData": {
      "description": "Data for modifying a Modifier instance",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
        "allowedScopes": {
          "description": "Adds or modifies an existing scopes belonging to this modifier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ModifierScopingModificationData"
          },
          "minItems": 1
        }
      }
    },
    "BaseEnemyModifierValuesRecordData": {
      "type": "object",
      "properties": {
        "increasedGlobalAccuracy": {
          "description": "Positive value alias for melvorD:accuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalAccuracy": {
          "description": "Negative value alias for melvorD:accuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:accuracyRating": {
          "description": "-${value}% Global Accuracy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "accuracyRating": {
          "description": "-${value}% Global Accuracy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeAccuracyBonus": {
          "description": "Positive value alias for melvorD:meleeAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeAccuracyBonus": {
          "description": "Negative value alias for melvorD:meleeAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeAccuracyRating": {
          "description": "-${value}% Melee Accuracy Rating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeAccuracyRating": {
          "description": "-${value}% Melee Accuracy Rating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedAccuracyBonus": {
          "description": "Positive value alias for melvorD:rangedAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedAccuracyBonus": {
          "description": "Negative value alias for melvorD:rangedAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedAccuracyRating": {
          "description": "-${value}% Ranged Accuracy Rating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedAccuracyRating": {
          "description": "-${value}% Ranged Accuracy Rating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicAccuracyBonus": {
          "description": "Positive value alias for melvorD:magicAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicAccuracyBonus": {
          "description": "Negative value alias for melvorD:magicAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicAccuracyRating": {
          "description": "-${value}% Magic Accuracy Rating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "magicAccuracyRating": {
          "description": "-${value}% Magic Accuracy Rating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "increasedMeleeMaxHit": {
          "description": "Positive value alias for melvorD:meleeMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeMaxHit": {
          "description": "Negative value alias for melvorD:meleeMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeMaxHit": {
          "description": "-${value}% Melee Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeMaxHit": {
          "description": "-${value}% Melee Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedMaxHit": {
          "description": "Positive value alias for melvorD:rangedMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedMaxHit": {
          "description": "Negative value alias for melvorD:rangedMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedMaxHit": {
          "description": "-${value}% Ranged Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedMaxHit": {
          "description": "-${value}% Ranged Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicMaxHit": {
          "description": "Positive value alias for melvorD:magicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicMaxHit": {
          "description": "Negative value alias for melvorD:magicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicMaxHit": {
          "description": "-${value}% Magic Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "magicMaxHit": {
          "description": "-${value}% Magic Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "increasedGlobalEvasion": {
          "description": "Positive value alias for melvorD:evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalEvasion": {
          "description": "Negative value alias for melvorD:evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:evasion": {
          "description": "-${value}% Global Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "evasion": {
          "description": "-${value}% Global Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeEvasion": {
          "description": "Positive value alias for melvorD:meleeEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeEvasion": {
          "description": "Negative value alias for melvorD:meleeEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeEvasion": {
          "description": "-${value}% Melee Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeEvasion": {
          "description": "-${value}% Melee Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedEvasion": {
          "description": "Positive value alias for melvorD:rangedEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedEvasion": {
          "description": "Negative value alias for melvorD:rangedEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedEvasion": {
          "description": "-${value}% Ranged Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedEvasion": {
          "description": "-${value}% Ranged Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicEvasion": {
          "description": "Positive value alias for melvorD:magicEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicEvasion": {
          "description": "Negative value alias for melvorD:magicEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicEvasion": {
          "description": "-${value}% Magic Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicEvasion": {
          "description": "-${value}% Magic Evasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHitFlat": {
          "description": "Positive value alias for melvorD:flatMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxHitFlat": {
          "description": "Negative value alias for melvorD:flatMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMaxHit": {
          "description": "-${value} Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMaxHit": {
          "description": "-${value} Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHitPercent": {
          "description": "Positive value alias for melvorD:maxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxHitPercent": {
          "description": "Negative value alias for melvorD:maxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHit": {
          "description": "-${value}% Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "maxHit": {
          "description": "-${value}% Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHPRegenFlat": {
          "description": "Positive value alias for melvorD:flatHPRegen",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedHPRegenFlat": {
          "description": "Negative value alias for melvorD:flatHPRegen",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatHPRegen": {
          "description": "-${value} Flat HP Regen",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatHPRegen": {
          "description": "-${value} Flat HP Regen",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAttackInterval": {
          "description": "Positive value alias for melvorD:flatAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAttackInterval": {
          "description": "Negative value alias for melvorD:flatAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatAttackInterval": {
          "description": "-${value}s Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatAttackInterval": {
          "description": "-${value}s Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAttackIntervalPercent": {
          "description": "Positive value alias for melvorD:attackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAttackIntervalPercent": {
          "description": "Negative value alias for melvorD:attackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:attackInterval": {
          "description": "-${value}% Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "attackInterval": {
          "description": "-${value}% Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHitpoints": {
          "description": "Positive value alias for melvorD:maxHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxHitpoints": {
          "description": "Negative value alias for melvorD:maxHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxHitpointsWithDamageType": {
          "description": "Positive value alias for melvorD:maxHitpoints",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:maxHitpoints": {
          "description": "-${value}% Maximum Hitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue2"
                  }
                ]
              }
            }
          ]
        },
        "maxHitpoints": {
          "description": "-${value}% Maximum Hitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue2"
                  }
                ]
              }
            }
          ]
        },
        "increasedFlatMaxHitpoints": {
          "description": "Positive value alias for melvorD:flatMaxHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatMaxHitpoints": {
          "description": "Negative value alias for melvorD:flatMaxHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMaxHitpoints": {
          "description": "-${value} Maximum Hitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMaxHitpoints": {
          "description": "-${value} Maximum Hitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedReflectDamage": {
          "description": "Positive value alias for melvorD:reflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedReflectDamage": {
          "description": "Negative value alias for melvorD:reflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:reflectDamage": {
          "description": "-${value}% Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "reflectDamage": {
          "description": "-${value}% Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHitpointRegeneration": {
          "description": "Positive value alias for melvorD:hitpointRegeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedHitpointRegeneration": {
          "description": "Negative value alias for melvorD:hitpointRegeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:hitpointRegeneration": {
          "description": "-${value}% Hitpoint Regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "hitpointRegeneration": {
          "description": "-${value}% Hitpoint Regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinHitBasedOnMaxHit": {
          "description": "Positive value alias for melvorD:minHitBasedOnMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMinHitBasedOnMaxHit": {
          "description": "Negative value alias for melvorD:minHitBasedOnMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:minHitBasedOnMaxHit": {
          "description": "-${value}% of Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "minHitBasedOnMaxHit": {
          "description": "-${value}% of Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAttackRolls": {
          "description": "Positive value alias for melvorD:attackRolls",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAttackRolls": {
          "description": "Negative value alias for melvorD:attackRolls",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:attackRolls": {
          "description": "-${value} rolls per Attack. Select highest chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "attackRolls": {
          "description": "-${value} rolls per Attack. Select highest chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedDragonBreathDamage": {
          "description": "Negative value alias for melvorD:dragonBreathDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:dragonBreathDamage": {
          "description": "-${value}% damage taken from dragonbreath",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "dragonBreathDamage": {
          "description": "-${value}% damage taken from dragonbreath",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatReflectDamage": {
          "description": "Positive value alias for melvorD:flatReflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatReflectDamage": {
          "description": "Negative value alias for melvorD:flatReflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatReflectDamage": {
          "description": "-${value} Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatReflectDamage": {
          "description": "-${value} Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRolledReflectDamage": {
          "description": "Positive value alias for melvorD:rolledReflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRolledReflectDamage": {
          "description": "Negative value alias for melvorD:rolledReflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rolledReflectDamage": {
          "description": "-0-${value} Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rolledReflectDamage": {
          "description": "-0-${value} Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMinHit": {
          "description": "Positive value alias for melvorD:flatMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatMinHit": {
          "description": "Negative value alias for melvorD:flatMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMinHit": {
          "description": "-${value} Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMinHit": {
          "description": "-${value} Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMagicMinHit": {
          "description": "${value} Magic Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "flatMagicMinHit": {
          "description": "${value} Magic Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "increasedConfusion": {
          "description": "Positive value alias for melvorD:currentHPDamageTakenOnAttack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDecay": {
          "description": "Positive value alias for melvorD:currentHPDamageTakenOnAttack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:currentHPDamageTakenOnAttack": {
          "description": "+${value}% of remaining HP taken as damage on a successful attack (once per turn, capped at 10K damage)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "currentHPDamageTakenOnAttack": {
          "description": "+${value}% of remaining HP taken as damage on a successful attack (once per turn, capped at 10K damage)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:maxHPDamageTakenOnAttack": {
          "description": "+${value}% of Max HP taken as damage on a successful attack (once per turn, capped at 10K damage)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "maxHPDamageTakenOnAttack": {
          "description": "+${value}% of Max HP taken as damage on a successful attack (once per turn, capped at 10K damage)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageTaken": {
          "description": "Positive value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageTaken": {
          "description": "Negative value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageTaken": {
          "description": "${value}% less Damage taken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue256"
                  }
                ]
              }
            }
          ]
        },
        "damageTaken": {
          "description": "${value}% less Damage taken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue256"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:damageDealt": {
          "description": "${value}% damage dealt by all attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageDealt": {
          "description": "${value}% damage dealt by all attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedLifesteal": {
          "description": "Positive value alias for melvorD:lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedLifesteal": {
          "description": "Negative value alias for melvorD:lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:lifesteal": {
          "description": "-${value}% Lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "lifesteal": {
          "description": "-${value}% Lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeLifesteal": {
          "description": "Positive value alias for melvorD:meleeLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeLifesteal": {
          "description": "Negative value alias for melvorD:meleeLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeLifesteal": {
          "description": "-${value}% Melee lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeLifesteal": {
          "description": "-${value}% Melee lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedLifesteal": {
          "description": "Positive value alias for melvorD:rangedLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedLifesteal": {
          "description": "Negative value alias for melvorD:rangedLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedLifesteal": {
          "description": "-${value}% Ranged lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedLifesteal": {
          "description": "-${value}% Ranged lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicLifesteal": {
          "description": "Positive value alias for melvorD:magicLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicLifesteal": {
          "description": "Negative value alias for melvorD:magicLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicLifesteal": {
          "description": "-${value}% Magic lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicLifesteal": {
          "description": "-${value}% Magic lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBleedLifesteal": {
          "description": "Positive value alias for melvorD:bleedLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBleedLifesteal": {
          "description": "Negative value alias for melvorD:bleedLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bleedLifesteal": {
          "description": "-${value}% Bleed lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bleedLifesteal": {
          "description": "-${value}% Bleed lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBurnLifesteal": {
          "description": "Positive value alias for melvorD:burnLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBurnLifesteal": {
          "description": "Negative value alias for melvorD:burnLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:burnLifesteal": {
          "description": "-${value}% Burn lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "burnLifesteal": {
          "description": "-${value}% Burn lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPoisonLifesteal": {
          "description": "Positive value alias for melvorD:poisonLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedPoisonLifesteal": {
          "description": "Negative value alias for melvorD:poisonLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:poisonLifesteal": {
          "description": "-${value}% Poison lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "poisonLifesteal": {
          "description": "-${value}% Poison lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeCritChance": {
          "description": "Positive value alias for melvorD:meleeCritChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeCritChance": {
          "description": "Negative value alias for melvorD:meleeCritChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeCritChance": {
          "description": "-${value}% Melee critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeCritChance": {
          "description": "-${value}% Melee critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedCritChance": {
          "description": "Positive value alias for melvorD:rangedCritChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedCritChance": {
          "description": "Negative value alias for melvorD:rangedCritChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedCritChance": {
          "description": "-${value}% Ranged critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedCritChance": {
          "description": "-${value}% Ranged critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicCritChance": {
          "description": "Positive value alias for melvorD:magicCritChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicCritChance": {
          "description": "Negative value alias for melvorD:magicCritChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicCritChance": {
          "description": "-${value}% Magic critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicCritChance": {
          "description": "-${value}% Magic critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:meleeProtection": {
          "description": "${value}% chance to dodge Melee attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeProtection": {
          "description": "${value}% chance to dodge Melee attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:rangedProtection": {
          "description": "${value}% chance to dodge Ranged attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedProtection": {
          "description": "${value}% chance to dodge Ranged attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:magicProtection": {
          "description": "${value}% chance to dodge Magic attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicProtection": {
          "description": "${value}% chance to dodge Magic attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:effectImmunity": {
          "description": "Immune to ${effectGroupName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue256"
          }
        },
        "effectImmunity": {
          "description": "Immune to ${effectGroupName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue256"
          }
        },
        "melvorD:effectIgnoreChance": {
          "description": "${value}% chance to ignore ${effectGroupName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue256"
          }
        },
        "effectIgnoreChance": {
          "description": "${value}% chance to ignore ${effectGroupName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue256"
          }
        },
        "melvorD:sleepImmunity": {
          "description": "Immune to Sleep",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "sleepImmunity": {
          "description": "Immune to Sleep",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRebirthChance": {
          "description": "Positive value alias for melvorD:rebirthChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rebirthChance": {
          "description": "+${value}% chance to respawn with full hitpoints upon reaching 0 hitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rebirthChance": {
          "description": "+${value}% chance to respawn with full hitpoints upon reaching 0 hitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSummoningMaxHit": {
          "description": "Positive value alias for melvorD:summoningMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSummoningMaxHit": {
          "description": "Negative value alias for melvorD:summoningMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:summoningMaxHit": {
          "description": "-${value}% Summoning Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningMaxHit": {
          "description": "-${value}% Summoning Max Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:otherStyleImmunity": {
          "description": "Immune to all attack types other than their own",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "otherStyleImmunity": {
          "description": "Immune to all attack types other than their own",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:meleeImmunity": {
          "description": "Immune to Melee attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeImmunity": {
          "description": "Immune to Melee attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:rangedImmunity": {
          "description": "Immune to Ranged attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedImmunity": {
          "description": "Immune to Ranged attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:magicImmunity": {
          "description": "Immune to Magic attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicImmunity": {
          "description": "Immune to Magic attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTotalBleedDamage": {
          "description": "Positive value alias for melvorD:flatTotalBleedDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTotalBleedDamage": {
          "description": "+${value} total damage to bleed inflicted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTotalBleedDamage": {
          "description": "+${value} total damage to bleed inflicted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToIncreaseStunDuration": {
          "description": "Positive value alias for melvorD:stunDurationIncreaseChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:stunDurationIncreaseChance": {
          "description": "+${value}% chance to increase the length of stun inflicted by 1 turn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "stunDurationIncreaseChance": {
          "description": "+${value}% chance to increase the length of stun inflicted by 1 turn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRegenerationInterval": {
          "description": "Positive value alias for melvorD:flatRegenerationInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRegenerationInterval": {
          "description": "Negative value alias for melvorD:flatRegenerationInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRegenerationIntervalWithDamageType": {
          "description": "Negative value alias for melvorD:flatRegenerationInterval",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatRegenerationInterval": {
          "description": "-${value}s Hitpoint Regeneration interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue2"
                  }
                ]
              }
            }
          ]
        },
        "flatRegenerationInterval": {
          "description": "-${value}s Hitpoint Regeneration interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue2"
                  }
                ]
              }
            }
          ]
        },
        "increasedOnHitSlowMagnitude": {
          "description": "Positive value alias for melvorD:onHitSlowMagnitude",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:onHitSlowMagnitude": {
          "description": "Inflict a slow that increases the target's attack interval by ${value}% when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "onHitSlowMagnitude": {
          "description": "Inflict a slow that increases the target's attack interval by ${value}% when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:globalEvasionHPScaling": {
          "description": "Evasion Ratings are multiplied by ${value} times current Hitpoints percent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "globalEvasionHPScaling": {
          "description": "Evasion Ratings are multiplied by ${value} times current Hitpoints percent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPrayerPointsWhenHit": {
          "description": "Positive value alias for melvorD:flatPrayerPointsWhenHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatPrayerPointsWhenHit": {
          "description": "Gain +${value} Prayer Points for each successful Enemy hit on you",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatPrayerPointsWhenHit": {
          "description": "Gain +${value} Prayer Points for each successful Enemy hit on you",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMeleeAccuracyBonusPerAttackInterval": {
          "description": "Positive value alias for melvorD:flatMeleeAccuracyBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatMeleeAccuracyBonusPerAttackInterval": {
          "description": "Negative value alias for melvorD:flatMeleeAccuracyBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMeleeAccuracyBonusPerAttackInterval": {
          "description": "-${value} Flat Melee Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMeleeAccuracyBonusPerAttackInterval": {
          "description": "-${value} Flat Melee Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMeleeStrengthBonusPerAttackInterval": {
          "description": "Positive value alias for melvorD:flatMeleeStrengthBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatMeleeStrengthBonusPerAttackInterval": {
          "description": "Negative value alias for melvorD:flatMeleeStrengthBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMeleeStrengthBonusPerAttackInterval": {
          "description": "-${value} Flat Melee Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMeleeStrengthBonusPerAttackInterval": {
          "description": "-${value} Flat Melee Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatRangedAccuracyBonusPerAttackInterval": {
          "description": "Positive value alias for melvorD:flatRangedAccuracyBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatRangedAccuracyBonusPerAttackInterval": {
          "description": "Negative value alias for melvorD:flatRangedAccuracyBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedAccuracyBonusPerAttackInterval": {
          "description": "-${value} Flat Ranged Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedAccuracyBonusPerAttackInterval": {
          "description": "-${value} Flat Ranged Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatRangedStrengthBonusPerAttackInterval": {
          "description": "Positive value alias for melvorD:flatRangedStrengthBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatRangedStrengthBonusPerAttackInterval": {
          "description": "Negative value alias for melvorD:flatRangedStrengthBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedStrengthBonusPerAttackInterval": {
          "description": "-${value} Flat Ranged Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedStrengthBonusPerAttackInterval": {
          "description": "-${value} Flat Ranged Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMagicAccuracyBonusPerAttackInterval": {
          "description": "Positive value alias for melvorD:flatMagicAccuracyBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFlatMagicAccuracyBonusPerAttackInterval": {
          "description": "Negative value alias for melvorD:flatMagicAccuracyBonusPerAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMagicAccuracyBonusPerAttackInterval": {
          "description": "-${value} Flat Magic Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMagicAccuracyBonusPerAttackInterval": {
          "description": "-${value} Flat Magic Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeMaxHitBonusAgainstRanged": {
          "description": "Positive value alias for melvorD:meleeMaxHitAgainstRanged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeMaxHitBonusAgainstRanged": {
          "description": "Negative value alias for melvorD:meleeMaxHitAgainstRanged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeMaxHitAgainstRanged": {
          "description": "-${value}% Melee Max Hit. This value is tripled if fighting a Ranged Enemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeMaxHitAgainstRanged": {
          "description": "-${value}% Melee Max Hit. This value is tripled if fighting a Ranged Enemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedMaxHitBonusAgainstMagic": {
          "description": "Positive value alias for melvorD:rangedMaxHitAgainstMagic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedMaxHitBonusAgainstMagic": {
          "description": "Negative value alias for melvorD:rangedMaxHitAgainstMagic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedMaxHitAgainstMagic": {
          "description": "-${value}% Ranged Max Hit. This value is tripled if fighting a Magic Enemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedMaxHitAgainstMagic": {
          "description": "-${value}% Ranged Max Hit. This value is tripled if fighting a Magic Enemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicMaxHitBonusAgainstMelee": {
          "description": "Positive value alias for melvorD:magicMaxHitAgainstMelee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicMaxHitBonusAgainstMelee": {
          "description": "Negative value alias for melvorD:magicMaxHitAgainstMelee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicMaxHitAgainstMelee": {
          "description": "-${value}% Magic Max Hit. This value is tripled if fighting a Melee Enemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicMaxHitAgainstMelee": {
          "description": "-${value}% Magic Max Hit. This value is tripled if fighting a Melee Enemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageTakenAddedAsPrayerPoints": {
          "description": "Positive value alias for melvorD:damageTakenAddedAsPrayerPoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageTakenAddedAsPrayerPoints": {
          "description": "Negative value alias for melvorD:damageTakenAddedAsPrayerPoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageTakenAddedAsPrayerPoints": {
          "description": "-${value}% of all damage taken is added as Prayer Points (Rounded down)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageTakenAddedAsPrayerPoints": {
          "description": "-${value}% of all damage taken is added as Prayer Points (Rounded down)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "globalAccuracyHPScaling": {
          "description": "Positive value alias for melvorD:accuracyRatingHPScaling",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:accuracyRatingHPScaling": {
          "description": "Accuracy Ratings are multiplied by ${value} times current Hitpoints percent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "accuracyRatingHPScaling": {
          "description": "Accuracy Ratings are multiplied by ${value} times current Hitpoints percent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToIncreaseSleepDuration": {
          "description": "Positive value alias for melvorD:sleepDurationIncreaseChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToIncreaseSleepDuration": {
          "description": "Negative value alias for melvorD:sleepDurationIncreaseChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:sleepDurationIncreaseChance": {
          "description": "-${value}% chance for Sleep applied to the Enemy to last an extra 1 Attack Turn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "sleepDurationIncreaseChance": {
          "description": "-${value}% chance for Sleep applied to the Enemy to last an extra 1 Attack Turn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToAvoidStun": {
          "description": "Positive value alias for melvorD:stunAvoidChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToAvoidStun": {
          "description": "Negative value alias for melvorD:stunAvoidChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:stunAvoidChance": {
          "description": "-${value}% chance to avoid being Stunned",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "stunAvoidChance": {
          "description": "-${value}% chance to avoid being Stunned",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHealWhenStunned": {
          "description": "Positive value alias for melvorD:healWhenStunned",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedHealWhenStunned": {
          "description": "Negative value alias for melvorD:healWhenStunned",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:healWhenStunned": {
          "description": "When a stun is applied to you, heal for -${value}% of your Max HP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "healWhenStunned": {
          "description": "When a stun is applied to you, heal for -${value}% of your Max HP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHealWhenSleep": {
          "description": "Positive value alias for melvorD:healWhenSlept",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedHealWhenSleep": {
          "description": "Negative value alias for melvorD:healWhenSlept",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:healWhenSlept": {
          "description": "When Sleep is applied to you, heal for -${value}% of your Max HP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "healWhenSlept": {
          "description": "When Sleep is applied to you, heal for -${value}% of your Max HP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageTakenPerAttack": {
          "description": "Positive value alias for melvorD:damageTakenPerAttack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFrostburn": {
          "description": "Positive value alias for melvorD:damageTakenPerAttack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageTakenPerAttack": {
          "description": "Negative value alias for melvorD:damageTakenPerAttack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageTakenPerAttack": {
          "description": "-${value}% of Current HP taken as damage per Attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageTakenPerAttack": {
          "description": "-${value}% of Current HP taken as damage per Attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:frostburnDamage": {
          "description": "+${value}% of Current HP taken as damage per Attack (Capped at 2K)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "frostburnDamage": {
          "description": "+${value}% of Current HP taken as damage per Attack (Capped at 2K)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeMaxHitFlat": {
          "description": "Positive value alias for melvorD:flatMeleeMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeMaxHitFlat": {
          "description": "Negative value alias for melvorD:flatMeleeMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMeleeMaxHit": {
          "description": "-${value} Flat Melee Maximum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMeleeMaxHit": {
          "description": "-${value} Flat Melee Maximum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedMaxHitFlat": {
          "description": "Positive value alias for melvorD:flatRangedMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedMaxHitFlat": {
          "description": "Negative value alias for melvorD:flatRangedMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedMaxHit": {
          "description": "-${value} Flat Ranged Maximum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedMaxHit": {
          "description": "-${value} Flat Ranged Maximum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicMaxHitFlat": {
          "description": "Positive value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicMaxHitFlat": {
          "description": "Negative value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMagicMaxHit": {
          "description": "-${value} Flat Magic Maximum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "flatMagicMaxHit": {
          "description": "-${value} Flat Magic Maximum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "increasedCurseLifesteal": {
          "description": "Positive value alias for melvorD:curseLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:curseLifesteal": {
          "description": "+${value}% Lifesteal if target is Cursed",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "curseLifesteal": {
          "description": "+${value}% Lifesteal if target is Cursed",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedLifestealBasedOnHPRegenEffectiveness": {
          "description": "Positive value alias for melvorD:lifestealBasedOnHPRegenEffectiveness",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:lifestealBasedOnHPRegenEffectiveness": {
          "description": "Increased Lifesteal based on +${value}% * Current HP Regen Effectiveness (Eg. 5% * 300 = +15% Lifesteal)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "lifestealBasedOnHPRegenEffectiveness": {
          "description": "Increased Lifesteal based on +${value}% * Current HP Regen Effectiveness (Eg. 5% * 300 = +15% Lifesteal)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disableHPRegeneration": {
          "description": "Passive Hitpoint Regeneration is disabled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableHPRegeneration": {
          "description": "Passive Hitpoint Regeneration is disabled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinMeteorShowerSpellDamage": {
          "description": "Positive value alias for melvorD:flatMinMeteorShowerSpellDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMinMeteorShowerSpellDamage": {
          "description": "+${value} minimum Spell damage when using the Meteor Shower Archaic Spell",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMinMeteorShowerSpellDamage": {
          "description": "+${value} minimum Spell damage when using the Meteor Shower Archaic Spell",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedEndOfTurnEvasion2": {
          "description": "Positive value alias for melvorD:endOfTurnEvasion2",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:endOfTurnEvasion2": {
          "description": "Gains up to +${value}% Global Evasion Rating every 2 turns (Lasts 2 turns)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "endOfTurnEvasion2": {
          "description": "Gains up to +${value}% Global Evasion Rating every 2 turns (Lasts 2 turns)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:decreaseEnemyEvasionOnStun": {
          "description": "When a Stun is applied to the Target, -10% Global Evasion Rating for the remainder of the fight (Stacks up to 3 times)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreaseEnemyEvasionOnStun": {
          "description": "When a Stun is applied to the Target, -10% Global Evasion Rating for the remainder of the fight (Stacks up to 3 times)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:decreaseEnemyEvasionOnSleep": {
          "description": "When a Sleep is applied to the Target, -10% Global Evasion Rating for the remainder of the fight (Stacks up to 3 times)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreaseEnemyEvasionOnSleep": {
          "description": "When a Sleep is applied to the Target, -10% Global Evasion Rating for the remainder of the fight (Stacks up to 3 times)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleLifesteal": {
          "description": "Doubles the Attacker Lifesteal percent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleLifesteal": {
          "description": "Doubles the Attacker Lifesteal percent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHPBurnDamage": {
          "description": "Positive value alias for melvorD:maxHPBurnDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHPBurnDamage": {
          "description": "Burn applied to the Target deal +${value}% Max HP as extra damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "maxHPBurnDamage": {
          "description": "Burn applied to the Target deal +${value}% Max HP as extra damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disableLifesteal": {
          "description": "Disables all sources of Lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableLifesteal": {
          "description": "Disables all sources of Lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBurnDOTDamage": {
          "description": "Positive value alias for melvorD:burnDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBurnDOTDamage": {
          "description": "Negative value alias for melvorD:burnDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:burnDOTDamageTaken": {
          "description": "-${value}% Damage taken from Burn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "burnDOTDamageTaken": {
          "description": "-${value}% Damage taken from Burn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBleedDOTDamage": {
          "description": "Positive value alias for melvorD:bleedDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBleedDOTDamage": {
          "description": "Negative value alias for melvorD:bleedDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bleedDOTDamageTaken": {
          "description": "-${value}% Damage taken from Bleed",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bleedDOTDamageTaken": {
          "description": "-${value}% Damage taken from Bleed",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPoisonDOTDamage": {
          "description": "Positive value alias for melvorD:poisonDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedPoisonDOTDamage": {
          "description": "Negative value alias for melvorD:poisonDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:poisonDOTDamageTaken": {
          "description": "-${value}% Damage taken from Poison",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "poisonDOTDamageTaken": {
          "description": "-${value}% Damage taken from Poison",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDeadlyPoisonDOTDamage": {
          "description": "Positive value alias for melvorD:deadlyPoisonDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDeadlyPoisonDOTDamage": {
          "description": "Negative value alias for melvorD:deadlyPoisonDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:deadlyPoisonDOTDamageTaken": {
          "description": "-${value}% Damage taken from Deadly Poison",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "deadlyPoisonDOTDamageTaken": {
          "description": "-${value}% Damage taken from Deadly Poison",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedEvasionAgainstMelee": {
          "description": "Positive value alias for melvorD:evasionAgainstMelee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:evasionAgainstMelee": {
          "description": "+${value}% Global Evasion against Melee targets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "evasionAgainstMelee": {
          "description": "+${value}% Global Evasion against Melee targets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedEvasionAgainstRanged": {
          "description": "Positive value alias for melvorD:evasionAgainstRanged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:evasionAgainstRanged": {
          "description": "+${value}% Global Evasion against Ranged targets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "evasionAgainstRanged": {
          "description": "+${value}% Global Evasion against Ranged targets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedEvasionAgainstMagic": {
          "description": "Positive value alias for melvorD:evasionAgainstMagic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:evasionAgainstMagic": {
          "description": "+${value}% Global Evasion against Magic targets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "evasionAgainstMagic": {
          "description": "+${value}% Global Evasion against Magic targets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeAccuracyMaxHitPer8Strength": {
          "description": "Positive value alias for melvorD:meleeAccuracyMaxHitPer8Strength",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeAccuracyMaxHitPer8Strength": {
          "description": "+${value}% Melee Accuracy and Melee Max Hit per 8 Strength Skill Levels (Floored)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeAccuracyMaxHitPer8Strength": {
          "description": "+${value}% Melee Accuracy and Melee Max Hit per 8 Strength Skill Levels (Floored)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicMaxHitWithActivePrayer": {
          "description": "Positive value alias for melvorD:magicMaxHitWithActivePrayer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicMaxHitWithActivePrayer": {
          "description": "+${value}% Magic Max Hit when at least one Prayer is active",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicMaxHitWithActivePrayer": {
          "description": "+${value}% Magic Max Hit when at least one Prayer is active",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedStrengthBonusPer8Ranged": {
          "description": "Positive value alias for melvorD:rangedStrengthBonusPer8Ranged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedStrengthBonusPer8Ranged": {
          "description": "+${value}% Ranged Strength Bonus per 8 Ranged Skill Levels (Floored)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedStrengthBonusPer8Ranged": {
          "description": "+${value}% Ranged Strength Bonus per 8 Ranged Skill Levels (Floored)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatBarrierSummonDamage": {
          "description": "Positive value alias for melvorD:flatBarrierSummonDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBarrierSummonDamage": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatBarrierSummonDamage": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBarrierSummonDamage": {
          "description": "Positive value alias for melvorD:barrierSummonDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:barrierSummonDamage": {
          "description": "+${value}% Summon Familiar damage added as extra damage to Barrier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "barrierSummonDamage": {
          "description": "+${value}% Summon Familiar damage added as extra damage to Barrier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatBarrierSummonDamageMelee": {
          "description": "Positive value alias for melvorD:flatBarrierSummonDamageMelee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBarrierSummonDamageMelee": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar if using Melee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatBarrierSummonDamageMelee": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar if using Melee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatBarrierSummonDamageRanged": {
          "description": "Positive value alias for melvorD:flatBarrierSummonDamageRanged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBarrierSummonDamageRanged": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar if using Ranged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatBarrierSummonDamageRanged": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar if using Ranged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatBarrierSummonDamageMagic": {
          "description": "Positive value alias for melvorD:flatBarrierSummonDamageMagic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBarrierSummonDamageMagic": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar if using Magic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatBarrierSummonDamageMagic": {
          "description": "+${value} Flat Barrier damage added to Summon Familiar if using Magic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBarrierSummonDamageIfSlayerTask": {
          "description": "Positive value alias for melvorD:barrierSummonDamageIfSlayerTask",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:barrierSummonDamageIfSlayerTask": {
          "description": "+${value}% Barrier damage added to Summon Familiar if target is current Slayer Task",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "barrierSummonDamageIfSlayerTask": {
          "description": "+${value}% Barrier damage added to Summon Familiar if target is current Slayer Task",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disableAttackDamage": {
          "description": "Disables all damage from Attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableAttackDamage": {
          "description": "Disables all damage from Attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:cleansed": {
          "description": "Immune to all debuffs and damage over time effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cleansed": {
          "description": "Immune to all debuffs and damage over time effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHitPercentBasedOnTargetCurrentHitpoints": {
          "description": "Positive value alias for melvorD:maxHitBasedOnTargetCurrentHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHitBasedOnTargetCurrentHitpoints": {
          "description": "+${value}% Max Hit for each 1% of Target current Hitpoints remaining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "maxHitBasedOnTargetCurrentHitpoints": {
          "description": "+${value}% Max Hit for each 1% of Target current Hitpoints remaining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToPreservePrayerPointsPerPoint": {
          "description": "Positive value alias for melvorD:prayerPointPreservationChancePerPoint",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:prayerPointPreservationChancePerPoint": {
          "description": "+${value}% chance to preserve Prayer Points per Prayer Point cost of active Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "prayerPointPreservationChancePerPoint": {
          "description": "+${value}% chance to preserve Prayer Points per Prayer Point cost of active Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHitBasedOnPrayerCost": {
          "description": "Positive value alias for melvorD:maxHitBasedOnPrayerCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHitBasedOnPrayerCost": {
          "description": "+${value}% Maximum Hit per Prayer Point cost of active Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "maxHitBasedOnPrayerCost": {
          "description": "+${value}% Maximum Hit per Prayer Point cost of active Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPrayerPointsPerMonsterKill": {
          "description": "Positive value alias for melvorD:flatPrayerPointsPerMonsterKill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatPrayerPointsPerMonsterKill": {
          "description": "+${value} Prayer Points gained per Monster kill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatPrayerPointsPerMonsterKill": {
          "description": "+${value} Prayer Points gained per Monster kill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSelfDamageBasedOnCurrentHitpoints": {
          "description": "Positive value alias for melvorD:selfDamageOnHitBasedOnCurrentHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:selfDamageOnHitBasedOnCurrentHitpoints": {
          "description": "Deal damage to self equal to +${value}% of your current Hitpoints per hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "selfDamageOnHitBasedOnCurrentHitpoints": {
          "description": "Deal damage to self equal to +${value}% of your current Hitpoints per hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToReceiveNoCombatDrops": {
          "description": "Positive value alias for melvorD:noCombatDropChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:noCombatDropChance": {
          "description": "+${value}% chance to receive no Combat drops from Monsters or Dungeons",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "noCombatDropChance": {
          "description": "+${value}% chance to receive no Combat drops from Monsters or Dungeons",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedMeleeAttackIntervalPercent": {
          "description": "Negative value alias for melvorD:meleeAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeAttackInterval": {
          "description": "-${value}% Melee Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeAttackInterval": {
          "description": "-${value}% Melee Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:rangedAttackInterval": {
          "description": "${value}% Ranged Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedAttackInterval": {
          "description": "${value}% Ranged Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:magicAttackInterval": {
          "description": "${value}% Magic Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicAttackInterval": {
          "description": "${value}% Magic Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToDodge": {
          "description": "Positive value alias for melvorD:dodgeChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:dodgeChance": {
          "description": "+${value}% chance to convert a successful hit from the Target into a miss",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "dodgeChance": {
          "description": "+${value}% chance to convert a successful hit from the Target into a miss",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:convertMissIntoHit": {
          "description": "${value}% chance to convert a miss into a successful hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "convertMissIntoHit": {
          "description": "${value}% chance to convert a miss into a successful hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAmmoPreservationBypass": {
          "description": "Positive value alias for melvorD:bypassAmmoPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bypassAmmoPreservationChance": {
          "description": "+${value}% Ammo Preservation (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bypassAmmoPreservationChance": {
          "description": "+${value}% Ammo Preservation (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRunePreservationBypass": {
          "description": "Positive value alias for melvorD:bypassRunePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bypassRunePreservationChance": {
          "description": "+${value}% Rune Preservation (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bypassRunePreservationChance": {
          "description": "+${value}% Rune Preservation (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halfAttackInterval": {
          "description": "Positive value alias for melvorD:halveAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:halveAttackInterval": {
          "description": "All Attack intervals are halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halveAttackInterval": {
          "description": "All Attack intervals are halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedLifestealDamageBasedOnCurrentHitpoints": {
          "description": "Positive value alias for melvorD:lifestealDamageBasedOnCurrentHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:lifestealDamageBasedOnCurrentHitpoints": {
          "description": "+${value}% of target's current hitpoints dealt as damage and healed when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "lifestealDamageBasedOnCurrentHitpoints": {
          "description": "+${value}% of target's current hitpoints dealt as damage and healed when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageBasedOnCurrentHitpoints": {
          "description": "Positive value alias for melvorD:damageBasedOnCurrentHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageBasedOnCurrentHitpoints": {
          "description": "+${value}% of target's current hitpoints dealt as damage when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageBasedOnCurrentHitpoints": {
          "description": "+${value}% of target's current hitpoints dealt as damage when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageBasedOnMaxHitpoints": {
          "description": "Positive value alias for melvorD:damageBasedOnMaxHitpoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageBasedOnMaxHitpoints": {
          "description": "+${value}% of target's max hitpoints dealt as damage when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageBasedOnMaxHitpoints": {
          "description": "+${value}% of target's max hitpoints dealt as damage when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHealingWhenHit": {
          "description": "Positive value alias for melvorD:healingWhenHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:healingWhenHit": {
          "description": "+${value}% of max hitpoints healed when hit by an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "healingWhenHit": {
          "description": "+${value}% of max hitpoints healed when hit by an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageDealtWith2Effects": {
          "description": "Positive value alias for melvorD:damageDealtWith2Effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageDealtWith2Effects": {
          "description": "+${value}% damage dealt if affected by 2 or more effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageDealtWith2Effects": {
          "description": "+${value}% damage dealt if affected by 2 or more effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedUnholyMarkOnHit": {
          "description": "Positive value alias for melvorD:unholyMarkOnHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:unholyMarkOnHit": {
          "description": "+${value} Unholy Mark stacks applied when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "unholyMarkOnHit": {
          "description": "+${value} Unholy Mark stacks applied when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageTakenBasedOnHP": {
          "description": "Positive value alias for melvorD:damageTakenBasedOnHP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageTakenBasedOnHP": {
          "description": "+${value}% damage taken per percent of hitpoints missing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageTakenBasedOnHP": {
          "description": "+${value}% damage taken per percent of hitpoints missing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedCurseOnHitWithUnholyMark": {
          "description": "Positive value alias for melvorD:curseOnHitWithUnholyMark",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:curseOnHitWithUnholyMark": {
          "description": "+${value}% chance to apply a random Curse when hitting with an attack if the target has Unholy Mark",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "curseOnHitWithUnholyMark": {
          "description": "+${value}% chance to apply a random Curse when hitting with an attack if the target has Unholy Mark",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatBarrierDamage": {
          "description": "Positive value alias for melvorD:flatBarrierDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBarrierDamage": {
          "description": "+${value} Flat Barrier damage dealt by Attacker per Attack Turn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatBarrierDamage": {
          "description": "+${value} Flat Barrier damage dealt by Attacker per Attack Turn",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageDealtPerEffect": {
          "description": "Positive value alias for melvorD:damageDealtPerEffect",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageDealtPerEffect": {
          "description": "+${value}% damage dealt per effect affected by",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageDealtPerEffect": {
          "description": "+${value}% damage dealt per effect affected by",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRegenPerDamageTaken": {
          "description": "Positive value alias for melvorD:regenPerDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:regenPerDamageTaken": {
          "description": "+${value}% of damage taken from attacks healed on next hitpoint regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "regenPerDamageTaken": {
          "description": "+${value}% of damage taken from attacks healed on next hitpoint regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedSummoningAttackIntervalPercent": {
          "description": "Negative value alias for melvorD:summoningAttackInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:summoningAttackInterval": {
          "description": "-${value}% Summoning Familiar Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningAttackInterval": {
          "description": "-${value}% Summoning Familiar Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:flatSummoningAttackInterval": {
          "description": "${value}s Summoning Familiar Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSummoningAttackInterval": {
          "description": "${value}s Summoning Familiar Attack Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:cantAttack": {
          "description": "Cannot perform attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cantAttack": {
          "description": "Cannot perform attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:cantEvade": {
          "description": "Cannot evade attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cantEvade": {
          "description": "Cannot evade attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:cantRegenBarrier": {
          "description": "Cannot regenerate barrier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cantRegenBarrier": {
          "description": "Cannot regenerate barrier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalCritChance": {
          "description": "Positive value alias for melvorD:critChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:critChance": {
          "description": "+${value}% Global critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "critChance": {
          "description": "+${value}% Global critical hit chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:cantSpecialAttack": {
          "description": "Cannot use Special Attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cantSpecialAttack": {
          "description": "Cannot use Special Attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedLacerationLifesteal": {
          "description": "Positive value alias for melvorD:lacerationLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:lacerationLifesteal": {
          "description": "+${value}% Laceration lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "lacerationLifesteal": {
          "description": "+${value}% Laceration lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageTakenPerMissedAttack": {
          "description": "Positive value alias for melvorD:damageTakenPerMissedAttack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageTakenPerMissedAttack": {
          "description": "+${value}% of Current HP taken as damage per missed attack (once per turn)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageTakenPerMissedAttack": {
          "description": "+${value}% of Current HP taken as damage per missed attack (once per turn)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAbyssalSlayerAreaEffectNegation": {
          "description": "Positive value alias for melvorD:flatAbyssalSlayerAreaEffectNegation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAbyssalSlayerAreaEffectNegation": {
          "description": "Negative value alias for melvorD:flatAbyssalSlayerAreaEffectNegation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatAbyssalSlayerAreaEffectNegation": {
          "description": "-${value}% flat Abyssal Slayer Area effect negation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatAbyssalSlayerAreaEffectNegation": {
          "description": "-${value}% flat Abyssal Slayer Area effect negation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:cantMiss": {
          "description": "Cannot miss with attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cantMiss": {
          "description": "Cannot miss with attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRawReflectDamage": {
          "description": "Positive value alias for melvorD:rawReflectDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rawReflectDamage": {
          "description": "+${value}% raw Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rawReflectDamage": {
          "description": "+${value}% raw Reflect Damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedEvasionBasedOnCorruptionLevel": {
          "description": "Negative value alias for melvorD:evasionBasedOnCorruptionLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:evasionBasedOnCorruptionLevel": {
          "description": "-${value}% Global Evasion per Corruption Abyssal Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "evasionBasedOnCorruptionLevel": {
          "description": "-${value}% Global Evasion per Corruption Abyssal Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:ablazeDOTDamageTakenIfCorrupted": {
          "description": "+${value}% Damage taken from Ablaze if Corrupted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "ablazeDOTDamageTakenIfCorrupted": {
          "description": "+${value}% Damage taken from Ablaze if Corrupted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDOTDamage": {
          "description": "Positive value alias for melvorD:dotDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDOTDamage": {
          "description": "Negative value alias for melvorD:dotDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:dotDamageTaken": {
          "description": "-${value}% Damage taken from all damage over time effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "dotDamageTaken": {
          "description": "-${value}% Damage taken from all damage over time effects",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBonusCorruptionChance": {
          "description": "Positive value alias for melvorD:bonusCorruptionChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bonusCorruptionChance": {
          "description": "+${value}% chance to gain a second Corruption effect when becoming Corrupted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bonusCorruptionChance": {
          "description": "+${value}% chance to gain a second Corruption effect when becoming Corrupted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:extraCorruptions": {
          "description": "+${value} Corruption effects applied when becoming Corrupted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "extraCorruptions": {
          "description": "+${value} Corruption effects applied when becoming Corrupted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedCorruptionCounterRate": {
          "description": "Positive value alias for melvorD:corruptionCounterRate",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCorruptionCounterRate": {
          "description": "Negative value alias for melvorD:corruptionCounterRate",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:corruptionCounterRate": {
          "description": "-${value}% Corruption progress gained when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "corruptionCounterRate": {
          "description": "-${value}% Corruption progress gained when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalCritMultiplier": {
          "description": "Positive value alias for melvorD:critMultiplier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:critMultiplier": {
          "description": "+${value}% Global critical hit multiplier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "critMultiplier": {
          "description": "+${value}% Global critical hit multiplier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageBasedOnMaxHitpointsSelf": {
          "description": "Positive value alias for melvorD:damageBasedOnMaxHitpointsSelf",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageBasedOnMaxHitpointsSelf": {
          "description": "+${value}% of Attacker's Max Hitpoints dealt as damage when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageBasedOnMaxHitpointsSelf": {
          "description": "+${value}% of Attacker's Max Hitpoints dealt as damage when hitting with an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedToxinDOTDamage": {
          "description": "Positive value alias for melvorD:toxinDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedToxinDOTDamage": {
          "description": "Negative value alias for melvorD:toxinDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:toxinDOTDamageTaken": {
          "description": "${value}% Damage taken from Toxin",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "toxinDOTDamageTaken": {
          "description": "${value}% Damage taken from Toxin",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAblazeDOTDamage": {
          "description": "Positive value alias for melvorD:ablazeDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAblazeDOTDamage": {
          "description": "Negative value alias for melvorD:ablazeDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:ablazeDOTDamageTaken": {
          "description": "${value}% Damage taken from Ablaze",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "ablazeDOTDamageTaken": {
          "description": "${value}% Damage taken from Ablaze",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAblazeLifesteal": {
          "description": "Positive value alias for melvorD:ablazeLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:ablazeLifesteal": {
          "description": "+${value}% Ablaze lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "ablazeLifesteal": {
          "description": "+${value}% Ablaze lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedToxinLifesteal": {
          "description": "Positive value alias for melvorD:toxinLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:toxinLifesteal": {
          "description": "+${value}% Toxin lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "toxinLifesteal": {
          "description": "+${value}% Toxin lifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinHitBasedOnMaxHitMelee": {
          "description": "Positive value alias for melvorD:meleeMinHitBasedOnMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeMinHitBasedOnMaxHit": {
          "description": "${value}% of Melee Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeMinHitBasedOnMaxHit": {
          "description": "${value}% of Melee Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinHitBasedOnMaxHitRanged": {
          "description": "Positive value alias for melvorD:rangedMinHitBasedOnMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedMinHitBasedOnMaxHit": {
          "description": "${value}% of Ranged Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedMinHitBasedOnMaxHit": {
          "description": "${value}% of Ranged Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinHitBasedOnMaxHitMagic": {
          "description": "Positive value alias for melvorD:magicMinHitBasedOnMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicMinHitBasedOnMaxHit": {
          "description": "+${value}% of Magic Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "magicMinHitBasedOnMaxHit": {
          "description": "+${value}% of Magic Maximum Hit added to Minimum Hit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue64"
                  }
                ]
              }
            }
          ]
        },
        "decreasedLacerationDOTDamage": {
          "description": "Negative value alias for melvorD:lacerationDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:lacerationDOTDamageTaken": {
          "description": "${value}% Damage taken from Laceration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "lacerationDOTDamageTaken": {
          "description": "${value}% Damage taken from Laceration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedVoidburstDOTDamage": {
          "description": "Negative value alias for melvorD:voidburstDOTDamageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:voidburstDOTDamageTaken": {
          "description": "${value}% Damage taken from Voidburst",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "voidburstDOTDamageTaken": {
          "description": "${value}% Damage taken from Voidburst",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:instantCorruptionChance": {
          "description": "${value}% chance for Corruption progress to instantly fill at the start of a fight",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "instantCorruptionChance": {
          "description": "${value}% chance for Corruption progress to instantly fill at the start of a fight",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedExtraLacerationStackChance": {
          "description": "Positive value alias for melvorD:extraLacerationStackChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:extraLacerationStackChance": {
          "description": "${value}% chance to apply an additional stack of Laceration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "extraLacerationStackChance": {
          "description": "${value}% chance to apply an additional stack of Laceration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageReduction": {
          "description": "Positive value alias for melvorD:flatResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistance": {
          "description": "Positive value alias for melvorD:flatResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistance": {
          "description": "Negative value alias for melvorD:flatResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReduction": {
          "description": "Negative value alias for melvorD:flatResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatResistance": {
          "description": "-${value}% ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistance": {
          "description": "-${value}% ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionAgainstMelee": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstMelee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceAgainstMelee": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstMelee",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistanceAgainstMelee": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstMelee",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReductionAgainstMelee": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstMelee",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatResistanceAgainstMelee": {
          "description": "-${value}% ${resistanceName} when fighting against Melee",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceAgainstMelee": {
          "description": "-${value}% ${resistanceName} when fighting against Melee",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionAgainstRanged": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstRanged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceAgainstRanged": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstRanged",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistanceAgainstRanged": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstRanged",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReductionAgainstRanged": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstRanged",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatResistanceAgainstRanged": {
          "description": "-${value}% ${resistanceName} when fighting against Ranged",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceAgainstRanged": {
          "description": "-${value}% ${resistanceName} when fighting against Ranged",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionAgainstMagic": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstMagic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceAgainstMagic": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstMagic",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistanceAgainstMagic": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstMagic",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReductionAgainstMagic": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstMagic",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatResistanceAgainstMagic": {
          "description": "-${value}% ${resistanceName} when fighting against Magic",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceAgainstMagic": {
          "description": "-${value}% ${resistanceName} when fighting against Magic",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionPercent": {
          "description": "Positive value alias for melvorD:resistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistancePercent": {
          "description": "Positive value alias for melvorD:resistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistancePercent": {
          "description": "Negative value alias for melvorD:resistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReductionPercent": {
          "description": "Negative value alias for melvorD:resistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:resistance": {
          "description": "${value}% decreased ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "resistance": {
          "description": "${value}% decreased ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "halveDamageReduction": {
          "description": "Negative value alias for melvorD:halveResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:halveResistance": {
          "description": "${resistanceName} is halved",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "halveResistance": {
          "description": "${resistanceName} is halved",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMaxHitPercentBasedOnDamageReduction": {
          "description": "Positive value alias for melvorD:maxHitBasedOnResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxHitPercentBasedOnResistance": {
          "description": "Positive value alias for melvorD:maxHitBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedMaxHitPercentBasedOnResistance": {
          "description": "Negative value alias for melvorD:maxHitBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedMaxHitPercentBasedOnDamageReduction": {
          "description": "Negative value alias for melvorD:maxHitBasedOnResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHitBasedOnResistance": {
          "description": "-${value}% Maximum Hit for each 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "maxHitBasedOnResistance": {
          "description": "-${value}% Maximum Hit for each 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMaxHitPercentBasedOnEnemyDamageReduction": {
          "description": "Positive value alias for melvorD:maxHitBasedOnTargetResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxHitPercentBasedOnTargetResistance": {
          "description": "Positive value alias for melvorD:maxHitBasedOnTargetResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedMaxHitPercentBasedOnTargetResistance": {
          "description": "Negative value alias for melvorD:maxHitBasedOnTargetResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedMaxHitPercentBasedOnEnemyDamageReduction": {
          "description": "Negative value alias for melvorD:maxHitBasedOnTargetResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHitBasedOnTargetResistance": {
          "description": "-${value}% Maximum Hit for each 1% of base target ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "maxHitBasedOnTargetResistance": {
          "description": "-${value}% Maximum Hit for each 1% of base target ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "decreasedEvasionBasedOnDR": {
          "description": "Negative value alias for melvorD:evasionBasedOnResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedEvasionBasedOnResistance": {
          "description": "Negative value alias for melvorD:evasionBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:evasionBasedOnResistance": {
          "description": "-${value}% Global Evasion for every 2% base ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "evasionBasedOnResistance": {
          "description": "-${value}% Global Evasion for every 2% base ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedChanceToIgnoreResistanceWhenAttacking": {
          "description": "Positive value alias for melvorD:ignoreResistanceWhenAttackingChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:ignoreResistanceWhenAttackingChance": {
          "description": "+${value}% chance to ignore ${resistanceName} when attacking",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "ignoreResistanceWhenAttackingChance": {
          "description": "+${value}% chance to ignore ${resistanceName} when attacking",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMaxHitPercentAgainstDamageType": {
          "description": "Positive value alias for melvorD:maxHitAgainstDamageType",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:maxHitAgainstDamageType": {
          "description": "+${value}% Maximum Hit when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "maxHitAgainstDamageType": {
          "description": "+${value}% Maximum Hit when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedGlobalAccuracyAgainstDamageType": {
          "description": "Positive value alias for melvorD:accuracyRatingAgainstDamageType",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:accuracyRatingAgainstDamageType": {
          "description": "+${value}% Accuracy Rating when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "accuracyRatingAgainstDamageType": {
          "description": "+${value}% Accuracy Rating when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedGlobalEvasionAgainstDamageType": {
          "description": "Positive value alias for melvorD:evasionAgainstDamageType",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:evasionAgainstDamageType": {
          "description": "${value}% Evasion Rating when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "evasionAgainstDamageType": {
          "description": "${value}% Evasion Rating when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMaxHitpointsAgainstDamageType": {
          "description": "Positive value alias for melvorD:maxHitpointsAgainstDamageType",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:maxHitpointsAgainstDamageType": {
          "description": "${value}% Maximum Hitpoints when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "maxHitpointsAgainstDamageType": {
          "description": "${value}% Maximum Hitpoints when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedSlayerAreaEffectNegationFlat": {
          "description": "Positive value alias for melvorD:flatSlayerAreaEffectNegation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSlayerAreaEffectNegationFlat": {
          "description": "Negative value alias for melvorD:flatSlayerAreaEffectNegation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSlayerAreaEffectNegation": {
          "description": "-${value}% Flat Slayer Area Effect Negation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSlayerAreaEffectNegation": {
          "description": "-${value}% Flat Slayer Area Effect Negation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxAirSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxWaterSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxEarthSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxFireSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedBoltSpellMaxHitFlat": {
          "description": "Positive value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxAirSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxWaterSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxEarthSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMaxFireSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinAirSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinWaterSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinEarthSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinFireSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinElementalSpellDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMinAirSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMinWaterSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMinEarthSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMinFireSpellDmg": {
          "description": "Negative value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSurgeSpellAccuracy": {
          "description": "Positive value alias for melvorD:magicAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSurgeSpellMaxHit": {
          "description": "Positive value alias for melvorD:magicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "nulled": {
          "description": "Positive value alias for melvorD:effectImmunity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "debuffImmunity": {
          "description": "Positive value alias for melvorD:effectImmunity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "curseImmunity": {
          "description": "Positive value alias for melvorD:effectImmunity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "burnImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "stunImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "freezeImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceToDodgeCrystallization": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceToAvoidSleep": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "slowImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "frostBurnImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "bleedImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "poisonImmunity": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceToAvoidCurses": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceToDodgeCrystalSanction": {
          "description": "Positive value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToAvoidSleep": {
          "description": "Negative value alias for melvorD:effectIgnoreChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageTakenWhenStunned": {
          "description": "Positive value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageTakenWhenAsleep": {
          "description": "Positive value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageTakenWhenSlowed": {
          "description": "Positive value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageTakenIfCursed": {
          "description": "Positive value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageTakenWhenStunned": {
          "description": "Negative value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageTakenWhenAsleep": {
          "description": "Negative value alias for melvorD:damageTaken",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinNatureSpellDamageBasedOnMaxHit": {
          "description": "Positive value alias for melvorD:magicMinHitBasedOnMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinPoisonArchaicDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinInfernalArchaicDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinLightningArchaicDmg": {
          "description": "Positive value alias for melvorD:flatMagicMinHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedPoisonSpellAccuracy": {
          "description": "Positive value alias for melvorD:magicAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedInfernalSpellAccuracy": {
          "description": "Positive value alias for melvorD:magicAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedLightningSpellAccuracy": {
          "description": "Positive value alias for melvorD:magicAccuracyRating",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        }
      }
    },
    "EnemyModifierValuesRecordData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEnemyModifierValuesRecordData"
        }
      ],
      "unevaluatedProperties": false
    },
    "ModifierValuesRecordData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseEnemyModifierValuesRecordData"
        }
      ],
      "properties": {
        "increasedChanceDoubleSlayerTaskKill": {
          "description": "Positive value alias for melvorD:doubleSlayerTaskKillChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceDoubleSlayerTaskKill": {
          "description": "Negative value alias for melvorD:doubleSlayerTaskKillChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:doubleSlayerTaskKillChance": {
          "description": "-${value}% chance for a Slayer Task kill to count as 2 kills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleSlayerTaskKillChance": {
          "description": "-${value}% chance for a Slayer Task kill to count as 2 kills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:convertBoneDropsIntoCake": {
          "description": "Converts all Bone drops from Combat into Birthday Cake Slice drops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "convertBoneDropsIntoCake": {
          "description": "Converts all Bone drops from Combat into Birthday Cake Slice drops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToDoubleLootCombat": {
          "description": "Positive value alias for melvorD:combatLootDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToDoubleLootCombat": {
          "description": "Negative value alias for melvorD:combatLootDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:combatLootDoublingChance": {
          "description": "-${value}% Chance To Double Loot in Combat",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "combatLootDoublingChance": {
          "description": "-${value}% Chance To Double Loot in Combat",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageToBosses": {
          "description": "Positive value alias for melvorD:damageDealtToBosses",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageToBosses": {
          "description": "Negative value alias for melvorD:damageDealtToBosses",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageDealtToBosses": {
          "description": "-${value}% Damage To Bosses",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageDealtToBosses": {
          "description": "-${value}% Damage To Bosses",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDamageToSlayerTasks": {
          "description": "Positive value alias for melvorD:damageDealtToSlayerTasks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageToSlayerTasks": {
          "description": "Negative value alias for melvorD:damageDealtToSlayerTasks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageDealtToSlayerTasks": {
          "description": "-${value}% Damage To Slayer Tasks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageDealtToSlayerTasks": {
          "description": "-${value}% Damage To Slayer Tasks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:damageDealtToMonstersInArea": {
          "description": "${value}% Damage to ${categoryName} Monsters",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue16"
          }
        },
        "damageDealtToMonstersInArea": {
          "description": "${value}% Damage to ${categoryName} Monsters",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue16"
          }
        },
        "increasedDamageToAllMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToAllMonsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageToAllMonsters": {
          "description": "Negative value alias for melvorD:damageDealtToAllMonsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:damageDealtToAllMonsters": {
          "description": "-${value}% Damage To All Monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "damageDealtToAllMonsters": {
          "description": "-${value}% Damage To All Monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAutoEatEfficiency": {
          "description": "Positive value alias for melvorD:autoEatEfficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAutoEatEfficiency": {
          "description": "Negative value alias for melvorD:autoEatEfficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:autoEatEfficiency": {
          "description": "-${value}% Auto Eat Efficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoEatEfficiency": {
          "description": "-${value}% Auto Eat Efficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAutoEatThreshold": {
          "description": "Positive value alias for melvorD:autoEatThreshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAutoEatThreshold": {
          "description": "Negative value alias for melvorD:autoEatThreshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:autoEatThreshold": {
          "description": "-${value}% Auto Eat Threshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoEatThreshold": {
          "description": "-${value}% Auto Eat Threshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAutoEatHPLimit": {
          "description": "Positive value alias for melvorD:autoEatHPLimit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAutoEatHPLimit": {
          "description": "Negative value alias for melvorD:autoEatHPLimit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:autoEatHPLimit": {
          "description": "-${value}% Auto Eat HP Limit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoEatHPLimit": {
          "description": "-${value}% Auto Eat HP Limit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFoodHealingValue": {
          "description": "Positive value alias for melvorD:foodHealingValue",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFoodHealingValue": {
          "description": "Negative value alias for melvorD:foodHealingValue",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFoodHealingValueBasedOnDamageType": {
          "description": "Positive value alias for melvorD:foodHealingValue",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:foodHealingValue": {
          "description": "-${value}% Food Healing Value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue2"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "foodHealingValue": {
          "description": "-${value}% Food Healing Value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue2"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToPreservePrayerPoints": {
          "description": "Positive value alias for melvorD:prayerPointPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToPreservePrayerPoints": {
          "description": "Negative value alias for melvorD:prayerPointPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:prayerPointPreservationChance": {
          "description": "-${value}% Chance To Preserve Prayer Points",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "prayerPointPreservationChance": {
          "description": "-${value}% Chance To Preserve Prayer Points",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedFlatPrayerCostReduction": {
          "description": "Positive value alias for melvorD:flatPrayerPointCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFlatPrayerCostReduction": {
          "description": "Negative value alias for melvorD:flatPrayerPointCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatPrayerPointCost": {
          "description": "-${value} Prayer Point Cost for Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatPrayerPointCost": {
          "description": "-${value} Prayer Point Cost for Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAmmoPreservation": {
          "description": "Positive value alias for melvorD:ammoPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAmmoPreservation": {
          "description": "Negative value alias for melvorD:ammoPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:ammoPreservationChance": {
          "description": "-${value}% Ammo Preservation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "ammoPreservationChance": {
          "description": "-${value}% Ammo Preservation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRunePreservation": {
          "description": "Positive value alias for melvorD:runePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRunePreservation": {
          "description": "Negative value alias for melvorD:runePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:runePreservationChance": {
          "description": "-${value}% Rune Preservation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "runePreservationChance": {
          "description": "-${value}% Rune Preservation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMonsterRespawnTimer": {
          "description": "Positive value alias for melvorD:flatMonsterRespawnInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMonsterRespawnTimer": {
          "description": "Negative value alias for melvorD:flatMonsterRespawnInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMonsterRespawnInterval": {
          "description": "-${value}s Monster Respawn Timer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMonsterRespawnInterval": {
          "description": "-${value}s Monster Respawn Timer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBankSpace": {
          "description": "Positive value alias for melvorD:bankSpace",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedBankSpaceShop": {
          "description": "Positive value alias for melvorD:bankSpace",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBankSpace": {
          "description": "Negative value alias for melvorD:bankSpace",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBankSpaceShop": {
          "description": "Negative value alias for melvorD:bankSpace",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bankSpace": {
          "description": "-${value} Bank Space",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bankSpace": {
          "description": "-${value} Bank Space",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToPreservePotionCharge": {
          "description": "Positive value alias for melvorD:potionChargePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToPreservePotionCharge": {
          "description": "Negative value alias for melvorD:potionChargePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:potionChargePreservationChance": {
          "description": "-${value}% Chance To Preserve Potion Charge",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "potionChargePreservationChance": {
          "description": "-${value}% Chance To Preserve Potion Charge",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalMasteryXP": {
          "description": "Positive value alias for melvorD:masteryXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalMasteryXP": {
          "description": "Negative value alias for melvorD:masteryXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMasteryXP": {
          "description": "Positive value alias for melvorD:masteryXP",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedMasteryXP": {
          "description": "Negative value alias for melvorD:masteryXP",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:masteryXP": {
          "description": "-${value}% Global Mastery XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  }
                ]
              }
            }
          ]
        },
        "masteryXP": {
          "description": "-${value}% Global Mastery XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  }
                ]
              }
            }
          ]
        },
        "increasedGlobalSkillXP": {
          "description": "Positive value alias for melvorD:skillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalSkillXP": {
          "description": "Negative value alias for melvorD:skillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSkillXP": {
          "description": "Positive value alias for melvorD:skillXP",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedSkillXP": {
          "description": "Negative value alias for melvorD:skillXP",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillXP": {
          "description": "-${value}% Global Skill XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  }
                ]
              }
            }
          ]
        },
        "skillXP": {
          "description": "-${value}% Global Skill XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  }
                ]
              }
            }
          ]
        },
        "increasedMiningNodeHP": {
          "description": "Positive value alias for melvorD:flatMiningNodeHP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMiningNodeHP": {
          "description": "Negative value alias for melvorD:flatMiningNodeHP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMiningNodeHP": {
          "description": "-${value} Mining Node HP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "flatMiningNodeHP": {
          "description": "-${value} Mining Node HP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:dungeonEquipmentSwapping": {
          "description": "${value} Dungeon Equipment Swapping",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "dungeonEquipmentSwapping": {
          "description": "${value} Dungeon Equipment Swapping",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:strongholdEquipmentSwapping": {
          "description": "${value} Stronghold Equipment Swapping",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "strongholdEquipmentSwapping": {
          "description": "${value} Stronghold Equipment Swapping",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedEquipmentSets": {
          "description": "Positive value alias for melvorD:equipmentSets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:equipmentSets": {
          "description": "+${value} Equipment Sets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "equipmentSets": {
          "description": "+${value} Equipment Sets",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:autoSlayerUnlocked": {
          "description": "${value} Auto Slayer Unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoSlayerUnlocked": {
          "description": "${value} Auto Slayer Unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTreeCutLimit": {
          "description": "Positive value alias for melvorD:treeCutLimit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:treeCutLimit": {
          "description": "+${value} Tree Cut Limit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "treeCutLimit": {
          "description": "+${value} Tree Cut Limit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalPreservationChance": {
          "description": "Positive value alias for melvorD:skillPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalPreservationChance": {
          "description": "Negative value alias for melvorD:skillPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSkillPreservationChance": {
          "description": "Positive value alias for melvorD:skillPreservationChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedSkillPreservationChance": {
          "description": "Negative value alias for melvorD:skillPreservationChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillPreservationChance": {
          "description": "-${value}% Chance to Preserve Resources in Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "skillPreservationChance": {
          "description": "-${value}% Chance to Preserve Resources in Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedSlayerTaskLength": {
          "description": "Positive value alias for melvorD:slayerTaskLength",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSlayerTaskLength": {
          "description": "Negative value alias for melvorD:slayerTaskLength",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:slayerTaskLength": {
          "description": "-${value}% Slayer Task Length/Qty",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "slayerTaskLength": {
          "description": "-${value}% Slayer Task Length/Qty",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToDoubleItemsGlobal": {
          "description": "Positive value alias for melvorD:globalItemDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToDoubleItemsGlobal": {
          "description": "Negative value alias for melvorD:globalItemDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:globalItemDoublingChance": {
          "description": "-${value}% Chance to Double Items Globally",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "globalItemDoublingChance": {
          "description": "-${value}% Chance to Double Items Globally",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidWaveSkipCostReduction": {
          "description": "Positive value alias for melvorD:golbinRaidWaveSkipCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidWaveSkipCost": {
          "description": "-${value}% Golbin Raid Wave Skip Cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidWaveSkipCost": {
          "description": "-${value}% Golbin Raid Wave Skip Cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedMaximumAmmo": {
          "description": "Positive value alias for melvorD:golbinRaidMaximumAmmo",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidMaximumAmmo": {
          "description": "+${value}% Maximum Ammo in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidMaximumAmmo": {
          "description": "+${value}% Maximum Ammo in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedMaximumRunes": {
          "description": "Positive value alias for melvorD:golbinRaidMaximumRunes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidMaximumRunes": {
          "description": "+${value}% Maximum Runes in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidMaximumRunes": {
          "description": "+${value}% Maximum Runes in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedMinimumFood": {
          "description": "Positive value alias for melvorD:golbinRaidMinimumFood",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidMinimumFood": {
          "description": "+${value} Minimum Food in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidMinimumFood": {
          "description": "+${value} Minimum Food in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedPrayerLevel": {
          "description": "Positive value alias for melvorD:golbinRaidPrayerLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidPrayerLevel": {
          "description": "+${value} Prayer Levels in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidPrayerLevel": {
          "description": "+${value} Prayer Levels in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedPrayerPointsStart": {
          "description": "Positive value alias for melvorD:golbinRaidStartingPrayerPoints",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidStartingPrayerPoints": {
          "description": "+${value} Starting Prayer Points in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidStartingPrayerPoints": {
          "description": "+${value} Starting Prayer Points in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedPrayerPointsWave": {
          "description": "Positive value alias for melvorD:golbinRaidPrayerPointsPerWave",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidPrayerPointsPerWave": {
          "description": "+${value} Prayer Points per Wave in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidPrayerPointsPerWave": {
          "description": "+${value} Prayer Points per Wave in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidIncreasedStartingRuneCount": {
          "description": "Positive value alias for melvorD:golbinRaidStartingRuneCount",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:golbinRaidStartingRuneCount": {
          "description": "+${value}% Starting Runes in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidStartingRuneCount": {
          "description": "+${value}% Starting Runes in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:golbinRaidPassiveSlotUnlocked": {
          "description": "Unlocked Passive Slot in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidPassiveSlotUnlocked": {
          "description": "Unlocked Passive Slot in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:golbinRaidPrayerUnlocked": {
          "description": "Unlocked Prayer in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidPrayerUnlocked": {
          "description": "Unlocked Prayer in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:golbinRaidStartingWeapon": {
          "description": "Start with Adamant Scimitar in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "golbinRaidStartingWeapon": {
          "description": "Start with Adamant Scimitar in Golbin Raid",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPotionChargesFlat": {
          "description": "Positive value alias for melvorD:flatPotionCharges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedPotionChargesFlat": {
          "description": "Negative value alias for melvorD:flatPotionCharges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatPotionCharges": {
          "description": "-${value} Charges per Potion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "flatPotionCharges": {
          "description": "-${value} Charges per Potion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:potionCharges": {
          "description": "${value}% charges per Potion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "potionCharges": {
          "description": "${value}% charges per Potion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceNoDamageMining": {
          "description": "Positive value alias for melvorD:noMiningNodeDamageChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceNoDamageMining": {
          "description": "Negative value alias for melvorD:noMiningNodeDamageChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:noMiningNodeDamageChance": {
          "description": "-${value}% chance to deal no damage to a Mining Node",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "noMiningNodeDamageChance": {
          "description": "-${value}% chance to deal no damage to a Mining Node",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceForElementalRune": {
          "description": "Positive value alias for melvorD:elementalRuneChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForElementalRune": {
          "description": "Negative value alias for melvorD:elementalRuneChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:elementalRuneChance": {
          "description": "-${value}% Chance to receive random Elemental Runes from Runecrafting when creating Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "elementalRuneChance": {
          "description": "-${value}% Chance to receive random Elemental Runes from Runecrafting when creating Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedElementalRuneGain": {
          "description": "Positive value alias for melvorD:elementalRuneQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedElementalRuneGain": {
          "description": "Negative value alias for melvorD:elementalRuneQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:elementalRuneQuantity": {
          "description": "-${value} Elemental Runes received from Runecrafting when creating Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "elementalRuneQuantity": {
          "description": "-${value} Elemental Runes received from Runecrafting when creating Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceRandomPotionHerblore": {
          "description": "Positive value alias for melvorD:randomHerblorePotionChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceRandomPotionHerblore": {
          "description": "Negative value alias for melvorD:randomHerblorePotionChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:randomHerblorePotionChance": {
          "description": "-${value}% Chance to receive a Random Tier of the same Potion in Herblore",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "randomHerblorePotionChance": {
          "description": "-${value}% Chance to receive a Random Tier of the same Potion in Herblore",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:freeBonfires": {
          "description": "Bonfires in Firemaking require no logs to light. Automatically relights Bonfires when depleted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "freeBonfires": {
          "description": "Bonfires in Firemaking require no logs to light. Automatically relights Bonfires when depleted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAltMagicSkillXP": {
          "description": "Positive value alias for melvorD:altMagicSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAltMagicSkillXP": {
          "description": "Negative value alias for melvorD:altMagicSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:altMagicSkillXP": {
          "description": "-${value}% Alt. Magic Skill XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "altMagicSkillXP": {
          "description": "-${value}% Alt. Magic Skill XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToConvertSeedDrops": {
          "description": "Positive value alias for melvorD:seedDropConversionChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:seedDropConversionChance": {
          "description": "+${value}% chance to convert combat seed drops to herbs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "seedDropConversionChance": {
          "description": "+${value}% chance to convert combat seed drops to herbs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMagicDefenceBonus": {
          "description": "Positive value alias for melvorD:flatMagicDefenceBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMagicDefenceBonus": {
          "description": "+${value} Magic Defence Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMagicDefenceBonus": {
          "description": "+${value} Magic Defence Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHPRegenWhenEnemyHasMoreEvasion": {
          "description": "Positive value alias for melvorD:hpRegenWhenEnemyHasMoreEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:hpRegenWhenEnemyHasMoreEvasion": {
          "description": "+${value}% hitpoint regeneration when the enemy has more combined evasion ratings than the player",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "hpRegenWhenEnemyHasMoreEvasion": {
          "description": "+${value}% hitpoint regeneration when the enemy has more combined evasion ratings than the player",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSummoningAttackLifesteal": {
          "description": "Positive value alias for melvorD:summoningAttackLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:summoningAttackLifesteal": {
          "description": "+${value}% Lifesteal for Summoning attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningAttackLifesteal": {
          "description": "+${value}% Lifesteal for Summoning attacks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBonusFishingSpecialChance": {
          "description": "Positive value alias for melvorD:bonusFishingSpecialChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bonusFishingSpecialChance": {
          "description": "+${value}% Special Item chance in Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "bonusFishingSpecialChance": {
          "description": "+${value}% Special Item chance in Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:summoningSynergy_Ent_Leprechaun": {
          "description": "+${value} Bird Nest when thieving the lumberjack, but gain no GP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_Ent_Leprechaun": {
          "description": "+${value} Bird Nest when thieving the lumberjack, but gain no GP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedWoodcuttingJewelryChance": {
          "description": "Positive value alias for melvorD:woodcuttingJewelryChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:woodcuttingJewelryChance": {
          "description": "+${value}% chance for Silver or Gold Jewelry to drop instead of a Bird's Nest from Woodcutting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "woodcuttingJewelryChance": {
          "description": "+${value}% chance for Silver or Gold Jewelry to drop instead of a Bird's Nest from Woodcutting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:summoningSynergy_4_5": {
          "description": "When receiving a Gem from Mining or Fishing, there is a +15% chance to get another random Gem",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_4_5": {
          "description": "When receiving a Gem from Mining or Fishing, there is a +15% chance to get another random Gem",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedCookingSuccessCap": {
          "description": "Negative value alias for melvorD:cookingSuccessCap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cookingSuccessCap": {
          "description": "-${value}% Cooking success chance cap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cookingSuccessCap": {
          "description": "-${value}% Cooking success chance cap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMiningBarChance": {
          "description": "Positive value alias for melvorD:miningBarChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:miningBarChance": {
          "description": "+${value}% chance to receive the bar version of an ore when Mining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "miningBarChance": {
          "description": "+${value}% chance to receive the bar version of an ore when Mining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedFishingCookedChance": {
          "description": "Positive value alias for melvorD:fishingCookedChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:fishingCookedChance": {
          "description": "+${value}% chance to gain 1 cooked version of a fish when Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "fishingCookedChance": {
          "description": "+${value}% chance to gain 1 cooked version of a fish when Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:summoningSynergy_Octopus_Leprechaun": {
          "description": "+50% Thieving Interval and +2 base item quantity when thieving the Fisherman",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_Octopus_Leprechaun": {
          "description": "+50% Thieving Interval and +2 base item quantity when thieving the Fisherman",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicMinHitBasedOnMaxHitSlayerTask": {
          "description": "Positive value alias for melvorD:magicMinHitBasedOnMaxHitSlayerTask",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicMinHitBasedOnMaxHitSlayerTask": {
          "description": "+${value}% of Magic Maximum Hit added to Minimum Hit when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicMinHitBasedOnMaxHitSlayerTask": {
          "description": "+${value}% of Magic Maximum Hit added to Minimum Hit when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeMaxHitBasedOnMaxHitSlayerTask": {
          "description": "Positive value alias for melvorD:meleeMinHitBasedOnMaxHitSlayerTask",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeMinHitBasedOnMaxHitSlayerTask": {
          "description": "+${value}% of Melee Maximum Hit added to Minimum Hit when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeMinHitBasedOnMaxHitSlayerTask": {
          "description": "+${value}% of Melee Maximum Hit added to Minimum Hit when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatHPRegenBasedOnMeleeMaxHit": {
          "description": "Positive value alias for melvorD:flatHPRegenBasedOnMeleeMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatHPRegenBasedOnMeleeMaxHit": {
          "description": "+${value}% of Melee max hit as flat hitpoint regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatHPRegenBasedOnMeleeMaxHit": {
          "description": "+${value}% of Melee max hit as flat hitpoint regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedMaxHitBasedOnMaxHitSlayerTask": {
          "description": "Positive value alias for melvorD:rangedMinHitBasedOnMaxHitSlayerTask",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedMinHitBasedOnMaxHitSlayerTask": {
          "description": "+${value}% of Ranged Maximum Hit added to Minimum Hit when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedMinHitBasedOnMaxHitSlayerTask": {
          "description": "+${value}% of Ranged Maximum Hit added to Minimum Hit when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatHPRegenBasedOnRangedMaxHit": {
          "description": "Positive value alias for melvorD:flatHPRegenBasedOnRangedMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatHPRegenBasedOnRangedMaxHit": {
          "description": "+${value}% of Ranged max hit as flat hitpoints regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatHPRegenBasedOnRangedMaxHit": {
          "description": "+${value}% of Ranged max hit as flat hitpoints regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSlayerCoinsPerMagicDamageSlayerTask": {
          "description": "Positive value alias for melvorD:currencyGainPerMagicDamageDealtOnSlayerTask",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:slayerCoinsPerMagicDamageSlayerTask": {
          "description": "+${value}% of Magic Damage Dealt against Slayer Task monsters gained as Slayer Coins",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "slayerCoinsPerMagicDamageSlayerTask": {
          "description": "+${value}% of Magic Damage Dealt against Slayer Task monsters gained as Slayer Coins",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatHPRegenBasedOnMagicMaxHit": {
          "description": "Positive value alias for melvorD:flatHPRegenBasedOnMagicMaxHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatHPRegenBasedOnMagicMaxHit": {
          "description": "+${value}% of Magic max hit as flat hitpoints regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatHPRegenBasedOnMagicMaxHit": {
          "description": "+${value}% of Magic max hit as flat hitpoints regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedFlatCraftingDragonhideCost": {
          "description": "Negative value alias for melvorD:flatCraftingDragonhideCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatCraftingDragonhideCost": {
          "description": "-${value} Dragonhide costs when Crafting (Cannot be reduced below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatCraftingDragonhideCost": {
          "description": "-${value} Dragonhide costs when Crafting (Cannot be reduced below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:giveRandomComboRunesRunecrafting": {
          "description": "Gain a chance to receive random combination runes when recieving random elemental runes equal to the chance to receive random elemental runes from Runecrafting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "giveRandomComboRunesRunecrafting": {
          "description": "Gain a chance to receive random combination runes when recieving random elemental runes equal to the chance to receive random elemental runes from Runecrafting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedThievingAutoSellPrice": {
          "description": "Positive value alias for melvorD:thievingAutoSellPrice",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingAutoSellPrice": {
          "description": "Automatically sell Common Drops from Thieving that sell for ${currencyName} for ${value}x their base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "thievingAutoSellPrice": {
          "description": "Automatically sell Common Drops from Thieving that sell for ${currencyName} for ${value}x their base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedRandomBarChanceThievingMiner": {
          "description": "Positive value alias for melvorD:thievingMinerRandomBarChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingMinerRandomBarChance": {
          "description": "+${value}% chance to receive a random bar when gaining a Common Drop from Thieving the Miner",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "thievingMinerRandomBarChance": {
          "description": "+${value}% chance to receive a random bar when gaining a Common Drop from Thieving the Miner",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHerbSackChanceThievingFarmer": {
          "description": "Positive value alias for melvorD:thievingFarmerHerbSackChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingFarmerHerbSackChance": {
          "description": "+${value}% chance to receive a Herb Sack when gaining a Common Drop from Thieving the Farmer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "thievingFarmerHerbSackChance": {
          "description": "+${value}% chance to receive a Herb Sack when gaining a Common Drop from Thieving the Farmer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:summoningSynergy_Leprechaun_Devil": {
          "description": "+50% chance to gain 100% GP, +35% chance to gain 4x items and +15% chance to gain no items or gp from Thieving",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_Leprechaun_Devil": {
          "description": "+50% chance to gain 100% GP, +35% chance to gain 4x items and +15% chance to gain no items or gp from Thieving",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHitpointRegenerationAgainstSlayerTasks": {
          "description": "Positive value alias for melvorD:hitpointRegenerationAgainstSlayerTasks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:hitpointRegenerationAgainstSlayerTasks": {
          "description": "+${value}% Hitpoint Regeneration when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "hitpointRegenerationAgainstSlayerTasks": {
          "description": "+${value}% Hitpoint Regeneration when fighting Slayer Task monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedFlatSmithingCoalCost": {
          "description": "Negative value alias for melvorD:flatSmithingCoalCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSmithingCoalCost": {
          "description": "-${value} Coal Ore Cost when Smithing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSmithingCoalCost": {
          "description": "-${value} Coal Ore Cost when Smithing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:removeSmithingCoalCosts": {
          "description": "Remove Coal costs for all Smithing recipes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "removeSmithingCoalCosts": {
          "description": "Remove Coal costs for all Smithing recipes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedMeleeStrengthBonus": {
          "description": "Positive value alias for melvorD:meleeStrengthBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMeleeStrengthBonus": {
          "description": "Negative value alias for melvorD:meleeStrengthBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeStrengthBonus": {
          "description": "-${value}% Melee Strength Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeStrengthBonus": {
          "description": "-${value}% Melee Strength Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedStrengthBonus": {
          "description": "Positive value alias for melvorD:rangedStrengthBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedRangedStrengthBonus": {
          "description": "Negative value alias for melvorD:rangedStrengthBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedStrengthBonus": {
          "description": "-${value}% Ranged Strength Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedStrengthBonus": {
          "description": "-${value}% Ranged Strength Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicDamageBonus": {
          "description": "Positive value alias for melvorD:magicDamageBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMagicDamageBonus": {
          "description": "Negative value alias for melvorD:magicDamageBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicDamageBonus": {
          "description": "-${value}% Magic Damage Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicDamageBonus": {
          "description": "-${value}% Magic Damage Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAgilityObstacleCost": {
          "description": "Positive value alias for melvorD:agilityObstacleCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAgilityObstacleCost": {
          "description": "Negative value alias for melvorD:agilityObstacleCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:agilityObstacleCost": {
          "description": "-${value}% Agility Obstacle Build Costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "agilityObstacleCost": {
          "description": "-${value}% Agility Obstacle Build Costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:freeCompost": {
          "description": "Composting crops in Farming is free",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "freeCompost": {
          "description": "Composting crops in Farming is free",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedCompostPreservationChance": {
          "description": "Positive value alias for melvorD:compostPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:compostPreservationChance": {
          "description": "${value}% chance to preserve Compost applied to Farming Plots when harvesting all crops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "compostPreservationChance": {
          "description": "${value}% chance to preserve Compost applied to Farming Plots when harvesting all crops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:bypassCompostPreservationChance": {
          "description": "${value}% chance to preserve Compost applied to Farming Plots when harvesting all crops (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "bypassCompostPreservationChance": {
          "description": "${value}% chance to preserve Compost applied to Farming Plots when harvesting all crops (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedOffItemChance": {
          "description": "Positive value alias for melvorD:offItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:offItemChance": {
          "description": "${value}% increased chance to receive Global Rare Items, Mastery Tokens, Bird Nests from Woodcutting, Gems from Mining, and Coal from Firemaking",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "offItemChance": {
          "description": "${value}% increased chance to receive Global Rare Items, Mastery Tokens, Bird Nests from Woodcutting, Gems from Mining, and Coal from Firemaking",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMiningGemChance": {
          "description": "Positive value alias for melvorD:miningGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:miningGemChance": {
          "description": "+${value}% Chance to receive gems from Mining (Does not work for Rune Essence)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "miningGemChance": {
          "description": "+${value}% Chance to receive gems from Mining (Does not work for Rune Essence)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBonusCoalMining": {
          "description": "Positive value alias for melvorD:bonusCoalMining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bonusCoalMining": {
          "description": "+${value} Coal Ore per Ore Mined. (Item doubling does not apply)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bonusCoalMining": {
          "description": "+${value} Coal Ore per Ore Mined. (Item doubling does not apply)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedSmithingCoalCost": {
          "description": "Negative value alias for melvorD:smithingCoalCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:smithingCoalCost": {
          "description": "-${value}% Coal Costs for Smithing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "smithingCoalCost": {
          "description": "-${value}% Coal Costs for Smithing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:allowSignetDrops": {
          "description": "if equipped, something special might drop while training Skills.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "allowSignetDrops": {
          "description": "if equipped, something special might drop while training Skills.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:bonusCoalOnDungeonCompletion": {
          "description": "1% chance to receive ${value} Coal when completing a dungeon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bonusCoalOnDungeonCompletion": {
          "description": "1% chance to receive ${value} Coal when completing a dungeon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMasteryPoolProgress": {
          "description": "Positive value alias for melvorD:masteryPoolProgress",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:masteryPoolProgress": {
          "description": "+${value}% to effective Mastery Pool progress",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "masteryPoolProgress": {
          "description": "+${value}% to effective Mastery Pool progress",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRuneProvision": {
          "description": "Positive value alias for melvorD:doubleRuneProvision",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:doubleRuneProvision": {
          "description": "Rune providing items provide ${value}x as many runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleRuneProvision": {
          "description": "Rune providing items provide ${value}x as many runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:bypassSlayerItems": {
          "description": "Bypass Slayer Area item requirements for areas that require less than level 100 Slayer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bypassSlayerItems": {
          "description": "Bypass Slayer Area item requirements for areas that require less than level 100 Slayer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:itemProtection": {
          "description": "Items are not lost on death",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "itemProtection": {
          "description": "Items are not lost on death",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRedemptionThreshold": {
          "description": "Positive value alias for melvorD:redemptionThreshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:redemptionThreshold": {
          "description": "+${value}% redemption threshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "redemptionThreshold": {
          "description": "+${value}% redemption threshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRedemptionPercent": {
          "description": "Positive value alias for melvorD:redemptionHealing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:redemptionHealing": {
          "description": "+${value}% of max hitpoints healed on redemption",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "redemptionHealing": {
          "description": "+${value}% of max hitpoints healed on redemption",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:autoLooting": {
          "description": "Combat loot is automatically collected",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoLooting": {
          "description": "Combat loot is automatically collected",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:autoBurying": {
          "description": "Bones are automatically buried for ${value}% of their Prayer Point value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoBurying": {
          "description": "Bones are automatically buried for ${value}% of their Prayer Point value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:freeProtectItem": {
          "description": "The Protect Item Prayer costs nothing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "freeProtectItem": {
          "description": "The Protect Item Prayer costs nothing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSummoningShardCost": {
          "description": "Positive value alias for melvorD:flatSummoningShardCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSummoningShardCost": {
          "description": "Negative value alias for melvorD:flatSummoningShardCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSummoningShardCost": {
          "description": "-${value} Shard Cost when creating Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "flatSummoningShardCost": {
          "description": "-${value} Shard Cost when creating Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "increasedSummoningChargePreservation": {
          "description": "Positive value alias for melvorD:summoningChargePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSummoningChargePreservation": {
          "description": "Negative value alias for melvorD:summoningChargePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:summoningChargePreservationChance": {
          "description": "-${value}% Chance to preserve Summoning Charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningChargePreservationChance": {
          "description": "-${value}% Chance to preserve Summoning Charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:summoningChargePreservationChanceBypass": {
          "description": "${value}% Chance to preserve Summoning Charges (Bypasses Gamemode Limitations)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningChargePreservationChanceBypass": {
          "description": "${value}% Chance to preserve Summoning Charges (Bypasses Gamemode Limitations)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPrayerCost": {
          "description": "Positive value alias for melvorD:prayerPointCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedPrayerCost": {
          "description": "Negative value alias for melvorD:prayerPointCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:prayerPointCost": {
          "description": "-${value}% Prayer Point Cost for Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "prayerPointCost": {
          "description": "-${value}% Prayer Point Cost for Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:allowAttackAugmentingMagic": {
          "description": "Magic Curses and Auroras can be used without a Magic weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "allowAttackAugmentingMagic": {
          "description": "Magic Curses and Auroras can be used without a Magic weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:autoEquipFoodUnlocked": {
          "description": "${value} Auto Equip Food Unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoEquipFoodUnlocked": {
          "description": "${value} Auto Equip Food Unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:autoSwapFoodUnlocked": {
          "description": "${value} Auto Swap Food Unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "autoSwapFoodUnlocked": {
          "description": "${value} Auto Swap Food Unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceSuccessfulCook": {
          "description": "Positive value alias for melvorD:successfulCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceSuccessfulCook": {
          "description": "Negative value alias for melvorD:successfulCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:successfulCookChance": {
          "description": "-${value}% chance to successfully Cook an item",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "successfulCookChance": {
          "description": "-${value}% chance to successfully Cook an item",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "increasedChancePerfectCookGlobal": {
          "description": "Positive value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChancePerfectCookGlobal": {
          "description": "Negative value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:perfectCookChance": {
          "description": "-${value}% Global Perfect Cook chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "perfectCookChance": {
          "description": "-${value}% Global Perfect Cook chance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "increasedThievingStealth": {
          "description": "Positive value alias for melvorD:thievingStealth",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedThievingStealth": {
          "description": "Negative value alias for melvorD:thievingStealth",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingStealth": {
          "description": "-${value} Stealth while Thieving",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "thievingStealth": {
          "description": "-${value} Stealth while Thieving",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedAltMagicRunePreservation": {
          "description": "Positive value alias for melvorD:altMagicRunePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAltMagicRunePreservation": {
          "description": "Negative value alias for melvorD:altMagicRunePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:altMagicRunePreservationChance": {
          "description": "-${value}% Rune Preservation for Alt. Magic Spells",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "altMagicRunePreservationChance": {
          "description": "-${value}% Rune Preservation for Alt. Magic Spells",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFishingSpecialChance": {
          "description": "Positive value alias for melvorD:fishingSpecialChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFishingSpecialChance": {
          "description": "Negative value alias for melvorD:fishingSpecialChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:fishingSpecialChance": {
          "description": "-${value}% chance to receive Special Items from Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "fishingSpecialChance": {
          "description": "-${value}% chance to receive Special Items from Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:farmingSeedCost": {
          "description": "${value}% seed cost to plant crops in Farming (Cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "farmingSeedCost": {
          "description": "${value}% seed cost to plant crops in Farming (Cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:flatFarmingSeedCost": {
          "description": "${value} seed cost to plant crops in Farming (Cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "flatFarmingSeedCost": {
          "description": "${value} seed cost to plant crops in Farming (Cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToPreserveFood": {
          "description": "Positive value alias for melvorD:foodPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:foodPreservationChance": {
          "description": "+${value}% Chance to Preserve Food when eaten",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "foodPreservationChance": {
          "description": "+${value}% Chance to Preserve Food when eaten",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:allowLootContainerStacking": {
          "description": "No description",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "allowLootContainerStacking": {
          "description": "No description",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedWoodcuttingXPAddedAsFiremakingXP": {
          "description": "Positive value alias for melvorD:woodcuttingXPAddedAsFiremakingXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedWoodcuttingXPAddedAsFiremakingXP": {
          "description": "Negative value alias for melvorD:woodcuttingXPAddedAsFiremakingXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:woodcuttingXPAddedAsFiremakingXP": {
          "description": "-${value}% Woodcutting XP added as Firemaking XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "woodcuttingXPAddedAsFiremakingXP": {
          "description": "-${value}% Woodcutting XP added as Firemaking XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "coalGainedOnCookingFailure": {
          "description": "Positive value alias for melvorD:flatCoalGainedOnCookingFailure",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatCoalGainedOnCookingFailure": {
          "description": "+${value} Coal Ore when failing to Cook Food",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatCoalGainedOnCookingFailure": {
          "description": "+${value} Coal Ore when failing to Cook Food",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:flatAbyssalGemsGainedOnCookingFailure": {
          "description": "${value} quantity of a random Abyssal Gem gained when failing to Cook Food",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatAbyssalGemsGainedOnCookingFailure": {
          "description": "${value} quantity of a random Abyssal Gem gained when failing to Cook Food",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halvedWoodcuttingDoubleChance": {
          "description": "Positive value alias for melvorD:halveWoodcuttingDoubleChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:halveWoodcuttingDoubleChance": {
          "description": "Chance to double Logs while Woodcutting is halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halveWoodcuttingDoubleChance": {
          "description": "Chance to double Logs while Woodcutting is halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceForQualitySuperiorGem": {
          "description": "Positive value alias for melvorD:qualitySuperiorGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForQualitySuperiorGem": {
          "description": "Negative value alias for melvorD:qualitySuperiorGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:qualitySuperiorGemChance": {
          "description": "-${value}% chance to receive a Quality Superior Gem while Mining Gem Veins or Meteorite Ore",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "qualitySuperiorGemChance": {
          "description": "-${value}% chance to receive a Quality Superior Gem while Mining Gem Veins or Meteorite Ore",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleBoneDrops": {
          "description": "All Bone drops from Combat are doubled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleBoneDrops": {
          "description": "All Bone drops from Combat are doubled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:summoningSynergy_Devil_Eagle": {
          "description": "While Thieving - 50% chance for +10% base Skill XP, 40% chance for 2.5x GP, and 10% chance to gain no Items or GP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_Devil_Eagle": {
          "description": "While Thieving - 50% chance for +10% base Skill XP, 40% chance for 2.5x GP, and 10% chance to gain no Items or GP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedXPFromNegativeObstacles": {
          "description": "Positive value alias for melvorD:xpFromNegativeObstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedXPFromNegativeObstacles": {
          "description": "Negative value alias for melvorD:xpFromNegativeObstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:xpFromNegativeObstacles": {
          "description": "-${value}% Agility Skill XP from Obstacles that contain a negative modifier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "xpFromNegativeObstacles": {
          "description": "-${value}% Agility Skill XP from Obstacles that contain a negative modifier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMasteryXPFromNegativeObstacles": {
          "description": "Positive value alias for melvorD:masteryXPFromNegativeObstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMasteryXPFromNegativeObstacles": {
          "description": "Negative value alias for melvorD:masteryXPFromNegativeObstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:masteryXPFromNegativeObstacles": {
          "description": "-${value}% Agility Mastery XP from Obstacles that contain a negative modifier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "masteryXPFromNegativeObstacles": {
          "description": "-${value}% Agility Mastery XP from Obstacles that contain a negative modifier",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedThievingStunIntervalPercent": {
          "description": "Positive value alias for melvorD:thievingStunInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedThievingStunIntervalPercent": {
          "description": "Negative value alias for melvorD:thievingStunInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingStunInterval": {
          "description": "-${value}% Thieving Stun Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "thievingStunInterval": {
          "description": "-${value}% Thieving Stun Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedGlobalSkillIntervalPercent": {
          "description": "Positive value alias for melvorD:skillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalSkillIntervalPercent": {
          "description": "Negative value alias for melvorD:skillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSkillIntervalPercent": {
          "description": "Positive value alias for melvorD:skillInterval",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedSkillIntervalPercent": {
          "description": "Negative value alias for melvorD:skillInterval",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillInterval": {
          "description": "-${value}% Interval for all Non-Combat Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "skillInterval": {
          "description": "-${value}% Interval for all Non-Combat Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceForArrowShaftsWoodcutting": {
          "description": "Positive value alias for melvorD:woodcuttingArrowShaftChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForArrowShaftsWoodcutting": {
          "description": "Negative value alias for melvorD:woodcuttingArrowShaftChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:woodcuttingArrowShaftChance": {
          "description": "-${value}% chance to gain Arrow Shafts when cutting Trees (Cannot be Doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "woodcuttingArrowShaftChance": {
          "description": "-${value}% chance to gain Arrow Shafts when cutting Trees (Cannot be Doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPassiveCookInterval": {
          "description": "Positive value alias for melvorD:passiveCookingInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedPassiveCookInterval": {
          "description": "Negative value alias for melvorD:passiveCookingInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:passiveCookingInterval": {
          "description": "-${value}% Passive Cook Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "passiveCookingInterval": {
          "description": "-${value}% Passive Cook Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:disableGoldenStardustDrops": {
          "description": "No longer receive Golden Stardust from Astrology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableGoldenStardustDrops": {
          "description": "No longer receive Golden Stardust from Astrology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGPFromItemAlchemy": {
          "description": "Positive value alias for melvorD:gpFromItemAlchemy",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:gpFromItemAlchemy": {
          "description": "+${value}% Item Alchemy Item sale price conversion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "gpFromItemAlchemy": {
          "description": "+${value}% Item Alchemy Item sale price conversion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedThievingAreaUniqueChance": {
          "description": "Positive value alias for melvorD:thievingAreaUniqueChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedThievingAreaUniqueChance": {
          "description": "Negative value alias for melvorD:thievingAreaUniqueChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingAreaUniqueChance": {
          "description": "-${value}% chance to receive Thieving Area Unique Item",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "thievingAreaUniqueChance": {
          "description": "-${value}% chance to receive Thieving Area Unique Item",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToFindMeteorite": {
          "description": "Positive value alias for melvorD:meteoriteLocationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meteoriteLocationChance": {
          "description": "+${value}% chance to locate a Meteorite in Astrology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meteoriteLocationChance": {
          "description": "+${value}% chance to locate a Meteorite in Astrology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToAvoidThievingStuns": {
          "description": "Positive value alias for melvorD:thievingStunAvoidanceChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingStunAvoidanceChance": {
          "description": "${value}% chance to avoid the stun interval and damage in Thieving when failing a pickpocket attempt for {realmName} only",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue4"
          }
        },
        "thievingStunAvoidanceChance": {
          "description": "${value}% chance to avoid the stun interval and damage in Thieving when failing a pickpocket attempt for {realmName} only",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue4"
          }
        },
        "increasedChanceAdditionalPerfectItem": {
          "description": "Positive value alias for melvorD:additionalPerfectItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:additionalPerfectItemChance": {
          "description": "+${value} chance to receive an additional Perfect Item from Cooking (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "additionalPerfectItemChance": {
          "description": "+${value} chance to receive an additional Perfect Item from Cooking (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:additionalItemBasedOnPrimaryQuantityChance": {
          "description": "${value}% chance to gain ${itemName} from ${actionName} in ${skillName} (Quantity equal to primary skill resource quantity)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue161"
          }
        },
        "additionalItemBasedOnPrimaryQuantityChance": {
          "description": "${value}% chance to gain ${itemName} from ${actionName} in ${skillName} (Quantity equal to primary skill resource quantity)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue161"
          }
        },
        "increasedTownshipPopulationCap": {
          "description": "Positive value alias for melvorD:flatTownshipPopulation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipPopulationCap": {
          "description": "Negative value alias for melvorD:flatTownshipPopulation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTownshipPopulation": {
          "description": "-${value} Township Population Cap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTownshipPopulation": {
          "description": "-${value} Township Population Cap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipHappiness": {
          "description": "Positive value alias for melvorD:flatTownshipHappiness",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipHappiness": {
          "description": "Negative value alias for melvorD:flatTownshipHappiness",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTownshipHappiness": {
          "description": "-${value}% Township Happiness",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTownshipHappiness": {
          "description": "-${value}% Township Happiness",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipEducation": {
          "description": "Positive value alias for melvorD:flatTownshipEducation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipEducation": {
          "description": "Negative value alias for melvorD:flatTownshipEducation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTownshipEducation": {
          "description": "-${value}% Township Education",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTownshipEducation": {
          "description": "-${value}% Township Education",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipHealth": {
          "description": "Positive value alias for melvorD:townshipHealth",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipHealth": {
          "description": "Negative value alias for melvorD:townshipHealth",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipHealth": {
          "description": "-${value}% Township Health",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipHealth": {
          "description": "-${value}% Township Health",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipGPProduction": {
          "description": "Positive value alias for melvorD:townshipGPProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipGPProduction": {
          "description": "Negative value alias for melvorD:townshipGPProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipGPProduction": {
          "description": "-${value}% Township GP Production",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipGPProduction": {
          "description": "-${value}% Township GP Production",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipMaxStorage": {
          "description": "Positive value alias for melvorD:townshipMaxStorage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipMaxStorage": {
          "description": "Negative value alias for melvorD:townshipMaxStorage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipMaxStorage": {
          "description": "-${value}% Township Max Storage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipMaxStorage": {
          "description": "-${value}% Township Max Storage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipBuildingCost": {
          "description": "Positive value alias for melvorD:townshipBuildingCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipBuildingCost": {
          "description": "Negative value alias for melvorD:townshipBuildingCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipBuildingCost": {
          "description": "-${value}% Township Building Cost (Capped at -80%)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipBuildingCost": {
          "description": "-${value}% Township Building Cost (Capped at -80%)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:townshipBuildingProduction": {
          "description": "${value}% Township building production in ${categoryName} Biome",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue16"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue64"
              }
            ]
          }
        },
        "townshipBuildingProduction": {
          "description": "${value}% Township building production in ${categoryName} Biome",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue16"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue64"
              }
            ]
          }
        },
        "increasedTownshipTaxPerCitizen": {
          "description": "Positive value alias for melvorD:townshipTaxPerCitizen",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipTaxPerCitizen": {
          "description": "Negative value alias for melvorD:townshipTaxPerCitizen",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipTaxPerCitizen": {
          "description": "-${value}% Township Citizen Tax Rate",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipTaxPerCitizen": {
          "description": "-${value}% Township Citizen Tax Rate",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:townshipDisableHunting": {
          "description": "Hunting is forbidden in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipDisableHunting": {
          "description": "Hunting is forbidden in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipResourceProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipResourceProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipResourceProduction": {
          "description": "-${value}% Township Resource Generation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "townshipResourceProduction": {
          "description": "-${value}% Township Resource Generation",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "increasedTownshipCoalUsage": {
          "description": "Positive value alias for melvorD:townshipCoalUsage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipCoalUsage": {
          "description": "Negative value alias for melvorD:townshipCoalUsage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipCoalUsage": {
          "description": "-${value}% Township Coal Usage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipCoalUsage": {
          "description": "-${value}% Township Coal Usage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipBuildingHappinessPenalties": {
          "description": "Positive value alias for melvorD:townshipBuildingHappinessPenalties",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipBuildingHappinessPenalties": {
          "description": "Negative value alias for melvorD:townshipBuildingHappinessPenalties",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipBuildingHappinessPenalties": {
          "description": "-${value}% Township Building Happiness Penalties",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipBuildingHappinessPenalties": {
          "description": "-${value}% Township Building Happiness Penalties",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipFoodUsage": {
          "description": "Positive value alias for melvorD:townshipFoodUsage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipFoodUsage": {
          "description": "Negative value alias for melvorD:townshipFoodUsage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipFoodUsage": {
          "description": "-${value}% Township Citizen Food Usage (Capped at -80%)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipFoodUsage": {
          "description": "-${value}% Township Citizen Food Usage (Capped at -80%)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToPreserveConsumable": {
          "description": "Positive value alias for melvorD:consumablePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:consumablePreservationChance": {
          "description": "+${value}% chance to preserve Consumable Slot charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "consumablePreservationChance": {
          "description": "+${value}% chance to preserve Consumable Slot charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGemVeinChance": {
          "description": "Positive value alias for melvorD:gemVeinChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGemVeinChance": {
          "description": "Negative value alias for melvorD:gemVeinChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:gemVeinChance": {
          "description": "-${value}% Chance to find gem veins when Mining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "gemVeinChance": {
          "description": "-${value}% Chance to find gem veins when Mining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:abyssalGemVeinChanceIncrease": {
          "description": "${value}% increased chance to locate an Abyssal Gem Vein in Mining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "abyssalGemVeinChanceIncrease": {
          "description": "${value}% increased chance to locate an Abyssal Gem Vein in Mining",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAgilityPillarCost": {
          "description": "Positive value alias for melvorD:agilityPillarCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAgilityPillarCost": {
          "description": "Negative value alias for melvorD:agilityPillarCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:agilityPillarCost": {
          "description": "-${value}% Agility Pillar build costs",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue4"
          }
        },
        "agilityPillarCost": {
          "description": "-${value}% Agility Pillar build costs",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue4"
          }
        },
        "melvorD:abyssalWaveAPGain": {
          "description": "Successful Abyssal Wave encounters in Township provide Abyssal Pieces equal to ${value}% of its size",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "abyssalWaveAPGain": {
          "description": "Successful Abyssal Wave encounters in Township provide Abyssal Pieces equal to ${value}% of its size",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:abyssalWaveASCGain": {
          "description": "Successful Abyssal Wave encounters in Township provide Abyssal Slayer Coins equal to ${value}% of its size",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "abyssalWaveASCGain": {
          "description": "Successful Abyssal Wave encounters in Township provide Abyssal Slayer Coins equal to ${value}% of its size",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedNonCombatSkillXP": {
          "description": "Positive value alias for melvorD:nonCombatSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedNonCombatSkillXP": {
          "description": "Negative value alias for melvorD:nonCombatSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:nonCombatSkillXP": {
          "description": "-${value}% Non-Combat Skill XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "nonCombatSkillXP": {
          "description": "-${value}% Non-Combat Skill XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMeleeDefenceBonus": {
          "description": "Positive value alias for melvorD:flatMeleeDefenceBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMeleeDefenceBonus": {
          "description": "+${value} Melee Defence Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMeleeDefenceBonus": {
          "description": "+${value} Melee Defence Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatRangedDefenceBonus": {
          "description": "Positive value alias for melvorD:flatRangedDefenceBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedDefenceBonus": {
          "description": "+${value} Ranged Defence Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedDefenceBonus": {
          "description": "+${value} Ranged Defence Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatStabAttackBonus": {
          "description": "Positive value alias for melvorD:flatStabAttackBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatStabAttackBonus": {
          "description": "+${value} Stab Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatStabAttackBonus": {
          "description": "+${value} Stab Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatSlashAttackBonus": {
          "description": "Positive value alias for melvorD:flatSlashAttackBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSlashAttackBonus": {
          "description": "+${value} Slash Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSlashAttackBonus": {
          "description": "+${value} Slash Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatBlockAttackBonus": {
          "description": "Positive value alias for melvorD:flatBlockAttackBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBlockAttackBonus": {
          "description": "+${value} Block Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatBlockAttackBonus": {
          "description": "+${value} Block Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatRangedAttackBonus": {
          "description": "Positive value alias for melvorD:flatRangedAttackBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedAttackBonus": {
          "description": "+${value} Ranged Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedAttackBonus": {
          "description": "+${value} Ranged Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMagicAttackBonus": {
          "description": "Positive value alias for melvorD:flatMagicAttackBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMagicAttackBonus": {
          "description": "+${value} Magic Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMagicAttackBonus": {
          "description": "+${value} Magic Attack Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatMeleeStrengthBonus": {
          "description": "Positive value alias for melvorD:flatMeleeStrengthBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMeleeStrengthBonus": {
          "description": "+${value} Melee Strength Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMeleeStrengthBonus": {
          "description": "+${value} Melee Strength Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatRangedStrengthBonus": {
          "description": "Positive value alias for melvorD:flatRangedStrengthBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedStrengthBonus": {
          "description": "+${value} Ranged Strength Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedStrengthBonus": {
          "description": "+${value} Ranged Strength Bonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disableSalamanderItemReduction": {
          "description": "Item Cost reduction is disabled when making Salamander Tablets in Summoning (Excludes Shard Cost)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableSalamanderItemReduction": {
          "description": "Item Cost reduction is disabled when making Salamander Tablets in Summoning (Excludes Shard Cost)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMasteryPoolCap": {
          "description": "Positive value alias for melvorD:masteryPoolCap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:masteryPoolCap": {
          "description": "+${value}% Mastery Pool XP Cap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "masteryPoolCap": {
          "description": "+${value}% Mastery Pool XP Cap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:bypassAllSlayerItems": {
          "description": "Bypass All Slayer Area item requirements",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bypassAllSlayerItems": {
          "description": "Bypass All Slayer Area item requirements",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:allowNonMagicCurses": {
          "description": "Magic Curses can be used without a Magic weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "allowNonMagicCurses": {
          "description": "Magic Curses can be used without a Magic weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipTraderStock": {
          "description": "Positive value alias for melvorD:townshipTraderStock",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipTraderStock": {
          "description": "+${value} Township Trader GP Limit per visit (Max 100M)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipTraderStock": {
          "description": "+${value} Township Trader GP Limit per visit (Max 100M)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSightRange": {
          "description": "Positive value alias for melvorD:cartographySightRange",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSightRange": {
          "description": "Negative value alias for melvorD:cartographySightRange",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographySightRange": {
          "description": "-${value} Cartography sight range",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographySightRange": {
          "description": "-${value} Cartography sight range",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSurveyRange": {
          "description": "Positive value alias for melvorD:cartographySurveyRange",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSurveyRange": {
          "description": "Negative value alias for melvorD:cartographySurveyRange",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographySurveyRange": {
          "description": "-${value} Cartography survey range",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographySurveyRange": {
          "description": "-${value} Cartography survey range",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHexTravelCost": {
          "description": "Positive value alias for melvorD:cartographyTravelCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedHexTravelCost": {
          "description": "Negative value alias for melvorD:cartographyTravelCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographyTravelCost": {
          "description": "-${value}% Cartography travel costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographyTravelCost": {
          "description": "-${value}% Cartography travel costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSurveyInterval": {
          "description": "Positive value alias for melvorD:cartographySurveyInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSurveyInterval": {
          "description": "Negative value alias for melvorD:cartographySurveyInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographySurveyInterval": {
          "description": "-${value}% Cartography survey interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographySurveyInterval": {
          "description": "-${value}% Cartography survey interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPaperMakingInterval": {
          "description": "Positive value alias for melvorD:cartographyPaperMakingInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedPaperMakingInterval": {
          "description": "Negative value alias for melvorD:cartographyPaperMakingInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographyPaperMakingInterval": {
          "description": "-${value}% Cartography paper making interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographyPaperMakingInterval": {
          "description": "-${value}% Cartography paper making interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMapUpgradeInterval": {
          "description": "Positive value alias for melvorD:cartographyMapUpgradeInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMapUpgradeInterval": {
          "description": "Negative value alias for melvorD:cartographyMapUpgradeInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographyMapUpgradeInterval": {
          "description": "-${value}% Cartography map upgrade interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographyMapUpgradeInterval": {
          "description": "-${value}% Cartography map upgrade interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSurveyXP": {
          "description": "Positive value alias for melvorD:cartographySurveyXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSurveyXP": {
          "description": "Negative value alias for melvorD:cartographySurveyXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:cartographySurveyXP": {
          "description": "-${value}% Cartography survey XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "cartographySurveyXP": {
          "description": "-${value}% Cartography survey XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMapUpgradeActions": {
          "description": "Positive value alias for melvorD:mapUpgradeActions",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMapUpgradeActions": {
          "description": "Negative value alias for melvorD:mapUpgradeActions",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:mapUpgradeActions": {
          "description": "-${value}% map excavation actions when upgrading in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "mapUpgradeActions": {
          "description": "-${value}% map excavation actions when upgrading in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedInitialMapArtefactValues": {
          "description": "Positive value alias for melvorD:initialMapArtefactValues",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedInitialMapArtefactValues": {
          "description": "Negative value alias for melvorD:initialMapArtefactValues",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:initialMapArtefactValues": {
          "description": "-${value}% initial artefact values when creating maps in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "initialMapArtefactValues": {
          "description": "-${value}% initial artefact values when creating maps in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSieveToolLevel": {
          "description": "Positive value alias for melvorD:sieveToolLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:sieveToolLevel": {
          "description": "+${value} level of the Sieve Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "sieveToolLevel": {
          "description": "+${value} level of the Sieve Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTrowelToolLevel": {
          "description": "Positive value alias for melvorD:trowelToolLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:trowelToolLevel": {
          "description": "+${value} level of the Trowel Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "trowelToolLevel": {
          "description": "+${value} level of the Trowel Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedBrushToolLevel": {
          "description": "Positive value alias for melvorD:brushToolLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:brushToolLevel": {
          "description": "+${value} level of the Brush Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "brushToolLevel": {
          "description": "+${value} level of the Brush Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedShovelToolLevel": {
          "description": "Positive value alias for melvorD:shovelToolLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:shovelToolLevel": {
          "description": "+${value} level of the Shovel Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "shovelToolLevel": {
          "description": "+${value} level of the Shovel Tool in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToLocateAncientRelic": {
          "description": "Positive value alias for melvorD:ancientRelicLocationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:ancientRelicLocationChance": {
          "description": "${value}% increased chance to locate Ancient Relics",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "ancientRelicLocationChance": {
          "description": "${value}% increased chance to locate Ancient Relics",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedHolyDustFromBlessedOffering": {
          "description": "Positive value alias for melvorD:flatAdditionalHolyDustFromBlessedOffering",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatAdditionalHolyDustFromBlessedOffering": {
          "description": "+${value} Holy Dust obtained from Blessed Offering Alt. Magic Spell (cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatAdditionalHolyDustFromBlessedOffering": {
          "description": "+${value} Holy Dust obtained from Blessed Offering Alt. Magic Spell (cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPrayerPointsFromBurying": {
          "description": "Positive value alias for melvorD:flatPrayerPointsFromBurying",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatPrayerPointsFromBurying": {
          "description": "+${value} Prayer Points gained when burying Items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatPrayerPointsFromBurying": {
          "description": "+${value} Prayer Points gained when burying Items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToCatchExtraSameAreaFish": {
          "description": "Positive value alias for melvorD:additionalSameAreaFishChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:additionalSameAreaFishChance": {
          "description": "+${value}% chance to catch +1 random Fish from the same Fishing Area (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "additionalSameAreaFishChance": {
          "description": "+${value}% chance to catch +1 random Fish from the same Fishing Area (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToLocateSkillPet": {
          "description": "Positive value alias for melvorD:skillPetLocationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:skillPetLocationChance": {
          "description": "${value}% increased chance to locate a Skill Pet",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "skillPetLocationChance": {
          "description": "${value}% increased chance to locate a Skill Pet",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedPrayerPointsFromBuryingPercent": {
          "description": "Positive value alias for melvorD:prayerPointsFromBurying",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:prayerPointsFromBurying": {
          "description": "+${value}% Prayer Points gained from burying Bones",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "prayerPointsFromBurying": {
          "description": "+${value}% Prayer Points gained from burying Bones",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "noDamageFromThievingNPCs": {
          "description": "Positive value alias for melvorD:ignoreThievingDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:ignoreThievingDamage": {
          "description": "NPCs in Thieving deal no damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "ignoreThievingDamage": {
          "description": "NPCs in Thieving deal no damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedXPFromMasteryTokens": {
          "description": "Positive value alias for melvorD:xpFromMasteryTokens",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:xpFromMasteryTokens": {
          "description": "All Mastery Tokens grant +${value}% of the maximum Mastery Pool XP for the respective Skill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "xpFromMasteryTokens": {
          "description": "All Mastery Tokens grant +${value}% of the maximum Mastery Pool XP for the respective Skill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceForEnchantedUrnInCrafting": {
          "description": "Positive value alias for melvorD:craftingEnchantedUrnChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:craftingEnchantedUrnChance": {
          "description": "+${value}% chance for Urns produced in Crafting to be Enchanted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "craftingEnchantedUrnChance": {
          "description": "+${value}% chance for Urns produced in Crafting to be Enchanted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halfSkillInterval": {
          "description": "Positive value alias for melvorD:halveSkillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:halveSkillInterval": {
          "description": "All Skill intervals are halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halveSkillInterval": {
          "description": "All Skill intervals are halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halfSkillXP": {
          "description": "Positive value alias for melvorD:halveSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:halveSkillXP": {
          "description": "All Skill XP is halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halveSkillXP": {
          "description": "All Skill XP is halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halfMasteryXP": {
          "description": "Positive value alias for melvorD:halveMasteryXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:halveMasteryXP": {
          "description": "All Mastery XP is halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "halveMasteryXP": {
          "description": "All Mastery XP is halved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMasteryTokens": {
          "description": "Positive value alias for melvorD:flatMasteryTokens",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMasteryTokens": {
          "description": "+${value} Mastery Tokens received",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMasteryTokens": {
          "description": "+${value} Mastery Tokens received",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipRepairCost": {
          "description": "Positive value alias for melvorD:townshipRepairCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipRepairCost": {
          "description": "Negative value alias for melvorD:townshipRepairCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipRepairCost": {
          "description": "-${value}% Township repair costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipRepairCost": {
          "description": "-${value}% Township repair costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedTownshipTraderCost": {
          "description": "Negative value alias for melvorD:townshipTraderCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipTraderCost": {
          "description": "-${value}% Township Trader costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipTraderCost": {
          "description": "-${value}% Township Trader costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:enableNightfallSeason": {
          "description": "There is a 20% chance of a Nightfall Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "enableNightfallSeason": {
          "description": "There is a 20% chance of a Nightfall Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:enableSolarEclipseSeason": {
          "description": "There is a 20% chance of a Solar Eclipse Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "enableSolarEclipseSeason": {
          "description": "There is a 20% chance of a Solar Eclipse Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:enableEternalDarknessSeason": {
          "description": "There is a 20% chance of an Eternal Darkness Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "enableEternalDarknessSeason": {
          "description": "There is a 20% chance of an Eternal Darkness Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:allowUnholyPrayerUse": {
          "description": "Allows Unholy Prayers to be used if equipped with one other item that allows for Unholy Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "allowUnholyPrayerUse": {
          "description": "Allows Unholy Prayers to be used if equipped with one other item that allows for Unholy Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToPreserveUnholyPrayerPoints": {
          "description": "Positive value alias for melvorD:unholyPrayerPointPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:unholyPrayerPointPreservationChance": {
          "description": "+${value}% chance to preserve Prayer Points for Unholy Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "unholyPrayerPointPreservationChance": {
          "description": "+${value}% chance to preserve Prayer Points for Unholy Prayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disableTownshipHealthDegradation": {
          "description": "Township Health no longer degrades",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableTownshipHealthDegradation": {
          "description": "Township Health no longer degrades",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinimumTownshipBuildingEfficiency": {
          "description": "Positive value alias for melvorD:minimumTownshipBuildingEfficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:minimumTownshipBuildingEfficiency": {
          "description": "+${value}% minimum Township building efficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "minimumTownshipBuildingEfficiency": {
          "description": "+${value}% minimum Township building efficiency",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:enableLemonSeason": {
          "description": "There is a 20% chance of a Lemon Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "enableLemonSeason": {
          "description": "There is a 20% chance of a Lemon Season occurring in Township",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalPreservationChanceBypass": {
          "description": "Positive value alias for melvorD:bypassGlobalPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:bypassGlobalPreservationChance": {
          "description": "+${value}% Chance to Preserve Resources in Skills (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "bypassGlobalPreservationChance": {
          "description": "+${value}% Chance to Preserve Resources in Skills (Bypass Gamemode Limitation)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:unlockAllSummoningSynergies": {
          "description": "All Summoning Synergies are unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "unlockAllSummoningSynergies": {
          "description": "All Summoning Synergies are unlocked",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:agilityItemCostReductionCanReach100": {
          "description": "Item cost reduction in Agility can now reach 100%",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "agilityItemCostReductionCanReach100": {
          "description": "Item cost reduction in Agility can now reach 100%",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedAgilityObstacleItemCost": {
          "description": "Negative value alias for melvorD:agilityObstacleItemCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:agilityObstacleItemCost": {
          "description": "-${value}% Agility Obstacle Item Costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "agilityObstacleItemCost": {
          "description": "-${value}% Agility Obstacle Item Costs",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:removeDebuffsFromAgility": {
          "description": "Remove all debuffs from Agility Obstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "removeDebuffsFromAgility": {
          "description": "Remove all debuffs from Agility Obstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:harvestingUniqueProductChance": {
          "description": "Chance to obtain unique products in Harvesting increased by ${value}%",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "harvestingUniqueProductChance": {
          "description": "Chance to obtain unique products in Harvesting increased by ${value}%",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleModifiersInAstrologyForMaxedConstellations": {
          "description": "All modifiers in a completed Astrology Constellation are doubled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "doubleModifiersInAstrologyForMaxedConstellations": {
          "description": "All modifiers in a completed Astrology Constellation are doubled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedMapRefinementCost": {
          "description": "Positive value alias for melvorD:mapRefinementCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMapRefinementCost": {
          "description": "Negative value alias for melvorD:mapRefinementCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:mapRefinementCost": {
          "description": "-${value} dig site map refinement cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "mapRefinementCost": {
          "description": "-${value} dig site map refinement cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTravelEventChance": {
          "description": "Positive value alias for melvorD:travelEventChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTravelEventChance": {
          "description": "Negative value alias for melvorD:travelEventChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:travelEventChance": {
          "description": "${value}% decreased travel event chance in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "travelEventChance": {
          "description": "${value}% decreased travel event chance in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTinyArtefactChance": {
          "description": "Positive value alias for melvorD:tinyArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTinyArtefactChance": {
          "description": "Negative value alias for melvorD:tinyArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:tinyArtefactChance": {
          "description": "-${value}% chance to find tiny artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "tinyArtefactChance": {
          "description": "-${value}% chance to find tiny artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSmallArtefactChance": {
          "description": "Positive value alias for melvorD:smallArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSmallArtefactChance": {
          "description": "Negative value alias for melvorD:smallArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:smallArtefactChance": {
          "description": "-${value}% chance to find small artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "smallArtefactChance": {
          "description": "-${value}% chance to find small artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMediumArtefactChance": {
          "description": "Positive value alias for melvorD:mediumArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedMediumArtefactChance": {
          "description": "Negative value alias for melvorD:mediumArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:mediumArtefactChance": {
          "description": "-${value}% chance to find medium artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "mediumArtefactChance": {
          "description": "-${value}% chance to find medium artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedLargeArtefactChance": {
          "description": "Positive value alias for melvorD:largeArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedLargeArtefactChance": {
          "description": "Negative value alias for melvorD:largeArtefactChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:largeArtefactChance": {
          "description": "-${value}% chance to find large artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "largeArtefactChance": {
          "description": "-${value}% chance to find large artefacts in Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedTinyArtefactValue": {
          "description": "Negative value alias for melvorD:tinyArtefactValue",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:tinyArtefactValue": {
          "description": "-${value} Tiny Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "tinyArtefactValue": {
          "description": "-${value} Tiny Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedSmallArtefactValue": {
          "description": "Negative value alias for melvorD:smallArtefactValue",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:smallArtefactValue": {
          "description": "-${value} Small Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "smallArtefactValue": {
          "description": "-${value} Small Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedMediumArtefactValue": {
          "description": "Negative value alias for melvorD:mediumArtefactValue",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:mediumArtefactValue": {
          "description": "-${value} Medium Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "mediumArtefactValue": {
          "description": "-${value} Medium Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedLargeArtefactValue": {
          "description": "Negative value alias for melvorD:largeArtefactValue",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:largeArtefactValue": {
          "description": "-${value} Large Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "largeArtefactValue": {
          "description": "-${value} Large Artefact value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:archaeologyVeryRareMapPreservation": {
          "description": "Finding a Very Rare or Legendary item in Archaeology will use no Map charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "archaeologyVeryRareMapPreservation": {
          "description": "Finding a Very Rare or Legendary item in Archaeology will use no Map charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedArchaeologyCommonItemSkillXP": {
          "description": "Positive value alias for melvorD:archaeologyCommonItemSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:archaeologyCommonItemSkillXP": {
          "description": "+${value}% Archaeology Skill XP when locating a Common Artefact",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "archaeologyCommonItemSkillXP": {
          "description": "+${value}% Archaeology Skill XP when locating a Common Artefact",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDigSiteMapCharges": {
          "description": "Positive value alias for melvorD:flatDigSiteMapCharges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatDigSiteMapCharges": {
          "description": "+${value} map excavation actions",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatDigSiteMapCharges": {
          "description": "+${value} map excavation actions",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disabledSpecialAttacks": {
          "description": "All player special attacks are disabled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disabledSpecialAttacks": {
          "description": "All player special attacks are disabled",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeStrengthBonusPer10EnemyDR": {
          "description": "Positive value alias for melvorD:meleeStrengthBonusPer10EnemyResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeStrengthBonusPer10EnemyDR": {
          "description": "+${value}% Melee Strength Bonus from equipment per 10% base enemy damage reduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeStrengthBonusPer10EnemyDR": {
          "description": "+${value}% Melee Strength Bonus from equipment per 10% base enemy damage reduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleConsumablesArchaeology": {
          "description": "x${value} Consumable Items received from Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleConsumablesArchaeology": {
          "description": "x${value} Consumable Items received from Archaeology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleActiveModifiersCartography": {
          "description": "Doubles the effects of all Active Modifiers from Point of Interests in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleActiveModifiersCartography": {
          "description": "Doubles the effects of all Active Modifiers from Point of Interests in Cartography",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToPreserveSoulPoints": {
          "description": "Positive value alias for melvorD:soulPointPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToPreserveSoulPoints": {
          "description": "Negative value alias for melvorD:soulPointPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:soulPointPreservationChance": {
          "description": "+${value}% chance to preserve Soul Points",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "soulPointPreservationChance": {
          "description": "+${value}% chance to preserve Soul Points",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:soulPointPreservationChanceBypass": {
          "description": "${value}% chance to preserve Soul Points (Bypasses Gamemode Limitations)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "soulPointPreservationChanceBypass": {
          "description": "${value}% chance to preserve Soul Points (Bypasses Gamemode Limitations)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedCostReductionGlobal": {
          "description": "Positive value alias for melvorD:skillCostReduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCostReductionGlobal": {
          "description": "Negative value alias for melvorD:skillCostReduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCostReductionSkill": {
          "description": "Positive value alias for melvorD:skillCostReduction",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedCostReductionSkill": {
          "description": "Negative value alias for melvorD:skillCostReduction",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillCostReduction": {
          "description": "+${value}% cost to produce Items in all Artisan Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  }
                ]
              }
            }
          ]
        },
        "skillCostReduction": {
          "description": "+${value}% cost to produce Items in all Artisan Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  }
                ]
              }
            }
          ]
        },
        "increasedHPRegenBasedOnMaxHP": {
          "description": "Positive value alias for melvorD:hPRegenBasedOnMaxHP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:hPRegenBasedOnMaxHP": {
          "description": "+${value}% Max Hitpoints added as Hitpoints regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "hPRegenBasedOnMaxHP": {
          "description": "+${value}% Max Hitpoints added as Hitpoints regeneration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalAbyssalSkillXP": {
          "description": "Positive value alias for melvorD:abyssalSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedGlobalAbyssalSkillXP": {
          "description": "Negative value alias for melvorD:abyssalSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedAbyssalSkillXP": {
          "description": "Positive value alias for melvorD:abyssalSkillXP",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedAbyssalSkillXP": {
          "description": "Negative value alias for melvorD:abyssalSkillXP",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:abyssalSkillXP": {
          "description": "-${value}% Global Abyssal XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  }
                ]
              }
            }
          ]
        },
        "abyssalSkillXP": {
          "description": "-${value}% Global Abyssal XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToRegainAbyssalTreeSeed": {
          "description": "Positive value alias for melvorD:regainAbyssalTreeSeedChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToRegainAbyssalTreeSeed": {
          "description": "Negative value alias for melvorD:regainAbyssalTreeSeedChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:regainAbyssalTreeSeedChance": {
          "description": "-${value}% chance to regain an Abyssal Tree Seed in Farming when harvested",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "regainAbyssalTreeSeedChance": {
          "description": "-${value}% chance to regain an Abyssal Tree Seed in Farming when harvested",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceForAbyssalGem": {
          "description": "Positive value alias for melvorD:abyssalGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForAbyssalGem": {
          "description": "Negative value alias for melvorD:abyssalGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:abyssalGemChance": {
          "description": "-${value}% chance to receive an Abyssal Gem while Mining Abyssal Rock and Outcrops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "abyssalGemChance": {
          "description": "-${value}% chance to receive an Abyssal Gem while Mining Abyssal Rock and Outcrops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceNoThievingDamage": {
          "description": "Positive value alias for melvorD:ignoreThievingDamageChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:ignoreThievingDamageChance": {
          "description": "+${value}% chance for NPCs in Thieving to deal no damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "ignoreThievingDamageChance": {
          "description": "+${value}% chance for NPCs in Thieving to deal no damage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedAdditionalPrimarySkillResourceGlobal": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAdditionalPrimarySkillResourceGlobal": {
          "description": "Negative value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedAdditionalPrimarySkillResource": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "increasedFlatFarmingYield": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedPotionsHerblore": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAdditionalPrimarySkillResource": {
          "description": "Negative value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedFlatFarmingYield": {
          "description": "Negative value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatAdditionalPrimaryProductQuantity": {
          "description": "-${value} additional quantity of primary resource gained globally (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue69"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  }
                ]
              }
            }
          ]
        },
        "flatAdditionalPrimaryProductQuantity": {
          "description": "-${value} additional quantity of primary resource gained globally (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue69"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  }
                ]
              }
            }
          ]
        },
        "increasedSoulPointsPerMonsterKill": {
          "description": "Positive value alias for melvorD:flatSoulPointsPerMonsterKill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSoulPointsPerMonsterKill": {
          "description": "+${value} Soul Points gained per Monster kill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSoulPointsPerMonsterKill": {
          "description": "+${value} Soul Points gained per Monster kill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedFlatSoulPointCostReduction": {
          "description": "Negative value alias for melvorD:flatSoulPointCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSoulPointCost": {
          "description": "${value} Soul Point Cost for Prayers (Soul Point cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSoulPointCost": {
          "description": "${value} Soul Point Cost for Prayers (Soul Point cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:soulPointCost": {
          "description": "${value}% Soul Point Cost for Prayers (Soul Point cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "soulPointCost": {
          "description": "${value}% Soul Point Cost for Prayers (Soul Point cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHarvestingIntensity": {
          "description": "Positive value alias for melvorD:flatHarvestingIntensity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatHarvestingIntensity": {
          "description": "+${value} intensity per action in Harvesting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatHarvestingIntensity": {
          "description": "+${value} intensity per action in Harvesting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleHarvestingIntensityChance": {
          "description": "${value}% chance to double intensity increase per action in Harvesting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleHarvestingIntensityChance": {
          "description": "${value}% chance to double intensity increase per action in Harvesting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedTownshipMaxSoulStorage": {
          "description": "Positive value alias for melvorD:townshipMaxSoulStorage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipMaxSoulStorage": {
          "description": "Negative value alias for melvorD:townshipMaxSoulStorage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:townshipMaxSoulStorage": {
          "description": "-${value}% Township maximum Soul Storage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "townshipMaxSoulStorage": {
          "description": "-${value}% Township maximum Soul Storage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedStarFallChance": {
          "description": "Positive value alias for melvorD:starFallChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:starFallChance": {
          "description": "+${value}% chance for stars to fall in Astrology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "starFallChance": {
          "description": "+${value}% chance for stars to fall in Astrology",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalSkillPreservationCap": {
          "description": "Positive value alias for melvorD:skillPreservationCap",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSkillPreservationCap": {
          "description": "Positive value alias for melvorD:skillPreservationCap",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedSkillPreservationCap": {
          "description": "Negative value alias for melvorD:skillPreservationCap",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillPreservationCap": {
          "description": "${value}% Resource Preservation cap in Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "skillPreservationCap": {
          "description": "${value}% Resource Preservation cap in Skills",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedDrakeNestsFromThievingTreant": {
          "description": "Positive value alias for melvorD:flatDrakeNestsFromThievingTreant",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatDrakeNestsFromThievingTreant": {
          "description": "+${value} base quantity when finding Shadow Drake Nests from the Blighted Treant in Thieving",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatDrakeNestsFromThievingTreant": {
          "description": "+${value} base quantity when finding Shadow Drake Nests from the Blighted Treant in Thieving",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedWoodcuttingDrakeNestJewelryChance": {
          "description": "Positive value alias for melvorD:woodcuttingDrakeNestJewelryChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:woodcuttingDrakeNestJewelryChance": {
          "description": "+${value}% chance for Silver or Gold Jewelry to drop instead of a Shadow Drake Nest in Woodcutting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "woodcuttingDrakeNestJewelryChance": {
          "description": "+${value}% chance for Silver or Gold Jewelry to drop instead of a Shadow Drake Nest in Woodcutting",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedWoodcuttingAXPAddedAsFiremakingAXP": {
          "description": "Positive value alias for melvorD:woodcuttingAXPAddedAsFiremakingAXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:woodcuttingAXPAddedAsFiremakingAXP": {
          "description": "+${value}% Abyssal Woodcutting XP added as Abyssal Firemaking XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "woodcuttingAXPAddedAsFiremakingAXP": {
          "description": "+${value}% Abyssal Woodcutting XP added as Abyssal Firemaking XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:additionalAbyssalGemChance": {
          "description": "${value}% chance to receive +1 Abyssal Gem while Mining Abyssal Rock and Outcrops (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "additionalAbyssalGemChance": {
          "description": "${value}% chance to receive +1 Abyssal Gem while Mining Abyssal Rock and Outcrops (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceForRandomBarThievingWitheringRuins": {
          "description": "Positive value alias for melvorD:randomBarThievingWitheringRuinsChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:randomBarThievingWitheringRuinsChance": {
          "description": "+${value}% chance to receive a random bar when gaining a Common Drop when Thieving in the Withering Ruins",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "randomBarThievingWitheringRuinsChance": {
          "description": "+${value}% chance to receive a random bar when gaining a Common Drop when Thieving in the Withering Ruins",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:summoningSynergy_Imp_Devil": {
          "description": "When Harvesting: 25% chance to Harvest nothing, 30% chance to gain 3x resources, 40% chance to gain 2x Harvesting Level as Abyssal Pieces",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_Imp_Devil": {
          "description": "When Harvesting: 25% chance to Harvest nothing, 30% chance to gain 3x resources, 40% chance to gain 2x Harvesting Level as Abyssal Pieces",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:summoningSynergy_Abyssal_Leprechaun_Devil": {
          "description": "When Thieving: 50% chance to gain 2x GP and Abyssal Pieces, 35% chance to gain 4x items, 15% chance to gain no GP, Abyssal Pieces or items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "summoningSynergy_Abyssal_Leprechaun_Devil": {
          "description": "When Thieving: 50% chance to gain 2x GP and Abyssal Pieces, 35% chance to gain 4x items, 15% chance to gain no GP, Abyssal Pieces or items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSoulPointsWhenHit": {
          "description": "Positive value alias for melvorD:flatSoulPointsWhenHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSoulPointsWhenHit": {
          "description": "+${value} Soul Points gained when hit by an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSoulPointsWhenHit": {
          "description": "+${value} Soul Points gained when hit by an attack",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMaxHitWith2AbyssalPrayers": {
          "description": "Positive value alias for melvorD:maxHitWith2AbyssalPrayers",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:maxHitWith2AbyssalPrayers": {
          "description": "+${value}% Maximum Hit when two Abyssal Prayers are active",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "maxHitWith2AbyssalPrayers": {
          "description": "+${value}% Maximum Hit when two Abyssal Prayers are active",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMinimumHarvestingIntensity": {
          "description": "Positive value alias for melvorD:minimumHarvestingIntensity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:minimumHarvestingIntensity": {
          "description": "+${value}% minimum Harvesting Intensity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "minimumHarvestingIntensity": {
          "description": "+${value}% minimum Harvesting Intensity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:disableHarvestingVeinDegen": {
          "description": "Harvesting Vein no longer reduces intensity over time",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "disableHarvestingVeinDegen": {
          "description": "Harvesting Vein no longer reduces intensity over time",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedAbyssalPrayerCost": {
          "description": "Negative value alias for melvorD:abyssalPrayerCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:abyssalPrayerCost": {
          "description": "-${value}% Soul Point Cost for Abyssal Prayers (Soul Point cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "abyssalPrayerCost": {
          "description": "-${value}% Soul Point Cost for Abyssal Prayers (Soul Point cost cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedCombatAXPAgainstCorruptedMonsters": {
          "description": "Positive value alias for melvorD:flatCombatAXPAgainstCorruptedMonsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatCombatAXPAgainstCorruptedMonsters": {
          "description": "+${value} Abyssal Combat XP when fighting Corrupted Monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatCombatAXPAgainstCorruptedMonsters": {
          "description": "+${value} Abyssal Combat XP when fighting Corrupted Monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:farmingCropsCannotDie": {
          "description": "Crops in Farming cannot die",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "farmingCropsCannotDie": {
          "description": "Crops in Farming cannot die",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:cannotFishJunk": {
          "description": "Receive no junk items from Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "cannotFishJunk": {
          "description": "Receive no junk items from Fishing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:fishingAdditionalSpecialItemChance": {
          "description": "${value}% chance to receive one random special item from Fishing when catching a special item",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "fishingAdditionalSpecialItemChance": {
          "description": "${value}% chance to receive one random special item from Fishing when catching a special item",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "decreasedMiningNodeRespawnInterval": {
          "description": "Negative value alias for melvorD:miningNodeRespawnInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:miningNodeRespawnInterval": {
          "description": "${value}% Mining node respawn interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "miningNodeRespawnInterval": {
          "description": "${value}% Mining node respawn interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedRunecraftingBaseXPForRunes": {
          "description": "Positive value alias for melvorD:runecraftingBaseXPForRunes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:runecraftingBaseXPForRunes": {
          "description": "${value}% base Runecrafting Skill XP when making Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "runecraftingBaseXPForRunes": {
          "description": "${value}% base Runecrafting Skill XP when making Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:runecraftingBaseAXPForRunes": {
          "description": "${value}% base Runecrafting Abyssal XP when making Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "runecraftingBaseAXPForRunes": {
          "description": "${value}% base Runecrafting Abyssal XP when making Runes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedTier1SummoningShardCost": {
          "description": "Negative value alias for melvorD:flatTier1SummoningShardCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTier1SummoningShardCost": {
          "description": "${value} Shard Cost when creating Tier 1 Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTier1SummoningShardCost": {
          "description": "${value} Shard Cost when creating Tier 1 Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedTier2SummoningShardCost": {
          "description": "Negative value alias for melvorD:flatTier2SummoningShardCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTier2SummoningShardCost": {
          "description": "${value} Shard Cost when creating Tier 2 Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTier2SummoningShardCost": {
          "description": "${value} Shard Cost when creating Tier 2 Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedTier3SummoningShardCost": {
          "description": "Negative value alias for melvorD:flatTier3SummoningShardCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatTier3SummoningShardCost": {
          "description": "${value} Shard Cost when creating Tier 3 Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatTier3SummoningShardCost": {
          "description": "${value} Shard Cost when creating Tier 3 Familiars in Summoning",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedThievingAreaUniqueChancePercent": {
          "description": "Positive value alias for melvorD:thievingAreaUniqueChancePercent",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:thievingAreaUniqueChancePercent": {
          "description": "The chance to receive Area Unique drops from Thieving is increased by ${value}%",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "thievingAreaUniqueChancePercent": {
          "description": "The chance to receive Area Unique drops from Thieving is increased by ${value}%",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "increasedMeleeStrengthBonusWith2HWeapon": {
          "description": "Positive value alias for melvorD:meleeStrengthBonusWith2HWeapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeStrengthBonusWith2HWeapon": {
          "description": "${value}% Melee Strength Bonus from Equipment when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeStrengthBonusWith2HWeapon": {
          "description": "${value}% Melee Strength Bonus from Equipment when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedGlobalEvasionWith2H": {
          "description": "Positive value alias for melvorD:evasionWith2HWeapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:evasionWith2HWeapon": {
          "description": "${value}% Global Evasion when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "evasionWith2HWeapon": {
          "description": "${value}% Global Evasion when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeDefenceBonusPerAbyssalLevel": {
          "description": "Positive value alias for melvorD:flatMeleeDefenceBonusPerAbyssalLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMeleeDefenceBonusPerAbyssalLevel": {
          "description": "${value} Melee Defence Bonus per Abyssal Defence Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMeleeDefenceBonusPerAbyssalLevel": {
          "description": "${value} Melee Defence Bonus per Abyssal Defence Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedDefenceBonusPerAbyssalLevel": {
          "description": "Positive value alias for melvorD:flatRangedDefenceBonusPerAbyssalLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatRangedDefenceBonusPerAbyssalLevel": {
          "description": "${value} Ranged Defence Bonus per Abyssal Defence Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatRangedDefenceBonusPerAbyssalLevel": {
          "description": "${value} Ranged Defence Bonus per Abyssal Defence Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicDefenceBonusPerAbyssalLevel": {
          "description": "Positive value alias for melvorD:flatMagicDefenceBonusPerAbyssalLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatMagicDefenceBonusPerAbyssalLevel": {
          "description": "${value} Magic Defence Bonus per Abyssal Defence Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatMagicDefenceBonusPerAbyssalLevel": {
          "description": "${value} Magic Defence Bonus per Abyssal Defence Level",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedAbyssalCombatSkillXP": {
          "description": "Positive value alias for melvorD:abyssalCombatSkillXP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:abyssalCombatSkillXP": {
          "description": "${value}% Combat Abyssal XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "abyssalCombatSkillXP": {
          "description": "${value}% Combat Abyssal XP",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedRangedStrengthBonusWith2HWeapon": {
          "description": "Positive value alias for melvorD:rangedStrengthBonusWith2HWeapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:rangedStrengthBonusWith2HWeapon": {
          "description": "${value}% Ranged Strength Bonus from Equipment when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "rangedStrengthBonusWith2HWeapon": {
          "description": "${value}% Ranged Strength Bonus from Equipment when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMagicDamageBonusWith2HWeapon": {
          "description": "Positive value alias for melvorD:magicDamageBonusWith2HWeapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:magicDamageBonusWith2HWeapon": {
          "description": "${value}% Magic Damage Bonus from Equipment when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "magicDamageBonusWith2HWeapon": {
          "description": "${value}% Magic Damage Bonus from Equipment when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSoulPointsFromReleasing": {
          "description": "Positive value alias for melvorD:flatSoulPointsFromReleasing",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatSoulPointsFromReleasing": {
          "description": "${value} Soul Point(s) when releasing Souls",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "flatSoulPointsFromReleasing": {
          "description": "${value} Soul Point(s) when releasing Souls",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedSlayerTaskExtensionCost": {
          "description": "Negative value alias for melvorD:slayerTaskExtensionCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:slayerTaskExtensionCost": {
          "description": "${value}% Slayer Task extension cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "slayerTaskExtensionCost": {
          "description": "${value}% Slayer Task extension cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:slayerTaskCost": {
          "description": "${value}% Slayer Task cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "slayerTaskCost": {
          "description": "${value}% Slayer Task cost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "decreasedPermanentCorruptionCost": {
          "description": "Negative value alias for melvorD:permanentCorruptionCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:permanentCorruptionCost": {
          "description": "${value}% Soul Points required to automatically corrupt monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "permanentCorruptionCost": {
          "description": "${value}% Soul Points required to automatically corrupt monsters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedSlashAttackBonus": {
          "description": "Positive value alias for melvorD:slashAttackBonus",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:slashAttackBonus": {
          "description": "${value}% Slash Attack Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "slashAttackBonus": {
          "description": "${value}% Slash Attack Bonus from Equipment",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedMeleeAccuracyWith2H": {
          "description": "Positive value alias for melvorD:meleeAccuracyRatingWith2H",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:meleeAccuracyRatingWith2H": {
          "description": "${value}% Melee Accuracy Rating when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "meleeAccuracyRatingWith2H": {
          "description": "${value}% Melee Accuracy Rating when using a 2-Handed weapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:useNoSummoningChargesAbyssalOctopus": {
          "description": "Abyssal Octopus Summoning Tablet consumes no charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "useNoSummoningChargesAbyssalOctopus": {
          "description": "Abyssal Octopus Summoning Tablet consumes no charges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedHiddenSkillLevel": {
          "description": "Positive value alias for melvorD:flatHiddenSkillLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedHiddenSkillLevel": {
          "description": "Negative value alias for melvorD:flatHiddenSkillLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:flatHiddenSkillLevel": {
          "description": "-${value} Hidden ${skillName} Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "flatHiddenSkillLevel": {
          "description": "-${value} Hidden ${skillName} Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillInterval": {
          "description": "Positive value alias for melvorD:flatSkillInterval",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedSkillInterval": {
          "description": "Negative value alias for melvorD:flatSkillInterval",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:flatSkillInterval": {
          "description": "${value}s Global Non-Combat Skill Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  }
                ]
              }
            }
          ]
        },
        "flatSkillInterval": {
          "description": "${value}s Global Non-Combat Skill Interval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue1"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue33"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue5"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue65"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue17"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToDoubleItemsSkill": {
          "description": "Positive value alias for melvorD:skillItemDoublingChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "increasedChanceToDoubleOres": {
          "description": "Positive value alias for melvorD:skillItemDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceDoubleHarvest": {
          "description": "Positive value alias for melvorD:skillItemDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToDoubleItemsSkill": {
          "description": "Negative value alias for melvorD:skillItemDoublingChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedChanceToDoubleOres": {
          "description": "Negative value alias for melvorD:skillItemDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceDoubleHarvest": {
          "description": "Negative value alias for melvorD:skillItemDoublingChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:skillItemDoublingChance": {
          "description": "-${value}% Chance to Double Items in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "skillItemDoublingChance": {
          "description": "-${value}% Chance to Double Items in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "increasedChanceAdditionalSkillResource": {
          "description": "Positive value alias for melvorD:additionalPrimaryProductChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "increasedChanceForOneExtraFish": {
          "description": "Positive value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceAdditionalSkillResource": {
          "description": "Negative value alias for melvorD:additionalPrimaryProductChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "decreasedChanceForOneExtraFish": {
          "description": "Negative value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:additionalPrimaryProductChance": {
          "description": "-${value}% Chance to gain +1 additional resource in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue69"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              }
            ]
          }
        },
        "additionalPrimaryProductChance": {
          "description": "-${value}% Chance to gain +1 additional resource in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue69"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              }
            ]
          }
        },
        "melvorD:additional2PrimaryProductChance": {
          "description": "${value}% chance to gain +2 additional ${subcategoryName} in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue65"
          }
        },
        "additional2PrimaryProductChance": {
          "description": "${value}% chance to gain +2 additional ${subcategoryName} in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue65"
          }
        },
        "melvorD:additional3PrimaryProductChance": {
          "description": "${value}% chance to gain +3 additional ${categoryName} in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue17"
          }
        },
        "additional3PrimaryProductChance": {
          "description": "${value}% chance to gain +3 additional ${categoryName} in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue17"
          }
        },
        "melvorD:additional5PrimaryProductChance": {
          "description": "${value}% chance to gain +5 additional ${categoryName} in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue17"
          }
        },
        "additional5PrimaryProductChance": {
          "description": "${value}% chance to gain +5 additional ${categoryName} in ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue17"
          }
        },
        "melvorD:additional8PrimaryProductChance": {
          "description": "${value}% chance to gain +8 additional resource in ${skillName} for ${categoryName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue17"
          }
        },
        "additional8PrimaryProductChance": {
          "description": "${value}% chance to gain +8 additional resource in ${skillName} for ${categoryName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue17"
          }
        },
        "doubleLogProduction": {
          "description": "Positive value alias for melvorD:doubleItemsSkill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:doubleItemsSkill": {
          "description": "x${value} Items received from ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              }
            ]
          }
        },
        "doubleItemsSkill": {
          "description": "x${value} Items received from ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              }
            ]
          }
        },
        "melvorD:bypassDoubleItemsSkill": {
          "description": "x${value} Items received from ${skillName} (Bypass gamemode limitation)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "bypassDoubleItemsSkill": {
          "description": "x${value} Items received from ${skillName} (Bypass gamemode limitation)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerDeedree": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerDeedree",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerDeedree": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Deedree constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerDeedree": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Deedree constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerAmeria": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerAmeria",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerAmeria": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Ameria constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerAmeria": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Ameria constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerVale": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerVale",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerVale": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Vale constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerVale": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Vale constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerQimican": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerQimican",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerQimican": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Qimican constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerQimican": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Qimican constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerKo": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerKo",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerKo": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Ko constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerKo": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Ko constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerArachi": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerArachi",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerArachi": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Arachi constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerArachi": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Arachi constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerIridan": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerIridan",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerIridan": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Iridan constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerIridan": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Iridan constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerHyden": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerHyden",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerHyden": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Hyden constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerHyden": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Hyden constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedSkillMasteryXPPerSyllia": {
          "description": "Positive value alias for melvorD:skillMasteryXPPerSyllia",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:skillMasteryXPPerSyllia": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Syllia constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "skillMasteryXPPerSyllia": {
          "description": "+${value}% ${skillName} Mastery XP per maxed Star in Syllia constellation in Astrology",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedHiddenSkillLevelPer2Levels": {
          "description": "Positive value alias for melvorD:flatHiddenSkillLevelPer2Levels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:flatHiddenSkillLevelPer2Levels": {
          "description": "+${value} Hidden ${skillName} Level for every 2 levels of ${skillName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "flatHiddenSkillLevelPer2Levels": {
          "description": "+${value} Hidden ${skillName} Level for every 2 levels of ${skillName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedHiddenSkillLevelBasedOnLevels": {
          "description": "Positive value alias for melvorD:flatHiddenSkillLevelBasedOnLevels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:flatHiddenSkillLevelBasedOnLevels": {
          "description": "+${value}% of your ${skillName} Level added as Hidden ${skillName} Levels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "flatHiddenSkillLevelBasedOnLevels": {
          "description": "+${value}% of your ${skillName} Level added as Hidden ${skillName} Levels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedMeleeStrengthBonusBasedOnSkillLevel": {
          "description": "Positive value alias for melvorD:flatMeleeStrengthBonusBasedOnSkillLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:flatMeleeStrengthBonusBasedOnSkillLevel": {
          "description": "+${value} Melee Strength Bonus based on your current ${skillName} Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "flatMeleeStrengthBonusBasedOnSkillLevel": {
          "description": "+${value} Melee Strength Bonus based on your current ${skillName} Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedHiddenSkillLevelPer3Levels": {
          "description": "Positive value alias for melvorD:flatHiddenSkillLevelPer3Levels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          },
          "deprecated": true
        },
        "melvorD:flatHiddenSkillLevelPer3Levels": {
          "description": "+${value} Hidden ${skillName} Level for every 3 levels of ${skillName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "flatHiddenSkillLevelPer3Levels": {
          "description": "+${value} Hidden ${skillName} Level for every 3 levels of ${skillName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "increasedDamageReductionAgainstBosses": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstBosses",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceAgainstBosses": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstBosses",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistanceAgainstBosses": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstBosses",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReductionAgainstBosses": {
          "description": "Negative value alias for melvorD:flatResistanceAgainstBosses",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatResistanceAgainstBosses": {
          "description": "-${value}% ${resistanceName} when fighting against a Dungeon Boss",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceAgainstBosses": {
          "description": "-${value}% ${resistanceName} when fighting against a Dungeon Boss",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionAgainstSlayerTasks": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstSlayerTasks",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceAgainstSlayerTasks": {
          "description": "Positive value alias for melvorD:flatResistanceAgainstSlayerTasks",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatResistanceAgainstSlayerTasks": {
          "description": "+${value}% ${resistanceName} when fighting a Slayer Task monster",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceAgainstSlayerTasks": {
          "description": "+${value}% ${resistanceName} when fighting a Slayer Task monster",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionWithMagic2HWeapon": {
          "description": "Positive value alias for melvorD:flatResistanceWithMagic2HWeapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceWithMagic2HWeapon": {
          "description": "Positive value alias for melvorD:flatResistanceWithMagic2HWeapon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedResistanceWithMagic2HWeapon": {
          "description": "Negative value alias for melvorD:flatResistanceWithMagic2HWeapon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "decreasedDamageReductionWithMagic2HWeapon": {
          "description": "Negative value alias for melvorD:flatResistanceWithMagic2HWeapon",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatResistanceWithMagic2HWeapon": {
          "description": "-${value}% ${resistanceName} when using a Magic 2-Handed Weapon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceWithMagic2HWeapon": {
          "description": "-${value}% ${resistanceName} when using a Magic 2-Handed Weapon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionPer30Defence": {
          "description": "Positive value alias for melvorD:flatResistancePer30Defence",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistancePer30Defence": {
          "description": "Positive value alias for melvorD:flatResistancePer30Defence",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatResistancePer30Defence": {
          "description": "+${value}% ${resistanceName} per 30 Defence Skill Levels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistancePer30Defence": {
          "description": "+${value}% ${resistanceName} per 30 Defence Skill Levels",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageReductionWithActivePrayer": {
          "description": "Positive value alias for melvorD:flatResistanceWithActivePrayer",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedResistanceWithActivePrayer": {
          "description": "Positive value alias for melvorD:flatResistanceWithActivePrayer",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatResistanceWithActivePrayer": {
          "description": "+${value}% ${resistanceName} when at least one Prayer is active",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatResistanceWithActivePrayer": {
          "description": "+${value}% ${resistanceName} when at least one Prayer is active",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMeleeStrengthBonusPer10EnemyResistance": {
          "description": "Positive value alias for melvorD:meleeStrengthBonusPer10EnemyResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:meleeStrengthBonusPer10EnemyResistance": {
          "description": "+${value}% Melee Strength Bonus from equipment per 10% base enemy ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "meleeStrengthBonusPer10EnemyResistance": {
          "description": "+${value}% Melee Strength Bonus from equipment per 10% base enemy ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMeleeDefenceBonusBasedOnResistance": {
          "description": "Positive value alias for melvorD:flatMeleeDefenceBonusBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatMeleeDefenceBonusBasedOnResistance": {
          "description": "+${value} Melee Defence Bonus per 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatMeleeDefenceBonusBasedOnResistance": {
          "description": "+${value} Melee Defence Bonus per 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedRangedDefenceBonusBasedOnResistance": {
          "description": "Positive value alias for melvorD:flatRangedDefenceBonusBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatRangedDefenceBonusBasedOnResistance": {
          "description": "+${value} Ranged Defence Bonus per 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatRangedDefenceBonusBasedOnResistance": {
          "description": "+${value} Ranged Defence Bonus per 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedMagicDefenceBonusBasedOnResistance": {
          "description": "Positive value alias for melvorD:flatMagicDefenceBonusBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatMagicDefenceBonusBasedOnResistance": {
          "description": "+${value} Magic Defence Bonus per 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "flatMagicDefenceBonusBasedOnResistance": {
          "description": "+${value} Magic Defence Bonus per 1% of ${resistanceName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "healOnHitBasedOnTargetDR": {
          "description": "Positive value alias for melvorD:healingOnHitBasedOnTargetResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:healingOnHitBasedOnTargetResistance": {
          "description": "Heal for ${value}% of the target's base ${resistanceName} when hitting with an attack (once per turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "healingOnHitBasedOnTargetResistance": {
          "description": "Heal for ${value}% of the target's base ${resistanceName} when hitting with an attack (once per turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedHealingOnAttackBasedOnDR": {
          "description": "Positive value alias for melvorD:healingOnAttackBasedOnResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedHealingOnAttackBasedOnResistance": {
          "description": "Positive value alias for melvorD:healingOnAttackBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:healingOnAttackBasedOnResistance": {
          "description": "Heal for ${value}% of your ${resistanceName} when attacking (once per turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "healingOnAttackBasedOnResistance": {
          "description": "Heal for ${value}% of your ${resistanceName} when attacking (once per turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedChanceToDoubleItemsAgainstDamageType": {
          "description": "Positive value alias for melvorD:doubleItemsChanceAgainstDamageType",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:doubleItemsChanceAgainstDamageType": {
          "description": "+${value}% chance to double loot in Combat when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "doubleItemsChanceAgainstDamageType": {
          "description": "+${value}% chance to double loot in Combat when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedDamageToDamageTypeSlayerTasks": {
          "description": "Positive value alias for melvorD:damageDealtToDamageTypeSlayerTasks",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:damageDealtToDamageTypeSlayerTasks": {
          "description": "+${value}% Damage to Slayer Tasks when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "damageDealtToDamageTypeSlayerTasks": {
          "description": "+${value}% Damage to Slayer Tasks when fighting against ${damageType}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          }
        },
        "increasedGPGlobal": {
          "description": "Positive value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSlayerCoins": {
          "description": "Positive value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyGlobal": {
          "description": "Positive value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyGlobal": {
          "description": "Negative value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPGlobal": {
          "description": "Negative value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSlayerCoins": {
          "description": "Negative value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedGPFromAgility": {
          "description": "Positive value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromAgility": {
          "description": "Positive value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "increasedGPFromFiremaking": {
          "description": "Positive value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromFiremaking": {
          "description": "Positive value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "increasedGPFromThieving": {
          "description": "Positive value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromThieving": {
          "description": "Positive value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromAgility": {
          "description": "Negative value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCurrencyFromAgility": {
          "description": "Negative value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromFiremaking": {
          "description": "Negative value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCurrencyFromFiremaking": {
          "description": "Negative value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromThieving": {
          "description": "Negative value alias for melvorD:currencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCurrencyFromThieving": {
          "description": "Negative value alias for melvorD:currencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGain": {
          "description": "-${value}% Global ${currencyName} (except Item Sales)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue8"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue9"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue41"
              }
            ]
          }
        },
        "currencyGain": {
          "description": "-${value}% Global ${currencyName} (except Item Sales)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue8"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue9"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue41"
              }
            ]
          }
        },
        "increasedGPFromMonsters": {
          "description": "Positive value alias for melvorD:currencyGainFromCombat",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromCombat": {
          "description": "Positive value alias for melvorD:currencyGainFromCombat",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyFromCombat": {
          "description": "Negative value alias for melvorD:currencyGainFromCombat",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromMonsters": {
          "description": "Negative value alias for melvorD:currencyGainFromCombat",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:currencyGainFromCombat": {
          "description": "-${value}% ${currencyName} from Combat",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromCombat": {
          "description": "-${value}% ${currencyName} from Combat",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromMonstersFlat": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromMonsterDrops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromMonsterDropsFlat": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromMonsterDrops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyFromMonsterDropsFlat": {
          "description": "Negative value alias for melvorD:flatCurrencyGainFromMonsterDrops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromMonstersFlat": {
          "description": "Negative value alias for melvorD:flatCurrencyGainFromMonsterDrops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatCurrencyGainFromMonsterDrops": {
          "description": "-${value} ${currencyName} from Monster drops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainFromMonsterDrops": {
          "description": "-${value} ${currencyName} from Monster drops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromThievingFlat": {
          "description": "Positive value alias for melvorD:flatThievingCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromThievingFlat": {
          "description": "Positive value alias for melvorD:flatThievingCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyFromThievingFlat": {
          "description": "Negative value alias for melvorD:flatThievingCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromThievingFlat": {
          "description": "Negative value alias for melvorD:flatThievingCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatThievingCurrencyGain": {
          "description": "-${value} ${currencyName} from Thieving",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatThievingCurrencyGain": {
          "description": "-${value} ${currencyName} from Thieving",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromSales": {
          "description": "Positive value alias for melvorD:itemSaleCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromItemSales": {
          "description": "Positive value alias for melvorD:itemSaleCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyFromItemSales": {
          "description": "Negative value alias for melvorD:itemSaleCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromSales": {
          "description": "Negative value alias for melvorD:itemSaleCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:itemSaleCurrencyGain": {
          "description": "-${value}% ${currencyName} from Item Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "itemSaleCurrencyGain": {
          "description": "-${value}% ${currencyName} from Item Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPOnEnemyHit": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnEnemyHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyOnEnemyHit": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnEnemyHit",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyOnEnemyHit": {
          "description": "Negative value alias for melvorD:flatCurrencyGainOnEnemyHit",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPOnEnemyHit": {
          "description": "Negative value alias for melvorD:flatCurrencyGainOnEnemyHit",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatCurrencyGainOnEnemyHit": {
          "description": "-${value} ${currencyName} gained when hitting with an attack",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainOnEnemyHit": {
          "description": "-${value} ${currencyName} gained when hitting with an attack",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedSlayerCoinsBasedOnTargetDR": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnHitOnSlayerTask",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSlayerCoinsOnHitBasedOnResistance": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnHitOnSlayerTask",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainOnHitOnSlayerTask": {
          "description": "${value} ${currencyName} gained per 1% of target's base ${resistanceName} if they are your Slayer Task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue10"
          }
        },
        "flatCurrencyGainOnHitOnSlayerTask": {
          "description": "${value} ${currencyName} gained per 1% of target's base ${resistanceName} if they are your Slayer Task",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue10"
          }
        },
        "increasedGPWhenHitBasedOnDR": {
          "description": "Positive value alias for melvorD:flatCurrencyGainWhenHitBasedOnResistance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedGPWhenHitBasedOnResistance": {
          "description": "Positive value alias for melvorD:flatCurrencyGainWhenHitBasedOnResistance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue2"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainWhenHitBasedOnResistance": {
          "description": "${value} ${currencyName} gained per 1% of your ${resistanceName} when hit by an enemy (Once per enemy turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue10"
          }
        },
        "flatCurrencyGainWhenHitBasedOnResistance": {
          "description": "${value} ${currencyName} gained per 1% of your ${resistanceName} when hit by an enemy (Once per enemy turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue10"
          }
        },
        "increasedGPFromMonstersFlatBasedOnEvasion": {
          "description": "Positive value alias for melvorD:currencyGainOnMonsterKillBasedOnEvasion",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyOnMonsterKillBasedOnEvasion": {
          "description": "Positive value alias for melvorD:currencyGainOnMonsterKillBasedOnEvasion",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainOnMonsterKillBasedOnEvasion": {
          "description": "+${value}% of enemy's highest evasion rating gained as ${currencyName} on kill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainOnMonsterKillBasedOnEvasion": {
          "description": "+${value}% of enemy's highest evasion rating gained as ${currencyName} on kill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPPerDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSlayerCoinsPerDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerDamageDealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyPerDamage": {
          "description": "Negative value alias for melvorD:currencyGainPerDamageDealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPPerDamage": {
          "description": "Negative value alias for melvorD:currencyGainPerDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSlayerCoinsPerDamage": {
          "description": "Negative value alias for melvorD:currencyGainPerDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:currencyGainPerDamageDealt": {
          "description": "-${value}% of Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerDamageDealt": {
          "description": "-${value}% of Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPPerMeleeDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerMeleeDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerMeleeDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerMeleeDamageDealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainPerMeleeDamageDealt": {
          "description": "+${value}% of Melee Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerMeleeDamageDealt": {
          "description": "+${value}% of Melee Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPPerRangedDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerRangedDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerRangedDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerRangedDamageDealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainPerRangedDamageDealt": {
          "description": "+${value}% of Ranged Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerRangedDamageDealt": {
          "description": "+${value}% of Ranged Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPPerMagicDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerMagicDamageDealt",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerMagicDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerMagicDamageDealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainPerMagicDamageDealt": {
          "description": "+${value}% of Magic Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerMagicDamageDealt": {
          "description": "+${value}% of Magic Damage Dealt gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedCurrencyPerMagicDamageOnSlayerTask": {
          "description": "Positive value alias for melvorD:currencyGainPerMagicDamageDealtOnSlayerTask",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainPerMagicDamageDealtOnSlayerTask": {
          "description": "+${value}% of Magic Damage Dealt against Slayer Task monsters gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerMagicDamageDealtOnSlayerTask": {
          "description": "+${value}% of Magic Damage Dealt against Slayer Task monsters gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "melvorD:currencyGainFromMonsterDrops": {
          "description": "${value}% ${currencyName} dropped from Monsters",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromMonsterDrops": {
          "description": "${value}% ${currencyName} dropped from Monsters",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromSlayerTaskMonsters": {
          "description": "Positive value alias for melvorD:currencyGainFromSlayerTaskMonsterDrops",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromSlayerTaskMonsterDrops": {
          "description": "Positive value alias for melvorD:currencyGainFromSlayerTaskMonsterDrops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainFromSlayerTaskMonsterDrops": {
          "description": "+${value}% ${currencyName} from Slayer Task Monster drops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromSlayerTaskMonsterDrops": {
          "description": "+${value}% ${currencyName} from Slayer Task Monster drops",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPOnRegenBasedOnHPGain": {
          "description": "Positive value alias for melvorD:currencyGainOnRegenBasedOnHPGained",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyOnRegenBasedOnHPGained": {
          "description": "Positive value alias for melvorD:currencyGainOnRegenBasedOnHPGained",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainOnRegenBasedOnHPGained": {
          "description": "+${value}% of passively regenerated hitpoints gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainOnRegenBasedOnHPGained": {
          "description": "+${value}% of passively regenerated hitpoints gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedSCfromLifesteal": {
          "description": "Positive value alias for melvorD:currencyGainFromLifesteal",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromLifesteal": {
          "description": "Positive value alias for melvorD:currencyGainFromLifesteal",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainFromLifesteal": {
          "description": "+${value}% of lifesteal healing gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromLifesteal": {
          "description": "+${value}% of lifesteal healing gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedMinThievingGP": {
          "description": "Positive value alias for melvorD:minThievingCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinThievingCurrency": {
          "description": "Positive value alias for melvorD:minThievingCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedMinThievingCurrency": {
          "description": "Negative value alias for melvorD:minThievingCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedMinThievingGP": {
          "description": "Negative value alias for melvorD:minThievingCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:minThievingCurrencyGain": {
          "description": "-${value}% minimum ${currencyName} from Thieving",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "minThievingCurrencyGain": {
          "description": "-${value}% minimum ${currencyName} from Thieving",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromNegativeObstacles": {
          "description": "Positive value alias for melvorD:currencyGainFromNegativeObstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromNegativeObstacles": {
          "description": "Positive value alias for melvorD:currencyGainFromNegativeObstacles",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyFromNegativeObstacles": {
          "description": "Negative value alias for melvorD:currencyGainFromNegativeObstacles",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromNegativeObstacles": {
          "description": "Negative value alias for melvorD:currencyGainFromNegativeObstacles",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:currencyGainFromNegativeObstacles": {
          "description": "-${value}% ${currencyName} from Agility Obstacles that contain a negative modifier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromNegativeObstacles": {
          "description": "-${value}% ${currencyName} from Agility Obstacles that contain a negative modifier",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromAgilityPerActiveObstacle": {
          "description": "Positive value alias for melvorD:currencyGainFromAgilityPerActiveObstacle",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromAgilityPerActiveObstacle": {
          "description": "Positive value alias for melvorD:currencyGainFromAgilityPerActiveObstacle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyFromAgilityPerActiveObstacle": {
          "description": "Negative value alias for melvorD:currencyGainFromAgilityPerActiveObstacle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPFromAgilityPerActiveObstacle": {
          "description": "Negative value alias for melvorD:currencyGainFromAgilityPerActiveObstacle",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:currencyGainFromAgilityPerActiveObstacle": {
          "description": "-${value}% ${currencyName} from Agility per active Obstacle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromAgilityPerActiveObstacle": {
          "description": "-${value}% ${currencyName} from Agility per active Obstacle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromLogSales": {
          "description": "Positive value alias for melvorD:currencyGainFromLogSales",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromLogSales": {
          "description": "Positive value alias for melvorD:currencyGainFromLogSales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainFromLogSales": {
          "description": "+${value}% ${currencyName} from Log Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromLogSales": {
          "description": "+${value}% ${currencyName} from Log Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromRawFishSales": {
          "description": "Positive value alias for melvorD:currencyGainFromRawFishSales",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromRawFishSales": {
          "description": "Positive value alias for melvorD:currencyGainFromRawFishSales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainFromRawFishSales": {
          "description": "+${value}% ${currencyName} from Raw Fish Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromRawFishSales": {
          "description": "+${value}% ${currencyName} from Raw Fish Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFlat": {
          "description": "Positive value alias for melvorD:flatCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFlat": {
          "description": "Positive value alias for melvorD:flatCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGain": {
          "description": "+${value} ${currencyName} gained when earning ${currencyName}, except from Alt. Magic and Item Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGain": {
          "description": "+${value} ${currencyName} gained when earning ${currencyName}, except from Alt. Magic and Item Sales",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPMultiplierPer1MGP": {
          "description": "Positive value alias for melvorD:currencyGainPerDamageDealtBasedOnCurrencyAmount",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerDamageBasedOnCurrencyAmount": {
          "description": "Positive value alias for melvorD:currencyGainPerDamageDealtBasedOnCurrencyAmount",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainPerDamageDealtBasedOnCurrencyAmount": {
          "description": "+${value}% of Damage Dealt gained as ${currencyName} for every 1M ${currencyName} owned",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerDamageDealtBasedOnCurrencyAmount": {
          "description": "+${value}% of Damage Dealt gained as ${currencyName} for every 1M ${currencyName} owned",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPMultiplierMin": {
          "description": "Positive value alias for melvorD:minCurrencyMultiplierPerDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinCurrencyMultiplierPerDamage": {
          "description": "Positive value alias for melvorD:minCurrencyMultiplierPerDamage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:minCurrencyMultiplierPerDamage": {
          "description": "+${value}% minimum ${currencyName} per Damage Dealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "minCurrencyMultiplierPerDamage": {
          "description": "+${value}% minimum ${currencyName} per Damage Dealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPMultiplierCap": {
          "description": "Positive value alias for melvorD:maxCurrencyMultiplierPerDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMaxCurrencyMultiplierPerDamage": {
          "description": "Positive value alias for melvorD:maxCurrencyMultiplierPerDamage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:maxCurrencyMultiplierPerDamage": {
          "description": "+${value}% maximum ${currencyName} per Damage Dealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "maxCurrencyMultiplierPerDamage": {
          "description": "+${value}% maximum ${currencyName} per Damage Dealt",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPPerArchaeologyLevelNoArtefact": {
          "description": "Positive value alias for melvorD:flatCurrencyGainPerArchaeologyLevelNoArtefact",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerArchaeologyLevelNoArtefact": {
          "description": "Positive value alias for melvorD:flatCurrencyGainPerArchaeologyLevelNoArtefact",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainPerArchaeologyLevelNoArtefact": {
          "description": "+${value} ${currencyName} gained per Archaeology Skill Level when locating no Artefact from an excavation action",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainPerArchaeologyLevelNoArtefact": {
          "description": "+${value} ${currencyName} gained per Archaeology Skill Level when locating no Artefact from an excavation action",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "melvorD:agilityObstacleCurrencyCost": {
          "description": "-${value}% Agility Obstacle ${currencyName} Build Cost",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue8"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue12"
              }
            ]
          }
        },
        "agilityObstacleCurrencyCost": {
          "description": "-${value}% Agility Obstacle ${currencyName} Build Cost",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue8"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue12"
              }
            ]
          }
        },
        "increasedChanceForCurrencyFromHarvestingBasedOnLevel": {
          "description": "Positive value alias for melvorD:currencyFromHarvestingChanceBasedOnLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyFromHarvestingChanceBasedOnLevel": {
          "description": "+${value}% chance to gain 50 ${currencyName} per Vein Harvesting Level when Harvesting",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyFromHarvestingChanceBasedOnLevel": {
          "description": "+${value}% chance to gain 50 ${currencyName} per Vein Harvesting Level when Harvesting",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedCurrencyOnMonsterKillBasedOnCombatLevel": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnMonsterKillBasedOnCombatLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainOnMonsterKillBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} gained per Enemy Combat Level on kill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainOnMonsterKillBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} gained per Enemy Combat Level on kill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedCurrencyFromSlayerTasks": {
          "description": "Positive value alias for melvorD:currencyGainFromSlayerTasks",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainFromSlayerTasks": {
          "description": "+${value}% ${currencyName} from Slayer Tasks",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromSlayerTasks": {
          "description": "+${value}% ${currencyName} from Slayer Tasks",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedCurrencyFromMonsterDropsBasedOnDebuffs": {
          "description": "Positive value alias for melvorD:currencyGainFromMonsterDropsBasedOnDebuffs",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainFromMonsterDropsBasedOnDebuffs": {
          "description": "+${value}% ${currencyName} from Monster drops per Debuff on the enemy",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainFromMonsterDropsBasedOnDebuffs": {
          "description": "+${value}% ${currencyName} from Monster drops per Debuff on the enemy",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "gainSlayerCoinsBasedOnEnemyCombatLevelMelee": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromMeleeSlayerTasksBasedOnCombatLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromSlayerTasksBasedOnCombatLevelMelee": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromMeleeSlayerTasksBasedOnCombatLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainFromMeleeSlayerTasksBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} from Melee Slayer Tasks equal to the enemy's Combat Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainFromMeleeSlayerTasksBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} from Melee Slayer Tasks equal to the enemy's Combat Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "gainSlayerCoinsBasedOnEnemyCombatLevelRanged": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromRangedSlayerTasksBasedOnCombatLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromSlayerTasksBasedOnCombatLevelRanged": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromRangedSlayerTasksBasedOnCombatLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainFromRangedSlayerTasksBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} from Ranged Slayer Tasks equal to the enemy's Combat Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainFromRangedSlayerTasksBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} from Ranged Slayer Tasks equal to the enemy's Combat Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "gainSlayerCoinsBasedOnEnemyCombatLevelMagic": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromMagicSlayerTasksBasedOnCombatLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyFromSlayerTasksBasedOnCombatLevelMagic": {
          "description": "Positive value alias for melvorD:flatCurrencyGainFromMagicSlayerTasksBasedOnCombatLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainFromMagicSlayerTasksBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} from Magic Slayer Tasks equal to the enemy's Combat Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainFromMagicSlayerTasksBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} from Magic Slayer Tasks equal to the enemy's Combat Level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPBasedOnSummonDamage": {
          "description": "Positive value alias for melvorD:currencyGainBasedOnSummonDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyBasedOnSummonDamage": {
          "description": "Positive value alias for melvorD:currencyGainBasedOnSummonDamage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedCurrencyBasedOnSummonDamage": {
          "description": "Negative value alias for melvorD:currencyGainBasedOnSummonDamage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedGPBasedOnSummonDamage": {
          "description": "Negative value alias for melvorD:currencyGainBasedOnSummonDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:currencyGainBasedOnSummonDamage": {
          "description": "-${value}% of damage dealt to Hitpoints by Summoning Familiars gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainBasedOnSummonDamage": {
          "description": "-${value}% of damage dealt to Hitpoints by Summoning Familiars gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPFromBarrierDamage": {
          "description": "Positive value alias for melvorD:currencyGainBasedOnBarrierDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyBasedOnBarrierDamage": {
          "description": "Positive value alias for melvorD:currencyGainBasedOnBarrierDamage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainBasedOnBarrierDamage": {
          "description": "+${value}% of damage dealt to Barrier by Summoning Familiars gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainBasedOnBarrierDamage": {
          "description": "+${value}% of damage dealt to Barrier by Summoning Familiars gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedGPBasedOnEnemyCombatLevel": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnEnemyHitBasedOnCombatLevel",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyOnEnemyHitBasedOnCombatLevel": {
          "description": "Positive value alias for melvorD:flatCurrencyGainOnEnemyHitBasedOnCombatLevel",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:flatCurrencyGainOnEnemyHitBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} gained when hitting with an attack per enemy Combat Level (once per turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "flatCurrencyGainOnEnemyHitBasedOnCombatLevel": {
          "description": "+${value} ${currencyName} gained when hitting with an attack per enemy Combat Level (once per turn)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedSlayerCoinsPerPoisonDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerPoisonDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCurrencyPerPoisonDamage": {
          "description": "Positive value alias for melvorD:currencyGainPerPoisonDamage",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:currencyGainPerPoisonDamage": {
          "description": "+${value}% of Poison damage dealt is gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "currencyGainPerPoisonDamage": {
          "description": "+${value}% of Poison damage dealt is gained as ${currencyName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedFiremakingLogGP": {
          "description": "Positive value alias for melvorD:firemakingLogCurrencyGain",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFiremakingLogCurrency": {
          "description": "Positive value alias for melvorD:firemakingLogCurrencyGain",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:firemakingLogCurrencyGain": {
          "description": "${value}% of base sale price of logs that sell for ${currencyName} granted as ${currencyName} when burnt in Firemaking",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "firemakingLogCurrencyGain": {
          "description": "${value}% of base sale price of logs that sell for ${currencyName} granted as ${currencyName} when burnt in Firemaking",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedChanceItemToGoldFletching": {
          "description": "Positive value alias for melvorD:fletchingItemToCurrencyChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedItemToCurrencyChanceFletching": {
          "description": "Positive value alias for melvorD:fletchingItemToCurrencyChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedItemToCurrencyChanceFletching": {
          "description": "Negative value alias for melvorD:fletchingItemToCurrencyChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "decreasedChanceItemToGoldFletching": {
          "description": "Negative value alias for melvorD:fletchingItemToCurrencyChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:fletchingItemToCurrencyChance": {
          "description": "${value}% chance for items that sell for ${currencyName} produced in Fletching to be converted to ${currencyName} equal to 150% of their base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "fletchingItemToCurrencyChance": {
          "description": "${value}% chance for items that sell for ${currencyName} produced in Fletching to be converted to ${currencyName} equal to 150% of their base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedChanceForGoldFromCrafting30": {
          "description": "Positive value alias for melvorD:crafting30CurrencyGainChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForCurrencyCrafting30": {
          "description": "Positive value alias for melvorD:crafting30CurrencyGainChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:crafting30CurrencyGainChance": {
          "description": "${value}% to gain ${currencyName} in Crafting when making items that sell for ${currencyName} equal to 30% of their base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "crafting30CurrencyGainChance": {
          "description": "${value}% to gain ${currencyName} in Crafting when making items that sell for ${currencyName} equal to 30% of their base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedChanceForGPFromFishing": {
          "description": "Positive value alias for melvorD:fishingCurrencyGainChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForCurrencyFishing": {
          "description": "Positive value alias for melvorD:fishingCurrencyGainChance",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          },
          "deprecated": true
        },
        "melvorD:fishingCurrencyGainChance": {
          "description": "${value}% chance to gain ${currencyName} in Fishing when catching a Fish that sells for ${currencyName} equal to its base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "fishingCurrencyGainChance": {
          "description": "${value}% chance to gain ${currencyName} in Fishing when catching a Fish that sells for ${currencyName} equal to its base sale price",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue8"
          }
        },
        "increasedActionsPerClick": {
          "description": "Positive value alias for melvorD:actionsPerClick",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:actionsPerClick": {
          "description": "+${value} Player actions per click",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "actionsPerClick": {
          "description": "+${value} Player actions per click",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceToDoubleActionsPerClick": {
          "description": "Positive value alias for melvorD:doubleActionsPerClickChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:doubleActionsPerClickChance": {
          "description": "+${value}% chance to double Player actions per click",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleActionsPerClickChance": {
          "description": "+${value}% chance to double Player actions per click",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedChanceForExtraActionPerClick": {
          "description": "Positive value alias for melvorD:extraActionPerClickChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:extraActionPerClickChance": {
          "description": "+${value}% chance to perform +1 Player actions per click",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "extraActionPerClickChance": {
          "description": "+${value}% chance to perform +1 Player actions per click",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "increasedDoubleSoulDropChance": {
          "description": "Positive value alias for melvorD:doubleSoulDropChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:doubleSoulDropChance": {
          "description": "+${value}% chance to double Soul drops from enemies",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleSoulDropChance": {
          "description": "+${value}% chance to double Soul drops from enemies",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:doubleSoulDrops": {
          "description": "x${value} Souls dropped from enemies",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "doubleSoulDrops": {
          "description": "x${value} Souls dropped from enemies",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:placeholderModifier": {
          "description": "This is a placeholder Modifier that has yet to be determined",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "placeholderModifier": {
          "description": "This is a placeholder Modifier that has yet to be determined",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:farmingSeedReturn": {
          "description": "Up to ${value} Allotment or Herb seeds returned when harvesting in Farming for ${actionName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "farmingSeedReturn": {
          "description": "Up to ${value} Allotment or Herb seeds returned when harvesting in Farming for ${actionName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "melvorD:fishingMasteryDoublingChance": {
          "description": "${value}% chance to receive 2 fish from Fishing when fishing ${actionName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "fishingMasteryDoublingChance": {
          "description": "${value}% chance to receive 2 fish from Fishing when fishing ${actionName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "melvorD:halveAgilityObstacleNegatives": {
          "description": "Passive Debuffs from the ${actionName} Obstacle in Agility are halved",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "halveAgilityObstacleNegatives": {
          "description": "Passive Debuffs from the ${actionName} Obstacle in Agility are halved",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "melvorD:nonShardSummoningCostReduction": {
          "description": "${value}% Cost Reduction for Summoning, excluding Shards",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "nonShardSummoningCostReduction": {
          "description": "${value}% Cost Reduction for Summoning, excluding Shards",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue16"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:runecraftingRuneCostReduction": {
          "description": "${value}% cost reduction for Runes when making ${actionName} in Runecrafting",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "runecraftingRuneCostReduction": {
          "description": "${value}% cost reduction for Runes when making ${actionName} in Runecrafting",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "increasedSummoningCreationCharges": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSummoningCreationCharges": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:flatBasePrimaryProductQuantity": {
          "description": "${value} base primary resource quantity gained in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              }
            ]
          }
        },
        "flatBasePrimaryProductQuantity": {
          "description": "${value} base primary resource quantity gained in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              }
            ]
          }
        },
        "melvorD:flatBasePrimaryProductQuantityChance": {
          "description": "${value}% chance to gain +1 base primary resource quantity in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              }
            ]
          }
        },
        "flatBasePrimaryProductQuantityChance": {
          "description": "${value}% chance to gain +1 base primary resource quantity in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              }
            ]
          }
        },
        "increasedFarmingYield": {
          "description": "Positive value alias for melvorD:basePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFarmingYield": {
          "description": "Negative value alias for melvorD:basePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:basePrimaryProductQuantity": {
          "description": "${value}% base primary resource quantity gained in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue21"
              }
            ]
          }
        },
        "basePrimaryProductQuantity": {
          "description": "${value}% base primary resource quantity gained in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue21"
              }
            ]
          }
        },
        "melvorD:randomProductChance": {
          "description": "${value}% chance to gain ${itemName} in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue129"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              }
            ]
          }
        },
        "randomProductChance": {
          "description": "${value}% chance to gain ${itemName} in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue129"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              }
            ]
          }
        },
        "melvorD:flatBaseRandomProductQuantity": {
          "description": "${value} base quantity when gaining ${itemName} from ${skillName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue129"
          }
        },
        "flatBaseRandomProductQuantity": {
          "description": "${value} base quantity when gaining ${itemName} from ${skillName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue129"
          }
        },
        "melvorD:currencyGainBasedOnProduct": {
          "description": "${value}% of base item sale price gained as ${currencyName} when gaining primary skill resources that sell for ${currencyName} in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue9"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue25"
              }
            ]
          }
        },
        "currencyGainBasedOnProduct": {
          "description": "${value}% of base item sale price gained as ${currencyName} when gaining primary skill resources that sell for ${currencyName} in ${skillName}",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue9"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue25"
              }
            ]
          }
        },
        "melvorD:additionalRandomSkillItemChance": {
          "description": "${value}% chance to gain 1 ${itemName} from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue129"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue133"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              }
            ]
          }
        },
        "additionalRandomSkillItemChance": {
          "description": "${value}% chance to gain 1 ${itemName} from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue129"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue133"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              }
            ]
          }
        },
        "melvorD:additionalRandomSkillItemChancePerInterval": {
          "description": "${value}% chance to gain 1 ${itemName} from ${skillName} per 1s of interval for ${realmName} only (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue133"
          }
        },
        "additionalRandomSkillItemChancePerInterval": {
          "description": "${value}% chance to gain 1 ${itemName} from ${skillName} per 1s of interval for ${realmName} only (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue133"
          }
        },
        "increasedWoodcuttingGemChance": {
          "description": "Positive value alias for melvorD:additionalRandomGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:additionalRandomGemChance": {
          "description": "${value}% chance to gain 1 random gem from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              }
            ]
          }
        },
        "additionalRandomGemChance": {
          "description": "${value}% chance to gain 1 random gem from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              }
            ]
          }
        },
        "melvorD:additionalRandomAbyssalGemChance": {
          "description": "${value}% chance to gain 1 random abyssal gem from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "additionalRandomAbyssalGemChance": {
          "description": "${value}% chance to gain 1 random abyssal gem from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "melvorD:additionalRandomFragmentChance": {
          "description": "${value}% chance to gain 1 random Fragment from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "additionalRandomFragmentChance": {
          "description": "${value}% chance to gain 1 random Fragment from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "melvorD:additionalRandomFiremakingOilChance": {
          "description": "${value}% chance to gain 1 random Firemaking Oil (Except Voidfire) from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "additionalRandomFiremakingOilChance": {
          "description": "${value}% chance to gain 1 random Firemaking Oil (Except Voidfire) from ${skillName} (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue1"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue65"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue33"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue17"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue5"
              }
            ]
          }
        },
        "increasedWoodcuttingAbyssalGemChancePerInterval": {
          "description": "Positive value alias for melvorD:additionalRandomAbyssalGemChancePerInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorD:additionalRandomAbyssalGemChancePerInterval": {
          "description": "${value}% chance to gain 1 random abyssal gem from ${skillName} per 1s of interval (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "additionalRandomAbyssalGemChancePerInterval": {
          "description": "${value}% chance to gain 1 random abyssal gem from ${skillName} per 1s of interval (Cannot be doubled)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue1"
          }
        },
        "melvorD:flatAdditionalSkillItem": {
          "description": "${value} ${itemName} gained from Skill actions (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue128"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue129"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue193"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue145"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue133"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue149"
              }
            ]
          }
        },
        "flatAdditionalSkillItem": {
          "description": "${value} ${itemName} gained from Skill actions (Cannot be doubled)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/ScopedModifierValue128"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue129"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue161"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue193"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue145"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue133"
              },
              {
                "$ref": "#/$defs/ScopedModifierValue149"
              }
            ]
          }
        },
        "melvorD:firemakingBonfireInterval": {
          "description": "${value}% Bonfire interval in Firemaking",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "firemakingBonfireInterval": {
          "description": "${value}% Bonfire interval in Firemaking",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ]
        },
        "melvorD:astrologyModifierCost": {
          "description": "${value}% Astrology modifier costs (Costs cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "astrologyModifierCost": {
          "description": "${value}% Astrology modifier costs (Costs cannot go below 1)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:flatAdditionalThievingCommonDropQuantity": {
          "description": "${value} additional Common Drop quantity gained in Thieving (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "flatAdditionalThievingCommonDropQuantity": {
          "description": "${value} additional Common Drop quantity gained in Thieving (Cannot be doubled)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue4"
                  }
                ]
              }
            }
          ]
        },
        "melvorD:flatSpellRuneCost": {
          "description": "${value} ${itemName} cost to cast Spells",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue128"
          }
        },
        "flatSpellRuneCost": {
          "description": "${value} ${itemName} cost to cast Spells",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue128"
          }
        },
        "melvorD:flatAttackSpellRuneCost": {
          "description": "${value} Rune cost to cast ${categoryName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue16"
          }
        },
        "flatAttackSpellRuneCost": {
          "description": "${value} Rune cost to cast ${categoryName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue16"
          }
        },
        "increasedEssenceFromMining": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceAdditionalBarSmithing": {
          "description": "Positive value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForOneExtraOre": {
          "description": "Positive value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForOneExtraOre": {
          "description": "Negative value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceAdditionalSoup": {
          "description": "Positive value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedAdditionalOresMining": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "doubleRuneEssenceMining": {
          "description": "Positive value alias for melvorD:doubleItemsSkill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "doubleOresMining": {
          "description": "Positive value alias for melvorD:doubleItemsSkill",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChancePerfectCookFire": {
          "description": "Positive value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChancePerfectCookFurnace": {
          "description": "Positive value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChancePerfectCookPot": {
          "description": "Positive value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChancePerfectCookFire": {
          "description": "Negative value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChancePerfectCookFurnace": {
          "description": "Negative value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChancePerfectCookPot": {
          "description": "Negative value alias for melvorD:perfectCookChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCookingIntervalForBasicSoup": {
          "description": "Negative value alias for melvorD:skillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSmithingDragonGearPreservation": {
          "description": "Positive value alias for melvorD:skillPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFiremakingCoalChance": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedBirdNestDropRate": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBirdNestDropRate": {
          "description": "Negative value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMinBirdNestQuantity": {
          "description": "Positive value alias for melvorD:flatBaseRandomProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForDiamondFiremaking": {
          "description": "Positive value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForDiamondFiremaking": {
          "description": "Negative value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSeeingGoldChance": {
          "description": "Positive value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSeeingGoldChance": {
          "description": "Negative value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedLemonsPerAction": {
          "description": "Positive value alias for melvorD:flatAdditionalSkillItem",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedAllotmentSeedCost": {
          "description": "Positive value alias for melvorD:flatFarmingSeedCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAllotmentSeedCost": {
          "description": "Negative value alias for melvorD:flatFarmingSeedCost",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "damageDealtToCombatAreaMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageToCombatAreaMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "damageDealtToDungeonMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageToDungeonMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageToCombatAreaMonsters": {
          "description": "Negative value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageToDungeonMonsters": {
          "description": "Negative value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedLeprechaunCreationCharges": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCyclopsCreationCharges": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedLeprechaunCreationCharges": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedCyclopsCreationCharges": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSalamanderCreationCharges": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedArrowProduction": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFletchingBoltQuantity": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedBoltProduction": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedJavelinProduction": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedBaseCraftingConsumableProduction": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedBoltProduction": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedJavelinProduction": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedRunecraftingWaterComboRunes": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedSalamanderCreationCharges": {
          "description": "Positive value alias for melvorD:basePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedStandardRuneProduction": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCombinationRuneProduction": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedAdditionalRunecraftCountRunes": {
          "description": "Positive value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAdditionalRunecraftCountRunes": {
          "description": "Negative value alias for melvorD:flatAdditionalPrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceExtraCrossbows": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantityChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceExtraCrossbows": {
          "description": "Negative value alias for melvorD:flatBasePrimaryProductQuantityChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedRunecraftingRuneQuantity": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantityChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceExtraUnstrungBows": {
          "description": "Positive value alias for melvorD:additional2PrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceExtraUnstrungBows": {
          "description": "Negative value alias for melvorD:additional2PrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceExtraJavelins": {
          "description": "Positive value alias for melvorD:additional3PrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceExtraJavelins": {
          "description": "Negative value alias for melvorD:additional3PrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceExtraArrows": {
          "description": "Positive value alias for melvorD:additional5PrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceExtraArrows": {
          "description": "Negative value alias for melvorD:additional5PrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCraftingJewelryPreservation": {
          "description": "Positive value alias for melvorD:skillPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedRunecraftingStavePreservation": {
          "description": "Positive value alias for melvorD:skillPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedRunecraftingEssencePreservation": {
          "description": "Positive value alias for melvorD:skillPreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedJavelinResourceCost": {
          "description": "Positive value alias for melvorD:skillCostReduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedJavelinResourceCost": {
          "description": "Negative value alias for melvorD:skillCostReduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFletchingIntervalWithArrows": {
          "description": "Positive value alias for melvorD:flatSkillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedFletchingIntervalWithArrows": {
          "description": "Negative value alias for melvorD:flatSkillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedSummoningIntervalForOctopus": {
          "description": "Negative value alias for melvorD:skillInterval",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipFoodProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipWoodProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipOreProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipStoneProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipCoalProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipBarProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipHerbProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipRuneEssenceProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipLeatherProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipPotionProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipPlankProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipClothingProduction": {
          "description": "Positive value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipFoodProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipWoodProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipOreProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipStoneProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipCoalProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipBarProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipHerbProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipRuneEssenceProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipLeatherProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipPotionProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipPlankProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipClothingProduction": {
          "description": "Negative value alias for melvorD:townshipResourceProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipGrasslandsProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipForestProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipDesertProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipWaterProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipSwampProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipAridPlainsProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipMountainsProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipValleyProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipJungleProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipSnowlandsProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipGrasslandsProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipForestProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipDesertProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipWaterProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipSwampProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipAridPlainsProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipMountainsProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipValleyProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipJungleProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipSnowlandsProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipFishingDockProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipMagicEmporiumProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipOrchardProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipFarmProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipWoodcuttingProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedTownshipBlacksmithProduction": {
          "description": "Positive value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipFishingDockProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipMagicEmporiumProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipOrchardProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipFarmProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipWoodcuttingProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedTownshipBlacksmithProduction": {
          "description": "Negative value alias for melvorD:townshipBuildingProduction",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceStardust": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceGoldenStardust": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForAshInFiremaking": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForStardustInFiremaking": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceStardust": {
          "description": "Negative value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceGoldenStardust": {
          "description": "Negative value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForAshInFiremaking": {
          "description": "Negative value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForStardustInFiremaking": {
          "description": "Negative value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedAdditionalAshInFiremaking": {
          "description": "Positive value alias for melvorD:flatBaseRandomProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedAdditionalAshInFiremaking": {
          "description": "Negative value alias for melvorD:flatBaseRandomProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForAshInWoodcutting": {
          "description": "Positive value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForChestOfGemsInWoodcutting": {
          "description": "Positive value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForAshInWoodcutting": {
          "description": "Negative value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFireRunesWhenMakingElementalRunes": {
          "description": "Positive value alias for melvorD:flatAdditionalSkillItem",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedRuneEssenceThievingMiner": {
          "description": "Positive value alias for melvorD:flatAdditionalSkillItem",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "thievingChefNoDamage": {
          "description": "Positive value alias for melvorD:ignoreThievingDamage",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceStardustCuttingMagicLogs": {
          "description": "Positive value alias for melvorD:additionalItemBasedOnPrimaryQuantityChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedFishermansPotionCharges": {
          "description": "Positive value alias for melvorD:potionCharges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedGenerousCookPotionCharges": {
          "description": "Positive value alias for melvorD:potionCharges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCraftingPotionCharges": {
          "description": "Positive value alias for melvorD:potionCharges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedCraftingJewelryRandomGemChance": {
          "description": "Positive value alias for melvorD:additionalRandomGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "summoningSynergy_Mole_Leprechaun": {
          "description": "Positive value alias for melvorD:additionalRandomGemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "damageDealtToSlayerAreaMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageToSlayerAreaMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedDamageToSlayerAreaMonsters": {
          "description": "Negative value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedMeteoriteOre": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceExtraMeteoriteOre": {
          "description": "Positive value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceExtraMeteoriteOre": {
          "description": "Negative value alias for melvorD:additionalPrimaryProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceForCharcoalInFiremaking": {
          "description": "Positive value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceForCharcoalInFiremaking": {
          "description": "Negative value alias for melvorD:randomProductChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceToFindMushroomWoodcutting": {
          "description": "Positive value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedChanceToFindLostChest": {
          "description": "Positive value alias for melvorD:additionalRandomSkillItemChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDeadlyToxinsFromHerblore": {
          "description": "Positive value alias for melvorD:flatAdditionalSkillItem",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDigSiteMapSlots": {
          "description": "Positive value alias for melvorAoD:digSiteMapSlots",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorAoD:digSiteMapSlots": {
          "description": "+${value} dig site map slots",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "increasedChanceToPreserveMapCharges": {
          "description": "Positive value alias for melvorAoD:mapChargePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "decreasedChanceToPreserveMapCharges": {
          "description": "Negative value alias for melvorAoD:mapChargePreservationChance",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorAoD:mapChargePreservationChance": {
          "description": "-${value}% chance to preserve dig site map excavation actions",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "melvorAoD:artefactValue": {
          "description": "${value} to all Artefact values for ${actionName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "increasedMinimumItemsFoundInArchaeology": {
          "description": "Positive value alias for melvorD:flatBasePrimaryProductQuantity",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "melvorItA:maxHarvestingIntensity": {
          "description": "${value}% maximum Harvesting Intensity for ${actionName}",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopedModifierValue32"
          }
        },
        "melvorItA:noHarvestingIntensityDecay": {
          "description": "Harvesting Vein Intensity no longer reduces over time",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/ScopedModifierValue0"
                  },
                  {
                    "$ref": "#/$defs/ScopedModifierValue32"
                  }
                ]
              }
            }
          ]
        },
        "damageDealtToAbyssalSlayerAreaMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "increasedDamageToAbyssalSlayerAreaMonsters": {
          "description": "Positive value alias for melvorD:damageDealtToMonstersInArea",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ScopedModifierValue0"
              }
            }
          ],
          "deprecated": true
        },
        "sailing:Combat": {
          "description": "+${value} Combat",
          "type": "number"
        },
        "sailing:Morale": {
          "description": "+${value} Morale",
          "type": "number"
        },
        "sailing:Seafaring": {
          "description": "+${value} Seafaring",
          "type": "number"
        },
        "sailing:Speed": {
          "description": "+${value} Speed",
          "type": "number"
        }
      },
      "unevaluatedProperties": false
    },
    "ScopedModifierValue0": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        }
      },
      "required": [
        "value"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue2": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "damageTypeID": {
          "description": "The ID of the DamageType this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        }
      },
      "required": [
        "value",
        "damageTypeID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue1": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue33": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "actionID": {
          "description": "The ID of the Skill Action this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "actionID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue4": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        }
      },
      "required": [
        "value",
        "realmID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue5": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "realmID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue8": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        }
      },
      "required": [
        "value",
        "currencyID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue10": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "damageTypeID": {
          "description": "The ID of the DamageType this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        }
      },
      "required": [
        "value",
        "damageTypeID",
        "currencyID"
      ],
      "unevaluatedProperties": false
    },
    "BaseModifierValueData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModifierScopeData"
        }
      ],
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        }
      },
      "required": [
        "value"
      ]
    },
    "ModifierValuesArrayData": {
      "type": "array",
      "items": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/$defs/BaseModifierValueData"
          }
        ],
        "properties": {
          "key": {
            "description": "The ID of the modifier",
            "allOf": [
              {
                "$ref": "#/$defs/ModifierKey"
              }
            ]
          }
        },
        "required": [
          "key"
        ],
        "unevaluatedProperties": false
      }
    },
    "EnemyModifierAlias": {
      "type": "string",
      "enum": [
        "increasedGlobalAccuracy",
        "decreasedGlobalAccuracy",
        "increasedMeleeAccuracyBonus",
        "decreasedMeleeAccuracyBonus",
        "increasedRangedAccuracyBonus",
        "decreasedRangedAccuracyBonus",
        "increasedMagicAccuracyBonus",
        "decreasedMagicAccuracyBonus",
        "increasedMeleeMaxHit",
        "decreasedMeleeMaxHit",
        "increasedRangedMaxHit",
        "decreasedRangedMaxHit",
        "increasedMagicMaxHit",
        "decreasedMagicMaxHit",
        "increasedGlobalEvasion",
        "decreasedGlobalEvasion",
        "increasedMeleeEvasion",
        "decreasedMeleeEvasion",
        "increasedRangedEvasion",
        "decreasedRangedEvasion",
        "increasedMagicEvasion",
        "decreasedMagicEvasion",
        "increasedMaxHitFlat",
        "decreasedMaxHitFlat",
        "increasedMaxHitPercent",
        "decreasedMaxHitPercent",
        "increasedHPRegenFlat",
        "decreasedHPRegenFlat",
        "increasedAttackInterval",
        "decreasedAttackInterval",
        "increasedAttackIntervalPercent",
        "decreasedAttackIntervalPercent",
        "increasedMaxHitpoints",
        "decreasedMaxHitpoints",
        "increasedMaxHitpointsWithDamageType",
        "increasedFlatMaxHitpoints",
        "decreasedFlatMaxHitpoints",
        "increasedReflectDamage",
        "decreasedReflectDamage",
        "increasedHitpointRegeneration",
        "decreasedHitpointRegeneration",
        "increasedMinHitBasedOnMaxHit",
        "decreasedMinHitBasedOnMaxHit",
        "increasedAttackRolls",
        "decreasedAttackRolls",
        "decreasedDragonBreathDamage",
        "increasedFlatReflectDamage",
        "decreasedFlatReflectDamage",
        "increasedRolledReflectDamage",
        "decreasedRolledReflectDamage",
        "increasedFlatMinHit",
        "decreasedFlatMinHit",
        "increasedMinSpellDmg",
        "increasedConfusion",
        "increasedDecay",
        "increasedDamageTaken",
        "decreasedDamageTaken",
        "increasedLifesteal",
        "decreasedLifesteal",
        "increasedMeleeLifesteal",
        "decreasedMeleeLifesteal",
        "increasedRangedLifesteal",
        "decreasedRangedLifesteal",
        "increasedMagicLifesteal",
        "decreasedMagicLifesteal",
        "increasedBleedLifesteal",
        "decreasedBleedLifesteal",
        "increasedBurnLifesteal",
        "decreasedBurnLifesteal",
        "increasedPoisonLifesteal",
        "decreasedPoisonLifesteal",
        "increasedMeleeCritChance",
        "decreasedMeleeCritChance",
        "increasedRangedCritChance",
        "decreasedRangedCritChance",
        "increasedMagicCritChance",
        "decreasedMagicCritChance",
        "increasedRebirthChance",
        "increasedSummoningMaxHit",
        "decreasedSummoningMaxHit",
        "increasedTotalBleedDamage",
        "increasedChanceToIncreaseStunDuration",
        "increasedRegenerationInterval",
        "decreasedRegenerationInterval",
        "decreasedRegenerationIntervalWithDamageType",
        "increasedOnHitSlowMagnitude",
        "increasedPrayerPointsWhenHit",
        "increasedFlatMeleeAccuracyBonusPerAttackInterval",
        "decreasedFlatMeleeAccuracyBonusPerAttackInterval",
        "increasedFlatMeleeStrengthBonusPerAttackInterval",
        "decreasedFlatMeleeStrengthBonusPerAttackInterval",
        "increasedFlatRangedAccuracyBonusPerAttackInterval",
        "decreasedFlatRangedAccuracyBonusPerAttackInterval",
        "increasedFlatRangedStrengthBonusPerAttackInterval",
        "decreasedFlatRangedStrengthBonusPerAttackInterval",
        "increasedFlatMagicAccuracyBonusPerAttackInterval",
        "decreasedFlatMagicAccuracyBonusPerAttackInterval",
        "increasedMeleeMaxHitBonusAgainstRanged",
        "decreasedMeleeMaxHitBonusAgainstRanged",
        "increasedRangedMaxHitBonusAgainstMagic",
        "decreasedRangedMaxHitBonusAgainstMagic",
        "increasedMagicMaxHitBonusAgainstMelee",
        "decreasedMagicMaxHitBonusAgainstMelee",
        "increasedDamageTakenAddedAsPrayerPoints",
        "decreasedDamageTakenAddedAsPrayerPoints",
        "globalAccuracyHPScaling",
        "increasedChanceToIncreaseSleepDuration",
        "decreasedChanceToIncreaseSleepDuration",
        "increasedChanceToAvoidStun",
        "decreasedChanceToAvoidStun",
        "increasedHealWhenStunned",
        "decreasedHealWhenStunned",
        "increasedHealWhenSleep",
        "decreasedHealWhenSleep",
        "increasedDamageTakenPerAttack",
        "increasedFrostburn",
        "decreasedDamageTakenPerAttack",
        "increasedMeleeMaxHitFlat",
        "decreasedMeleeMaxHitFlat",
        "increasedRangedMaxHitFlat",
        "decreasedRangedMaxHitFlat",
        "increasedMagicMaxHitFlat",
        "decreasedMagicMaxHitFlat",
        "increasedCurseLifesteal",
        "increasedLifestealBasedOnHPRegenEffectiveness",
        "increasedMinMeteorShowerSpellDamage",
        "increasedEndOfTurnEvasion2",
        "increasedMaxHPBurnDamage",
        "increasedBurnDOTDamage",
        "decreasedBurnDOTDamage",
        "increasedBleedDOTDamage",
        "decreasedBleedDOTDamage",
        "increasedPoisonDOTDamage",
        "decreasedPoisonDOTDamage",
        "increasedDeadlyPoisonDOTDamage",
        "decreasedDeadlyPoisonDOTDamage",
        "increasedEvasionAgainstMelee",
        "increasedEvasionAgainstRanged",
        "increasedEvasionAgainstMagic",
        "increasedMeleeAccuracyMaxHitPer8Strength",
        "increasedMagicMaxHitWithActivePrayer",
        "increasedRangedStrengthBonusPer8Ranged",
        "increasedFlatBarrierSummonDamage",
        "increasedBarrierSummonDamage",
        "increasedFlatBarrierSummonDamageMelee",
        "increasedFlatBarrierSummonDamageRanged",
        "increasedFlatBarrierSummonDamageMagic",
        "increasedBarrierSummonDamageIfSlayerTask",
        "increasedMaxHitPercentBasedOnTargetCurrentHitpoints",
        "increasedChanceToPreservePrayerPointsPerPoint",
        "increasedMaxHitBasedOnPrayerCost",
        "increasedPrayerPointsPerMonsterKill",
        "increasedSelfDamageBasedOnCurrentHitpoints",
        "increasedChanceToReceiveNoCombatDrops",
        "decreasedMeleeAttackIntervalPercent",
        "increasedChanceToDodge",
        "increasedAmmoPreservationBypass",
        "increasedRunePreservationBypass",
        "halfAttackInterval",
        "increasedLifestealDamageBasedOnCurrentHitpoints",
        "increasedDamageBasedOnCurrentHitpoints",
        "increasedDamageBasedOnMaxHitpoints",
        "increasedHealingWhenHit",
        "increasedDamageDealtWith2Effects",
        "increasedUnholyMarkOnHit",
        "increasedDamageTakenBasedOnHP",
        "increasedCurseOnHitWithUnholyMark",
        "increasedFlatBarrierDamage",
        "increasedDamageDealtPerEffect",
        "increasedRegenPerDamageTaken",
        "decreasedSummoningAttackIntervalPercent",
        "increasedGlobalCritChance",
        "increasedLacerationLifesteal",
        "increasedDamageTakenPerMissedAttack",
        "increasedAbyssalSlayerAreaEffectNegation",
        "decreasedAbyssalSlayerAreaEffectNegation",
        "increasedRawReflectDamage",
        "decreasedEvasionBasedOnCorruptionLevel",
        "increasedDOTDamage",
        "decreasedDOTDamage",
        "increasedBonusCorruptionChance",
        "increasedCorruptionCounterRate",
        "decreasedCorruptionCounterRate",
        "increasedGlobalCritMultiplier",
        "increasedDamageBasedOnMaxHitpointsSelf",
        "increasedToxinDOTDamage",
        "decreasedToxinDOTDamage",
        "increasedAblazeDOTDamage",
        "decreasedAblazeDOTDamage",
        "increasedAblazeLifesteal",
        "increasedToxinLifesteal",
        "increasedMinHitBasedOnMaxHitMelee",
        "increasedMinHitBasedOnMaxHitRanged",
        "increasedMinHitBasedOnMaxHitMagic",
        "decreasedLacerationDOTDamage",
        "decreasedVoidburstDOTDamage",
        "increasedExtraLacerationStackChance",
        "increasedDamageReduction",
        "increasedResistance",
        "decreasedResistance",
        "decreasedDamageReduction",
        "increasedDamageReductionAgainstMelee",
        "increasedResistanceAgainstMelee",
        "decreasedResistanceAgainstMelee",
        "decreasedDamageReductionAgainstMelee",
        "increasedDamageReductionAgainstRanged",
        "increasedResistanceAgainstRanged",
        "decreasedResistanceAgainstRanged",
        "decreasedDamageReductionAgainstRanged",
        "increasedDamageReductionAgainstMagic",
        "increasedResistanceAgainstMagic",
        "decreasedResistanceAgainstMagic",
        "decreasedDamageReductionAgainstMagic",
        "increasedDamageReductionPercent",
        "increasedResistancePercent",
        "decreasedResistancePercent",
        "decreasedDamageReductionPercent",
        "halveDamageReduction",
        "increasedMaxHitPercentBasedOnDamageReduction",
        "increasedMaxHitPercentBasedOnResistance",
        "decreasedMaxHitPercentBasedOnResistance",
        "decreasedMaxHitPercentBasedOnDamageReduction",
        "increasedMaxHitPercentBasedOnEnemyDamageReduction",
        "increasedMaxHitPercentBasedOnTargetResistance",
        "decreasedMaxHitPercentBasedOnTargetResistance",
        "decreasedMaxHitPercentBasedOnEnemyDamageReduction",
        "decreasedEvasionBasedOnDR",
        "decreasedEvasionBasedOnResistance",
        "increasedChanceToIgnoreResistanceWhenAttacking",
        "increasedMaxHitPercentAgainstDamageType",
        "increasedGlobalAccuracyAgainstDamageType",
        "increasedGlobalEvasionAgainstDamageType",
        "increasedMaxHitpointsAgainstDamageType",
        "increasedSlayerAreaEffectNegationFlat",
        "decreasedSlayerAreaEffectNegationFlat",
        "increasedMaxAirSpellDmg",
        "increasedMaxWaterSpellDmg",
        "increasedMaxEarthSpellDmg",
        "increasedMaxFireSpellDmg",
        "increasedBoltSpellMaxHitFlat",
        "decreasedMaxAirSpellDmg",
        "decreasedMaxWaterSpellDmg",
        "decreasedMaxEarthSpellDmg",
        "decreasedMaxFireSpellDmg",
        "increasedMinAirSpellDmg",
        "increasedMinWaterSpellDmg",
        "increasedMinEarthSpellDmg",
        "increasedMinFireSpellDmg",
        "increasedMinElementalSpellDmg",
        "decreasedMinAirSpellDmg",
        "decreasedMinWaterSpellDmg",
        "decreasedMinEarthSpellDmg",
        "decreasedMinFireSpellDmg",
        "increasedSurgeSpellAccuracy",
        "increasedSurgeSpellMaxHit",
        "nulled",
        "debuffImmunity",
        "curseImmunity",
        "burnImmunity",
        "stunImmunity",
        "freezeImmunity",
        "increasedChanceToDodgeCrystallization",
        "increasedChanceToAvoidSleep",
        "slowImmunity",
        "frostBurnImmunity",
        "bleedImmunity",
        "poisonImmunity",
        "increasedChanceToAvoidCurses",
        "increasedChanceToDodgeCrystalSanction",
        "decreasedChanceToAvoidSleep",
        "increasedDamageTakenWhenStunned",
        "increasedDamageTakenWhenAsleep",
        "increasedDamageTakenWhenSlowed",
        "increasedDamageTakenIfCursed",
        "decreasedDamageTakenWhenStunned",
        "decreasedDamageTakenWhenAsleep",
        "increasedMinNatureSpellDamageBasedOnMaxHit",
        "increasedMinPoisonArchaicDmg",
        "increasedMinInfernalArchaicDmg",
        "increasedMinLightningArchaicDmg",
        "increasedPoisonSpellAccuracy",
        "increasedInfernalSpellAccuracy",
        "increasedLightningSpellAccuracy"
      ]
    },
    "ModifierAlias": {
      "oneOf": [
        {
          "$ref": "#/$defs/EnemyModifierAlias"
        },
        {
          "type": "string",
          "enum": [
            "increasedChanceDoubleSlayerTaskKill",
            "decreasedChanceDoubleSlayerTaskKill",
            "increasedChanceToDoubleLootCombat",
            "decreasedChanceToDoubleLootCombat",
            "increasedDamageToBosses",
            "decreasedDamageToBosses",
            "increasedDamageToSlayerTasks",
            "decreasedDamageToSlayerTasks",
            "increasedDamageToAllMonsters",
            "decreasedDamageToAllMonsters",
            "increasedAutoEatEfficiency",
            "decreasedAutoEatEfficiency",
            "increasedAutoEatThreshold",
            "decreasedAutoEatThreshold",
            "increasedAutoEatHPLimit",
            "decreasedAutoEatHPLimit",
            "increasedFoodHealingValue",
            "decreasedFoodHealingValue",
            "increasedFoodHealingValueBasedOnDamageType",
            "increasedChanceToPreservePrayerPoints",
            "decreasedChanceToPreservePrayerPoints",
            "decreasedFlatPrayerCostReduction",
            "increasedFlatPrayerCostReduction",
            "increasedAmmoPreservation",
            "decreasedAmmoPreservation",
            "increasedRunePreservation",
            "decreasedRunePreservation",
            "increasedMonsterRespawnTimer",
            "decreasedMonsterRespawnTimer",
            "increasedBankSpace",
            "increasedBankSpaceShop",
            "decreasedBankSpace",
            "decreasedBankSpaceShop",
            "increasedChanceToPreservePotionCharge",
            "decreasedChanceToPreservePotionCharge",
            "increasedGlobalMasteryXP",
            "decreasedGlobalMasteryXP",
            "increasedMasteryXP",
            "decreasedMasteryXP",
            "increasedGlobalSkillXP",
            "decreasedGlobalSkillXP",
            "increasedSkillXP",
            "decreasedSkillXP",
            "increasedMiningNodeHP",
            "decreasedMiningNodeHP",
            "increasedEquipmentSets",
            "increasedTreeCutLimit",
            "increasedGlobalPreservationChance",
            "decreasedGlobalPreservationChance",
            "increasedSkillPreservationChance",
            "decreasedSkillPreservationChance",
            "increasedSlayerTaskLength",
            "decreasedSlayerTaskLength",
            "increasedChanceToDoubleItemsGlobal",
            "decreasedChanceToDoubleItemsGlobal",
            "golbinRaidWaveSkipCostReduction",
            "golbinRaidIncreasedMaximumAmmo",
            "golbinRaidIncreasedMaximumRunes",
            "golbinRaidIncreasedMinimumFood",
            "golbinRaidIncreasedPrayerLevel",
            "golbinRaidIncreasedPrayerPointsStart",
            "golbinRaidIncreasedPrayerPointsWave",
            "golbinRaidIncreasedStartingRuneCount",
            "increasedPotionChargesFlat",
            "decreasedPotionChargesFlat",
            "increasedChanceNoDamageMining",
            "decreasedChanceNoDamageMining",
            "increasedChanceForElementalRune",
            "decreasedChanceForElementalRune",
            "increasedElementalRuneGain",
            "decreasedElementalRuneGain",
            "increasedChanceRandomPotionHerblore",
            "decreasedChanceRandomPotionHerblore",
            "increasedAltMagicSkillXP",
            "decreasedAltMagicSkillXP",
            "increasedChanceToConvertSeedDrops",
            "increasedFlatMagicDefenceBonus",
            "increasedHPRegenWhenEnemyHasMoreEvasion",
            "increasedSummoningAttackLifesteal",
            "increasedBonusFishingSpecialChance",
            "increasedWoodcuttingJewelryChance",
            "decreasedCookingSuccessCap",
            "increasedMiningBarChance",
            "increasedFishingCookedChance",
            "increasedMagicMinHitBasedOnMaxHitSlayerTask",
            "increasedMeleeMaxHitBasedOnMaxHitSlayerTask",
            "increasedFlatHPRegenBasedOnMeleeMaxHit",
            "increasedRangedMaxHitBasedOnMaxHitSlayerTask",
            "increasedFlatHPRegenBasedOnRangedMaxHit",
            "increasedSlayerCoinsPerMagicDamageSlayerTask",
            "increasedFlatHPRegenBasedOnMagicMaxHit",
            "decreasedFlatCraftingDragonhideCost",
            "increasedThievingAutoSellPrice",
            "increasedRandomBarChanceThievingMiner",
            "increasedHerbSackChanceThievingFarmer",
            "increasedHitpointRegenerationAgainstSlayerTasks",
            "decreasedFlatSmithingCoalCost",
            "increasedMeleeStrengthBonus",
            "decreasedMeleeStrengthBonus",
            "increasedRangedStrengthBonus",
            "decreasedRangedStrengthBonus",
            "increasedMagicDamageBonus",
            "decreasedMagicDamageBonus",
            "increasedAgilityObstacleCost",
            "decreasedAgilityObstacleCost",
            "increasedCompostPreservationChance",
            "increasedOffItemChance",
            "increasedMiningGemChance",
            "increasedBonusCoalMining",
            "decreasedSmithingCoalCost",
            "increasedMasteryPoolProgress",
            "increasedRuneProvision",
            "increasedRedemptionThreshold",
            "increasedRedemptionPercent",
            "increasedSummoningShardCost",
            "decreasedSummoningShardCost",
            "increasedSummoningChargePreservation",
            "decreasedSummoningChargePreservation",
            "increasedPrayerCost",
            "decreasedPrayerCost",
            "increasedChanceSuccessfulCook",
            "decreasedChanceSuccessfulCook",
            "increasedChancePerfectCookGlobal",
            "decreasedChancePerfectCookGlobal",
            "increasedThievingStealth",
            "decreasedThievingStealth",
            "increasedAltMagicRunePreservation",
            "decreasedAltMagicRunePreservation",
            "increasedFishingSpecialChance",
            "decreasedFishingSpecialChance",
            "increasedChanceToPreserveFood",
            "increasedWoodcuttingXPAddedAsFiremakingXP",
            "decreasedWoodcuttingXPAddedAsFiremakingXP",
            "coalGainedOnCookingFailure",
            "halvedWoodcuttingDoubleChance",
            "increasedChanceForQualitySuperiorGem",
            "decreasedChanceForQualitySuperiorGem",
            "increasedXPFromNegativeObstacles",
            "decreasedXPFromNegativeObstacles",
            "increasedMasteryXPFromNegativeObstacles",
            "decreasedMasteryXPFromNegativeObstacles",
            "increasedThievingStunIntervalPercent",
            "decreasedThievingStunIntervalPercent",
            "increasedGlobalSkillIntervalPercent",
            "decreasedGlobalSkillIntervalPercent",
            "increasedSkillIntervalPercent",
            "decreasedSkillIntervalPercent",
            "increasedChanceForArrowShaftsWoodcutting",
            "decreasedChanceForArrowShaftsWoodcutting",
            "increasedPassiveCookInterval",
            "decreasedPassiveCookInterval",
            "increasedGPFromItemAlchemy",
            "increasedThievingAreaUniqueChance",
            "decreasedThievingAreaUniqueChance",
            "increasedChanceToFindMeteorite",
            "increasedChanceToAvoidThievingStuns",
            "increasedChanceAdditionalPerfectItem",
            "increasedTownshipPopulationCap",
            "decreasedTownshipPopulationCap",
            "increasedTownshipHappiness",
            "decreasedTownshipHappiness",
            "increasedTownshipEducation",
            "decreasedTownshipEducation",
            "increasedTownshipHealth",
            "decreasedTownshipHealth",
            "increasedTownshipGPProduction",
            "decreasedTownshipGPProduction",
            "increasedTownshipMaxStorage",
            "decreasedTownshipMaxStorage",
            "increasedTownshipBuildingCost",
            "decreasedTownshipBuildingCost",
            "increasedTownshipTaxPerCitizen",
            "decreasedTownshipTaxPerCitizen",
            "increasedTownshipResourceProduction",
            "decreasedTownshipResourceProduction",
            "increasedTownshipCoalUsage",
            "decreasedTownshipCoalUsage",
            "increasedTownshipBuildingHappinessPenalties",
            "decreasedTownshipBuildingHappinessPenalties",
            "increasedTownshipFoodUsage",
            "decreasedTownshipFoodUsage",
            "increasedChanceToPreserveConsumable",
            "increasedGemVeinChance",
            "decreasedGemVeinChance",
            "increasedAgilityPillarCost",
            "decreasedAgilityPillarCost",
            "increasedNonCombatSkillXP",
            "decreasedNonCombatSkillXP",
            "increasedFlatMeleeDefenceBonus",
            "increasedFlatRangedDefenceBonus",
            "increasedFlatStabAttackBonus",
            "increasedFlatSlashAttackBonus",
            "increasedFlatBlockAttackBonus",
            "increasedFlatRangedAttackBonus",
            "increasedFlatMagicAttackBonus",
            "increasedFlatMeleeStrengthBonus",
            "increasedFlatRangedStrengthBonus",
            "increasedMasteryPoolCap",
            "increasedTownshipTraderStock",
            "increasedSightRange",
            "decreasedSightRange",
            "increasedSurveyRange",
            "decreasedSurveyRange",
            "increasedHexTravelCost",
            "decreasedHexTravelCost",
            "increasedSurveyInterval",
            "decreasedSurveyInterval",
            "increasedPaperMakingInterval",
            "decreasedPaperMakingInterval",
            "increasedMapUpgradeInterval",
            "decreasedMapUpgradeInterval",
            "increasedSurveyXP",
            "decreasedSurveyXP",
            "increasedMapUpgradeActions",
            "decreasedMapUpgradeActions",
            "increasedInitialMapArtefactValues",
            "decreasedInitialMapArtefactValues",
            "increasedSieveToolLevel",
            "increasedTrowelToolLevel",
            "increasedBrushToolLevel",
            "increasedShovelToolLevel",
            "increasedChanceToLocateAncientRelic",
            "increasedHolyDustFromBlessedOffering",
            "increasedPrayerPointsFromBurying",
            "increasedChanceToCatchExtraSameAreaFish",
            "increasedChanceToLocateSkillPet",
            "increasedPrayerPointsFromBuryingPercent",
            "noDamageFromThievingNPCs",
            "increasedXPFromMasteryTokens",
            "increasedChanceForEnchantedUrnInCrafting",
            "halfSkillInterval",
            "halfSkillXP",
            "halfMasteryXP",
            "increasedMasteryTokens",
            "increasedTownshipRepairCost",
            "decreasedTownshipRepairCost",
            "decreasedTownshipTraderCost",
            "increasedChanceToPreserveUnholyPrayerPoints",
            "increasedMinimumTownshipBuildingEfficiency",
            "increasedGlobalPreservationChanceBypass",
            "decreasedAgilityObstacleItemCost",
            "increasedMapRefinementCost",
            "decreasedMapRefinementCost",
            "increasedTravelEventChance",
            "decreasedTravelEventChance",
            "increasedTinyArtefactChance",
            "decreasedTinyArtefactChance",
            "increasedSmallArtefactChance",
            "decreasedSmallArtefactChance",
            "increasedMediumArtefactChance",
            "decreasedMediumArtefactChance",
            "increasedLargeArtefactChance",
            "decreasedLargeArtefactChance",
            "decreasedTinyArtefactValue",
            "decreasedSmallArtefactValue",
            "decreasedMediumArtefactValue",
            "decreasedLargeArtefactValue",
            "increasedArchaeologyCommonItemSkillXP",
            "increasedDigSiteMapCharges",
            "increasedMeleeStrengthBonusPer10EnemyDR",
            "increasedChanceToPreserveSoulPoints",
            "decreasedChanceToPreserveSoulPoints",
            "increasedCostReductionGlobal",
            "decreasedCostReductionGlobal",
            "increasedCostReductionSkill",
            "decreasedCostReductionSkill",
            "increasedHPRegenBasedOnMaxHP",
            "increasedGlobalAbyssalSkillXP",
            "decreasedGlobalAbyssalSkillXP",
            "increasedAbyssalSkillXP",
            "decreasedAbyssalSkillXP",
            "increasedChanceToRegainAbyssalTreeSeed",
            "decreasedChanceToRegainAbyssalTreeSeed",
            "increasedChanceForAbyssalGem",
            "decreasedChanceForAbyssalGem",
            "increasedChanceNoThievingDamage",
            "increasedAdditionalPrimarySkillResourceGlobal",
            "decreasedAdditionalPrimarySkillResourceGlobal",
            "increasedAdditionalPrimarySkillResource",
            "increasedFlatFarmingYield",
            "increasedPotionsHerblore",
            "decreasedAdditionalPrimarySkillResource",
            "decreasedFlatFarmingYield",
            "increasedSoulPointsPerMonsterKill",
            "increasedFlatSoulPointCostReduction",
            "increasedHarvestingIntensity",
            "increasedTownshipMaxSoulStorage",
            "decreasedTownshipMaxSoulStorage",
            "increasedStarFallChance",
            "increasedGlobalSkillPreservationCap",
            "increasedSkillPreservationCap",
            "decreasedSkillPreservationCap",
            "increasedDrakeNestsFromThievingTreant",
            "increasedWoodcuttingDrakeNestJewelryChance",
            "increasedWoodcuttingAXPAddedAsFiremakingAXP",
            "increasedChanceForRandomBarThievingWitheringRuins",
            "increasedSoulPointsWhenHit",
            "increasedMaxHitWith2AbyssalPrayers",
            "increasedMinimumHarvestingIntensity",
            "decreasedAbyssalPrayerCost",
            "increasedCombatAXPAgainstCorruptedMonsters",
            "decreasedMiningNodeRespawnInterval",
            "increasedRunecraftingBaseXPForRunes",
            "decreasedTier1SummoningShardCost",
            "decreasedTier2SummoningShardCost",
            "decreasedTier3SummoningShardCost",
            "increasedThievingAreaUniqueChancePercent",
            "increasedMeleeStrengthBonusWith2HWeapon",
            "increasedGlobalEvasionWith2H",
            "increasedMeleeDefenceBonusPerAbyssalLevel",
            "increasedRangedDefenceBonusPerAbyssalLevel",
            "increasedMagicDefenceBonusPerAbyssalLevel",
            "increasedAbyssalCombatSkillXP",
            "increasedRangedStrengthBonusWith2HWeapon",
            "increasedMagicDamageBonusWith2HWeapon",
            "increasedSoulPointsFromReleasing",
            "decreasedSlayerTaskExtensionCost",
            "decreasedPermanentCorruptionCost",
            "increasedSlashAttackBonus",
            "increasedMeleeAccuracyWith2H",
            "increasedHiddenSkillLevel",
            "decreasedHiddenSkillLevel",
            "increasedSkillInterval",
            "decreasedSkillInterval",
            "increasedChanceToDoubleItemsSkill",
            "increasedChanceToDoubleOres",
            "increasedChanceDoubleHarvest",
            "decreasedChanceToDoubleItemsSkill",
            "decreasedChanceToDoubleOres",
            "decreasedChanceDoubleHarvest",
            "increasedChanceAdditionalSkillResource",
            "increasedChanceForOneExtraFish",
            "decreasedChanceAdditionalSkillResource",
            "decreasedChanceForOneExtraFish",
            "doubleLogProduction",
            "increasedSkillMasteryXPPerDeedree",
            "increasedSkillMasteryXPPerAmeria",
            "increasedSkillMasteryXPPerVale",
            "increasedSkillMasteryXPPerQimican",
            "increasedSkillMasteryXPPerKo",
            "increasedSkillMasteryXPPerArachi",
            "increasedSkillMasteryXPPerIridan",
            "increasedSkillMasteryXPPerHyden",
            "increasedSkillMasteryXPPerSyllia",
            "increasedHiddenSkillLevelPer2Levels",
            "increasedHiddenSkillLevelBasedOnLevels",
            "increasedMeleeStrengthBonusBasedOnSkillLevel",
            "increasedHiddenSkillLevelPer3Levels",
            "increasedDamageReductionAgainstBosses",
            "increasedResistanceAgainstBosses",
            "decreasedResistanceAgainstBosses",
            "decreasedDamageReductionAgainstBosses",
            "increasedDamageReductionAgainstSlayerTasks",
            "increasedResistanceAgainstSlayerTasks",
            "increasedDamageReductionWithMagic2HWeapon",
            "increasedResistanceWithMagic2HWeapon",
            "decreasedResistanceWithMagic2HWeapon",
            "decreasedDamageReductionWithMagic2HWeapon",
            "increasedDamageReductionPer30Defence",
            "increasedResistancePer30Defence",
            "increasedDamageReductionWithActivePrayer",
            "increasedResistanceWithActivePrayer",
            "increasedMeleeStrengthBonusPer10EnemyDR",
            "increasedMeleeStrengthBonusPer10EnemyResistance",
            "increasedMeleeDefenceBonusBasedOnResistance",
            "increasedRangedDefenceBonusBasedOnResistance",
            "increasedMagicDefenceBonusBasedOnResistance",
            "healOnHitBasedOnTargetDR",
            "increasedHealingOnAttackBasedOnDR",
            "increasedHealingOnAttackBasedOnResistance",
            "increasedChanceToDoubleItemsAgainstDamageType",
            "increasedDamageToDamageTypeSlayerTasks",
            "increasedGPGlobal",
            "increasedSlayerCoins",
            "increasedCurrencyGlobal",
            "decreasedCurrencyGlobal",
            "decreasedGPGlobal",
            "decreasedSlayerCoins",
            "increasedGPFromAgility",
            "increasedCurrencyFromAgility",
            "increasedGPFromFiremaking",
            "increasedCurrencyFromFiremaking",
            "increasedGPFromThieving",
            "increasedCurrencyFromThieving",
            "decreasedGPFromAgility",
            "decreasedCurrencyFromAgility",
            "decreasedGPFromFiremaking",
            "decreasedCurrencyFromFiremaking",
            "decreasedGPFromThieving",
            "decreasedCurrencyFromThieving",
            "increasedGPFromMonsters",
            "increasedCurrencyFromCombat",
            "decreasedCurrencyFromCombat",
            "decreasedGPFromMonsters",
            "increasedGPFromMonstersFlat",
            "increasedCurrencyFromMonsterDropsFlat",
            "decreasedCurrencyFromMonsterDropsFlat",
            "decreasedGPFromMonstersFlat",
            "increasedGPFromThievingFlat",
            "increasedCurrencyFromThievingFlat",
            "decreasedCurrencyFromThievingFlat",
            "decreasedGPFromThievingFlat",
            "increasedGPFromSales",
            "increasedCurrencyFromItemSales",
            "decreasedCurrencyFromItemSales",
            "decreasedGPFromSales",
            "increasedGPOnEnemyHit",
            "increasedCurrencyOnEnemyHit",
            "decreasedCurrencyOnEnemyHit",
            "decreasedGPOnEnemyHit",
            "increasedSlayerCoinsBasedOnTargetDR",
            "increasedSlayerCoinsOnHitBasedOnResistance",
            "increasedGPWhenHitBasedOnDR",
            "increasedGPWhenHitBasedOnResistance",
            "increasedGPFromMonstersFlatBasedOnEvasion",
            "increasedCurrencyOnMonsterKillBasedOnEvasion",
            "increasedGPPerDamage",
            "increasedSlayerCoinsPerDamage",
            "increasedCurrencyPerDamage",
            "decreasedCurrencyPerDamage",
            "decreasedGPPerDamage",
            "decreasedSlayerCoinsPerDamage",
            "increasedGPPerMeleeDamage",
            "increasedCurrencyPerMeleeDamage",
            "increasedGPPerRangedDamage",
            "increasedCurrencyPerRangedDamage",
            "increasedGPPerMagicDamage",
            "increasedCurrencyPerMagicDamage",
            "increasedSlayerCoinsPerMagicDamageSlayerTask",
            "increasedCurrencyPerMagicDamageOnSlayerTask",
            "increasedGPFromSlayerTaskMonsters",
            "increasedCurrencyFromSlayerTaskMonsterDrops",
            "increasedGPOnRegenBasedOnHPGain",
            "increasedCurrencyOnRegenBasedOnHPGained",
            "increasedSCfromLifesteal",
            "increasedCurrencyFromLifesteal",
            "increasedMinThievingGP",
            "increasedMinThievingCurrency",
            "decreasedMinThievingCurrency",
            "decreasedMinThievingGP",
            "increasedGPFromNegativeObstacles",
            "increasedCurrencyFromNegativeObstacles",
            "decreasedCurrencyFromNegativeObstacles",
            "decreasedGPFromNegativeObstacles",
            "increasedGPFromAgilityPerActiveObstacle",
            "increasedCurrencyFromAgilityPerActiveObstacle",
            "decreasedCurrencyFromAgilityPerActiveObstacle",
            "decreasedGPFromAgilityPerActiveObstacle",
            "increasedGPFromLogSales",
            "increasedCurrencyFromLogSales",
            "increasedGPFromRawFishSales",
            "increasedCurrencyFromRawFishSales",
            "increasedGPFlat",
            "increasedCurrencyFlat",
            "increasedGPMultiplierPer1MGP",
            "increasedCurrencyPerDamageBasedOnCurrencyAmount",
            "increasedGPMultiplierMin",
            "increasedMinCurrencyMultiplierPerDamage",
            "increasedGPMultiplierCap",
            "increasedMaxCurrencyMultiplierPerDamage",
            "increasedGPPerArchaeologyLevelNoArtefact",
            "increasedCurrencyPerArchaeologyLevelNoArtefact",
            "increasedChanceForCurrencyFromHarvestingBasedOnLevel",
            "increasedCurrencyOnMonsterKillBasedOnCombatLevel",
            "increasedCurrencyFromSlayerTasks",
            "increasedCurrencyFromMonsterDropsBasedOnDebuffs",
            "gainSlayerCoinsBasedOnEnemyCombatLevelMelee",
            "increasedCurrencyFromSlayerTasksBasedOnCombatLevelMelee",
            "gainSlayerCoinsBasedOnEnemyCombatLevelRanged",
            "increasedCurrencyFromSlayerTasksBasedOnCombatLevelRanged",
            "gainSlayerCoinsBasedOnEnemyCombatLevelMagic",
            "increasedCurrencyFromSlayerTasksBasedOnCombatLevelMagic",
            "increasedGPBasedOnSummonDamage",
            "increasedCurrencyBasedOnSummonDamage",
            "decreasedCurrencyBasedOnSummonDamage",
            "decreasedGPBasedOnSummonDamage",
            "increasedGPFromBarrierDamage",
            "increasedCurrencyBasedOnBarrierDamage",
            "increasedGPBasedOnEnemyCombatLevel",
            "increasedCurrencyOnEnemyHitBasedOnCombatLevel",
            "increasedSlayerCoinsPerPoisonDamage",
            "increasedCurrencyPerPoisonDamage",
            "increasedFiremakingLogGP",
            "increasedFiremakingLogCurrency",
            "increasedChanceItemToGoldFletching",
            "increasedItemToCurrencyChanceFletching",
            "decreasedItemToCurrencyChanceFletching",
            "decreasedChanceItemToGoldFletching",
            "increasedChanceForGoldFromCrafting30",
            "increasedChanceForCurrencyCrafting30",
            "increasedChanceForGPFromFishing",
            "increasedChanceForCurrencyFishing",
            "increasedActionsPerClick",
            "increasedChanceToDoubleActionsPerClick",
            "increasedChanceForExtraActionPerClick",
            "increasedDoubleSoulDropChance",
            "increasedSummoningCreationCharges",
            "decreasedSummoningCreationCharges",
            "increasedFarmingYield",
            "decreasedFarmingYield",
            "increasedWoodcuttingGemChance",
            "increasedWoodcuttingAbyssalGemChancePerInterval",
            "increasedEssenceFromMining",
            "increasedChanceAdditionalBarSmithing",
            "increasedChanceForOneExtraOre",
            "decreasedChanceForOneExtraOre",
            "increasedChanceAdditionalSoup",
            "increasedAdditionalOresMining",
            "doubleRuneEssenceMining",
            "doubleOresMining",
            "increasedChancePerfectCookFire",
            "increasedChancePerfectCookFurnace",
            "increasedChancePerfectCookPot",
            "decreasedChancePerfectCookFire",
            "decreasedChancePerfectCookFurnace",
            "decreasedChancePerfectCookPot",
            "decreasedCookingIntervalForBasicSoup",
            "increasedSmithingDragonGearPreservation",
            "increasedFiremakingCoalChance",
            "increasedBirdNestDropRate",
            "decreasedBirdNestDropRate",
            "increasedMinBirdNestQuantity",
            "increasedChanceForDiamondFiremaking",
            "decreasedChanceForDiamondFiremaking",
            "increasedSeeingGoldChance",
            "decreasedSeeingGoldChance",
            "increasedLemonsPerAction",
            "increasedAllotmentSeedCost",
            "decreasedAllotmentSeedCost",
            "damageDealtToCombatAreaMonsters",
            "increasedDamageToCombatAreaMonsters",
            "damageDealtToDungeonMonsters",
            "increasedDamageToDungeonMonsters",
            "decreasedDamageToCombatAreaMonsters",
            "decreasedDamageToDungeonMonsters",
            "increasedLeprechaunCreationCharges",
            "increasedCyclopsCreationCharges",
            "decreasedLeprechaunCreationCharges",
            "decreasedCyclopsCreationCharges",
            "decreasedSalamanderCreationCharges",
            "increasedArrowProduction",
            "increasedFletchingBoltQuantity",
            "increasedBoltProduction",
            "increasedJavelinProduction",
            "increasedBaseCraftingConsumableProduction",
            "decreasedBoltProduction",
            "decreasedJavelinProduction",
            "increasedRunecraftingWaterComboRunes",
            "increasedSalamanderCreationCharges",
            "increasedStandardRuneProduction",
            "increasedCombinationRuneProduction",
            "increasedAdditionalRunecraftCountRunes",
            "decreasedAdditionalRunecraftCountRunes",
            "increasedChanceExtraCrossbows",
            "decreasedChanceExtraCrossbows",
            "increasedRunecraftingRuneQuantity",
            "increasedChanceExtraUnstrungBows",
            "decreasedChanceExtraUnstrungBows",
            "increasedChanceExtraJavelins",
            "decreasedChanceExtraJavelins",
            "increasedChanceExtraArrows",
            "decreasedChanceExtraArrows",
            "increasedCraftingJewelryPreservation",
            "increasedRunecraftingStavePreservation",
            "increasedRunecraftingEssencePreservation",
            "increasedJavelinResourceCost",
            "decreasedJavelinResourceCost",
            "increasedFletchingIntervalWithArrows",
            "decreasedFletchingIntervalWithArrows",
            "decreasedSummoningIntervalForOctopus",
            "increasedTownshipFoodProduction",
            "increasedTownshipWoodProduction",
            "increasedTownshipOreProduction",
            "increasedTownshipStoneProduction",
            "increasedTownshipCoalProduction",
            "increasedTownshipBarProduction",
            "increasedTownshipHerbProduction",
            "increasedTownshipRuneEssenceProduction",
            "increasedTownshipLeatherProduction",
            "increasedTownshipPotionProduction",
            "increasedTownshipPlankProduction",
            "increasedTownshipClothingProduction",
            "decreasedTownshipFoodProduction",
            "decreasedTownshipWoodProduction",
            "decreasedTownshipOreProduction",
            "decreasedTownshipStoneProduction",
            "decreasedTownshipCoalProduction",
            "decreasedTownshipBarProduction",
            "decreasedTownshipHerbProduction",
            "decreasedTownshipRuneEssenceProduction",
            "decreasedTownshipLeatherProduction",
            "decreasedTownshipPotionProduction",
            "decreasedTownshipPlankProduction",
            "decreasedTownshipClothingProduction",
            "increasedTownshipGrasslandsProduction",
            "increasedTownshipForestProduction",
            "increasedTownshipDesertProduction",
            "increasedTownshipWaterProduction",
            "increasedTownshipSwampProduction",
            "increasedTownshipAridPlainsProduction",
            "increasedTownshipMountainsProduction",
            "increasedTownshipValleyProduction",
            "increasedTownshipJungleProduction",
            "increasedTownshipSnowlandsProduction",
            "decreasedTownshipGrasslandsProduction",
            "decreasedTownshipForestProduction",
            "decreasedTownshipDesertProduction",
            "decreasedTownshipWaterProduction",
            "decreasedTownshipSwampProduction",
            "decreasedTownshipAridPlainsProduction",
            "decreasedTownshipMountainsProduction",
            "decreasedTownshipValleyProduction",
            "decreasedTownshipJungleProduction",
            "decreasedTownshipSnowlandsProduction",
            "increasedTownshipFishingDockProduction",
            "increasedTownshipMagicEmporiumProduction",
            "increasedTownshipOrchardProduction",
            "increasedTownshipFarmProduction",
            "increasedTownshipWoodcuttingProduction",
            "increasedTownshipBlacksmithProduction",
            "decreasedTownshipFishingDockProduction",
            "decreasedTownshipMagicEmporiumProduction",
            "decreasedTownshipOrchardProduction",
            "decreasedTownshipFarmProduction",
            "decreasedTownshipWoodcuttingProduction",
            "decreasedTownshipBlacksmithProduction",
            "increasedChanceStardust",
            "increasedChanceGoldenStardust",
            "increasedChanceForAshInFiremaking",
            "increasedChanceForStardustInFiremaking",
            "decreasedChanceStardust",
            "decreasedChanceGoldenStardust",
            "decreasedChanceForAshInFiremaking",
            "decreasedChanceForStardustInFiremaking",
            "increasedAdditionalAshInFiremaking",
            "decreasedAdditionalAshInFiremaking",
            "increasedChanceForAshInWoodcutting",
            "increasedChanceForChestOfGemsInWoodcutting",
            "decreasedChanceForAshInWoodcutting",
            "increasedFireRunesWhenMakingElementalRunes",
            "increasedRuneEssenceThievingMiner",
            "thievingChefNoDamage",
            "increasedChanceStardustCuttingMagicLogs",
            "increasedFishermansPotionCharges",
            "increasedGenerousCookPotionCharges",
            "increasedCraftingPotionCharges",
            "increasedCraftingJewelryRandomGemChance",
            "summoningSynergy_Mole_Leprechaun",
            "damageDealtToSlayerAreaMonsters",
            "increasedDamageToSlayerAreaMonsters",
            "decreasedDamageToSlayerAreaMonsters",
            "increasedMeteoriteOre",
            "increasedChanceExtraMeteoriteOre",
            "decreasedChanceExtraMeteoriteOre",
            "increasedChanceForCharcoalInFiremaking",
            "decreasedChanceForCharcoalInFiremaking",
            "increasedChanceToFindMushroomWoodcutting",
            "increasedChanceToFindLostChest",
            "increasedDeadlyToxinsFromHerblore",
            "increasedDigSiteMapSlots",
            "increasedChanceToPreserveMapCharges",
            "decreasedChanceToPreserveMapCharges",
            "increasedMinimumItemsFoundInArchaeology",
            "damageDealtToAbyssalSlayerAreaMonsters",
            "increasedDamageToAbyssalSlayerAreaMonsters"
          ]
        }
      ]
    },
    "EnemyModifierKey": {
      "oneOf": [
        {
          "$ref": "#/$defs/EnemyModifierAlias"
        },
        {
          "$ref": "#/$defs/EnemyModifierID"
        }
      ]
    },
    "ModifierKey": {
      "oneOf": [
        {
          "$ref": "#/$defs/ModifierAlias"
        },
        {
          "$ref": "#/$defs/ModifierID"
        }
      ]
    },
    "ModifierValuesModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds new modifiers to the existing array",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "remove": {
          "description": "Removes modifiers with the keys in this array",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "EnemyModifierValuesModificationData": {
      "type": "object",
      "properties": {
        "add": {
          "description": "Adds new modifiers to the existing array",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "remove": {
          "description": "Removes modifiers with the keys in this array",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ScopedModifierValue17": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue12": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        }
      },
      "required": [
        "value",
        "realmID",
        "currencyID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue41": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "actionID": {
          "description": "The ID of the Skill Action this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "currencyID",
        "actionID"
      ],
      "unevaluatedProperties": false
    },
    "SkillSubcategoryData": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/IDData"
        }
      ],
      "properties": {
        "name": {
          "description": "The display name of the subcategory",
          "type": "string"
        },
        "nameLang": {
          "description": "Optional. The id of a language string to use instead of the name",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue65": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "subcategoryID": {
          "description": "The Id of the Skill Subcategory this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue69": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "subcategoryID": {
          "description": "The Id of the Skill Subcategory this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "realmID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue9": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "currencyID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue256": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "effectGroupID": {
          "description": "The Id of the combat effect group this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectGroupID"
            }
          ]
        }
      },
      "required": [
        "value"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue258": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The value of the modifier",
            "type": "number"
          },
          "damageTypeID": {
            "description": "The ID of the DamageType this modifier value is scoped to",
            "allOf": [
              {
                "$ref": "#/$defs/DamageTypeID"
              }
            ]
          },
          "effectGroupID": {
            "description": "The Id of the combat effect group this modifier value is scoped to",
            "allOf": [
              {
                "$ref": "#/$defs/CombatEffectGroupID"
              }
            ]
          }
        },
        "required": [
          "value",
          "damageTypeID"
        ]
      }
    },
    "ScopedModifierValue264": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The value of the modifier",
            "type": "number"
          },
          "currencyID": {
            "description": "The ID of the Currency this modifier value is scoped to",
            "allOf": [
              {
                "$ref": "#/$defs/CurrencyID"
              }
            ]
          },
          "effectGroupID": {
            "description": "The Id of the combat effect group this modifier value is scoped to",
            "allOf": [
              {
                "$ref": "#/$defs/CombatEffectGroupID"
              }
            ]
          }
        },
        "required": [
          "value",
          "currencyID"
        ]
      }
    },
    "ScopedModifierValue129": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue128": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue133": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "realmID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue161": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "actionID": {
          "description": "The ID of the Skill Action this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "actionID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue193": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "subcategoryID": {
          "description": "The Id of the Skill Subcategory this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue145": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "IStatObjectData": {
      "type": "object",
      "properties": {
        "modifiers": {
          "description": "Optional. Modifiers that are provided to the Player",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesRecordData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Modifiers provided to the Enemy",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesRecordData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. CombatEffects merged with the player",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggeredCombatEffectApplicatorData"
          },
          "minItems": 1
        },
        "conditionalModifiers": {
          "description": "Optional. Conditional modifiers provided by this object",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConditionalModifierData"
          },
          "minItems": 1
        }
      }
    },
    "IStatObjectModificationData": {
      "type": "object",
      "properties": {
        "modifiers": {
          "description": "Optional. Adds/removes modifiers provided to the player",
          "allOf": [
            {
              "$ref": "#/$defs/ModifierValuesModificationData"
            }
          ]
        },
        "enemyModifiers": {
          "description": "Optional. Adds/removes modifiers provided to the enemy",
          "allOf": [
            {
              "$ref": "#/$defs/EnemyModifierValuesModificationData"
            }
          ]
        },
        "combatEffects": {
          "description": "Optional. Adds/removes CombatEffects merged with the player",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectApplicatorModificationData"
            }
          ]
        },
        "conditionalModifiers": {
          "description": "Optional. Adds/removes ConditionalModifiers",
          "allOf": [
            {
              "$ref": "#/$defs/ConditionalModifiersModificationData"
            }
          ]
        }
      }
    },
    "ScopedModifierValue21": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "realmID",
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue149": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "realmID",
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue25": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "currencyID",
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue64": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "subcategoryID": {
          "description": "The Id of the Skill Subcategory this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue32": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "actionID": {
          "description": "The ID of the Skill Action this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "actionID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue16": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        }
      },
      "required": [
        "value",
        "categoryID"
      ],
      "unevaluatedProperties": false
    },
    "ScopedModifierValue40": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The value of the modifier",
            "type": "number"
          },
          "currencyID": {
            "description": "The ID of the Currency this modifier value is scoped to",
            "allOf": [
              {
                "$ref": "#/$defs/CurrencyID"
              }
            ]
          },
          "actionID": {
            "description": "The ID of the Skill Action this modifier value is scoped to",
            "allOf": [
              {
                "$ref": "#/$defs/ValidID"
              }
            ]
          }
        },
        "required": [
          "value",
          "currencyID",
          "actionID"
        ]
      }
    },
    "ScopedModifierValue-1": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the modifier",
          "type": "number"
        },
        "skillID": {
          "description": "The ID of the Skill this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/SkillID"
            }
          ]
        },
        "damageTypeID": {
          "description": "The ID of the DamageType this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/DamageTypeID"
            }
          ]
        },
        "realmID": {
          "description": "The ID of the Realm this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/RealmID"
            }
          ]
        },
        "currencyID": {
          "description": "The ID of the Currency this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CurrencyID"
            }
          ]
        },
        "categoryID": {
          "description": "The ID of the Skill Category this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "actionID": {
          "description": "The ID of the Skill Action this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "subcategoryID": {
          "description": "The Id of the Skill Subcategory this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/ValidID"
            }
          ]
        },
        "itemID": {
          "description": "The Id of the Item this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/AnyItemID"
            }
          ]
        },
        "effectGroupID": {
          "description": "The Id of the combat effect group this modifier value is scoped to",
          "allOf": [
            {
              "$ref": "#/$defs/CombatEffectGroupID"
            }
          ]
        }
      },
      "required": [
        "value",
        "skillID",
        "damageTypeID",
        "realmID",
        "currencyID",
        "categoryID",
        "actionID"
      ],
      "unevaluatedProperties": false
    },
    "SailingSkillData": {
      "description": "Data for the Sailing Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillData"
        }
      ],
      "properties": {
        "ports": {
          "description": "Defines new ports for the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SailingPortData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SailingModificationData": {
      "description": "Data modifications for the Sailing Skill",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/MasterySkillModificationData"
        }
      ],
      "properties": {
        "ports": {
          "description": "Optional. Modifies the Ports registered to the skill",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SailingPortModificationData"
          },
          "minItems": 1
        }
      },
      "unevaluatedProperties": false
    },
    "SailingPortData": {
      "description": "Data for a Sailing Port",
      "discriminator": {
        "propertyName": "type"
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/RealmedObjectData"
        }
      ],
      "oneOf": [
        {
          "properties": {
            "type": {
              "type": "string",
              "const": "normal"
            },
            "media": {
              "description": "The port's icon",
              "type": "string"
            },
            "requirements": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "SkillLevel"
                    },
                    "skillID": {
                      "type": "string",
                      "const": "sailing:Sailing"
                    },
                    "level": {
                      "description": "The level requirement for the skill",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              ],
              "items": {
                "$ref": "#/$defs/SkillLevelRequirementData"
              },
              "minItems": 1
            },
            "lootTable": {
              "description": "The items to be rolled for the action",
              "type": "array",
              "items": {
                "$ref": "#/$defs/DropTableData"
              },
              "minItems": 1
            }
          },
          "required": [
            "media",
            "requirements",
            "lootTable"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "const": "skill"
            },
            "skillID": {
              "description": "The skill ID to roll for resources",
              "allOf": [
                {
                  "$ref": "#/$defs/SkillID"
                }
              ]
            }
          },
          "required": [
            "skillID"
          ]
        }
      ],
      "properties": {
        "name": {
          "description": "The name of the port",
          "type": "string"
        },
        "description": {
          "description": "The description of the port",
          "type": "string"
        },
        "distance": {
          "description": "The distance to the port, expressed in minutes",
          "type": "integer",
          "minimum": 0
        },
        "minRolls": {
          "description": "The minimum number of rolls on the loot table",
          "type": "integer",
          "minimum": 0
        },
        "maxRolls": {
          "description": "The maximum number of rolls on the loot table",
          "type": "integer",
          "minimum": 0
        },
        "type": {
          "description": "The type of the port",
          "type": "string",
          "enum": [
            "normal",
            "skill"
          ]
        },
        "requirements": {
          "description": "The requirements to make a trip to this port",
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyRequirementData"
          }
        },
        "sailingStats": {
          "description": "The requirements needed to guarantee a successful trip",
          "type": "object",
          "properties": {
            "combat": {
              "description": "The combat level required to make a successful trip",
              "type": "integer",
              "minimum": 0
            },
            "morale": {
              "description": "The morale level required to make a successful trip",
              "type": "integer",
              "minimum": 0
            },
            "seafaring": {
              "description": "The seafaring level required to make a successful trip",
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "currencyDrops": {
          "description": "Optional. Defines the currencies that drop from this monster. Currencies always drop.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "currencyID": {
                "description": "The ID of the currency to drop",
                "allOf": [
                  {
                    "$ref": "#/$defs/CurrencyID"
                  }
                ]
              },
              "min": {
                "description": "The minimum amount of the currency to drop",
                "type": "integer",
                "minimum": 0
              },
              "max": {
                "description": "The minimum amount of the currency to drop",
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "currencyID",
              "min",
              "max"
            ],
            "unevaluatedProperties": false
          },
          "minItems": 1
        }
      },
      "required": [
        "name",
        "description",
        "distance",
        "type",
        "requirements",
        "currencyDrops",
        "minRolls",
        "maxRolls"
      ],
      "unevaluatedProperties": false
    },
    "SailingPortModificationData": {
      "description": "Data For modifying a Sailing Port object",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/ModificationIDData"
        }
      ],
      "properties": {
      },
      "unevaluatedProperties": false
    }
  }
}
